{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Paparazzi","text":"<p>An Android library to render your application screens without a physical device or emulator.</p> <pre><code>class LaunchViewTest {\n@get:Rule\nval paparazzi = Paparazzi(\ndeviceConfig = PIXEL_5,\ntheme = \"android:Theme.Material.Light.NoActionBar\"\n// ...see docs for more options\n)\n\n@Test\nfun launchView() {\nval view = paparazzi.inflate&lt;LaunchView&gt;(R.layout.launch)\n// or...\n// val view = LaunchView(paparazzi.context)\n\nview.setModel(LaunchModel(title = \"paparazzi\"))\npaparazzi.snapshot(view)\n}\n\n@Test\nfun launchComposable() {\npaparazzi.snapshot {\nMyComposable()\n}\n}\n}\n</code></pre>"},{"location":"#tasks","title":"Tasks","text":"<pre><code>./gradlew sample:testDebug\n</code></pre> <p>Runs tests and generates an HTML report at <code>sample/build/reports/paparazzi/</code> showing all test runs and snapshots.</p> <pre><code>./gradlew sample:recordPaparazziDebug\n</code></pre> <p>Saves snapshots as golden values to a predefined source-controlled location (defaults to <code>src/test/snapshots</code>).</p> <pre><code>./gradlew sample:verifyPaparazziDebug\n</code></pre> <p>Runs tests and verifies against previously-recorded golden values. Failures generate diffs at <code>sample/build/paparazzi/failures</code>.</p> <p>For more examples, check out the sample project.</p>"},{"location":"#git-lfs","title":"Git LFS","text":"<p>It is recommended you use Git LFS to store your snapshots.  Here\u2019s a quick setup:</p> <pre><code>brew install git-lfs\ngit config core.hooksPath  # optional, confirm where your git hooks will be installed\ngit lfs install --local\ngit lfs track \"**/snapshots/**/*.png\"\ngit add .gitattributes\n</code></pre> <p>On CI, you might set up something like:</p> <p><code>$HOOKS_DIR/pre-receive</code> <pre><code># compares files that match .gitattributes filter to those actually tracked by git-lfs\ndiff &lt;(git ls-files ':(attr:filter=lfs)' | sort) &lt;(git lfs ls-files -n | sort) &gt;/dev/null\n\nret=$?\nif [[ $ret -ne 0 ]]; then\necho &gt;&amp;2 \"This remote has detected files committed without using Git LFS. Run 'brew install git-lfs &amp;&amp; git lfs install' to install it and re-commit your files.\";\nexit 1;\nfi\n</code></pre></p> <p><code>your_build_script.sh</code> <pre><code>if [[ is running snapshot tests ]]; then\n# fail fast if files not checked in using git lfs\n\"$HOOKS_DIR\"/pre-receive\n  git lfs install --local\n  git lfs pull\nfi\n</code></pre></p>"},{"location":"#jetifier","title":"Jetifier","text":"<p>If using Jetifier to migrate off Support libraries, add the following to your <code>gradle.properties</code> to exclude bundled Android dependencies.</p> <pre><code>android.jetifier.ignorelist=android-base-common,common\n</code></pre>"},{"location":"#lottie","title":"Lottie","text":"<p>When taking screenshots of Lottie animations, you need to force Lottie to not run on a background thread, otherwise Paparazzi can throw exceptions #494, #630.</p> <pre><code>@Before\nfun setup() {\nLottieTask.EXECUTOR = Executor(Runnable::run)\n}\n</code></pre>"},{"location":"#releases","title":"Releases","text":"<p>Our change log has release history.</p> <p>Using plugin application: <pre><code>buildscript {\nrepositories {\nmavenCentral()\ngoogle()\n}\ndependencies {\nclasspath 'app.cash.paparazzi:paparazzi-gradle-plugin:1.3.1'\n}\n}\n\napply plugin: 'app.cash.paparazzi'\n</code></pre></p> <p>Using the plugins DSL: <pre><code>plugins {\nid 'app.cash.paparazzi' version '1.3.1'\n}\n</code></pre></p> <p>Snapshots of the development version are available in Sonatype\u2019s <code>snapshots</code> repository.</p> <pre><code>repositories {\n// ...\nmaven {\nurl 'https://oss.sonatype.org/content/repositories/snapshots/'\n}\n}\n</code></pre>"},{"location":"#license","title":"License","text":"<pre><code>Copyright 2019 Square, Inc.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n</code></pre>"},{"location":"changelog/","title":"Change Log","text":""},{"location":"changelog/#unreleased","title":"Unreleased","text":""},{"location":"changelog/#131-2023-07-18","title":"1.3.1 - 2023-07-18","text":""},{"location":"changelog/#new","title":"New","text":"<ul> <li> <p>Migrated to new resource and asset loading mechanisms.  To explicitly opt-out and fall back to the legacy mechanisms, add either/both of the following to your <code>gradle.properties</code>: <pre><code>app.cash.paparazzi.legacy.resource.loading=true\napp.cash.paparazzi.legacy.asset.loading=true\n</code></pre></p> </li> <li> <p>The Android system ui (status + navigation bar) is now hidden by default; to re-enable: <pre><code>  @get:Rule\n  val paparazzi = Paparazzi(\n    showSystemUi = true\n  )\n</code></pre></p> </li> <li> <p>Relocate failure deltas from <code>PROJECT_ROOT/out/failures/</code> to <code>BUILD_DIR/paparazzi/failures/</code></p> </li> <li>Support for application and dynamic feature modules</li> <li>[Gradle Plugin] Gradle 8.2.1</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Fix accessibility labels when mergeDescendants is true</li> <li>Fixes compose alert dialogs not rendering when using RenderingMode.SHRINK</li> </ul> <p>Kudos to @kevinzheng-ap, @adamalyyan and others for contributions this release!</p>"},{"location":"changelog/#130-2023-05-31","title":"1.3.0 - 2023-05-31","text":"<p>As of this release, consumers must build on Java 17+ environments.</p>"},{"location":"changelog/#new_1","title":"New","text":"<ul> <li>Migrate Paparazzi to layoutlib Flamingo 2022.2.1</li> <li>Add accessibility support for Composables</li> <li>Add layout accessibility check support</li> <li>Compose 1.4.7</li> <li>Kotlin 1.8.21</li> <li>[Gradle Plugin] Gradle 8.1.1</li> <li>[Gradle Plugin] Android Gradle Plugin 8.0.2</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Configure android.os.Build values via reflection</li> <li>Various bug fixes with AccessibilityRenderExtension</li> <li>Make sure changes to system properties actually affect test tasks</li> <li>Fix caching bug with preparePaparazziResources task</li> <li>Use Dispatchers.Main for delay functionality</li> <li>Recomposition does not happen unless lifecycle is RESUMED</li> <li>Fix NPE when unit test variant is disabled</li> <li>Fix incompatibility with androidx.savedstate:1.1.0</li> </ul> <p>Kudos to @gamepro65, @geoff-powell, @TWiStErRob, @adamalyyan and others for contributions this release!</p>"},{"location":"changelog/#120-2023-01-18","title":"1.2.0 - 2023-01-18","text":""},{"location":"changelog/#new_2","title":"New","text":"<ul> <li>Migrate Paparazzi to layoutlib Electric Eel 2022.1.1</li> <li>Add support for RenderingMode.SHRINK to allow view-only screenshots</li> <li>Expose flag to show/hide system ui</li> <li>Register a default OnBackPressedDispatcherOwner if its present in classpath</li> <li>Bump default compileSdk to API 33</li> <li>Compose 1.3.1</li> <li>Kotlin 1.7.20</li> <li>[Gradle Plugin] Gradle 7.6</li> <li>[Gradle Plugin] Android Gradle Plugin 7.4.0</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Flush errors on unsafeUpdateConfig</li> <li>Only apply wear circle shape to full device screenshots</li> <li>Synchronize access to Handler_Delegate.queue</li> <li>Apply compose hooks to all snapshot calls</li> <li>Register LifecycleOwner and SavedStateRegistryOwner to all views</li> <li>Execute Handler callbacks after snapshots to clean up Compose references</li> <li>Fix RecyclerView issue due to layoutlib Dolphin update</li> <li>Keep AGP and tools dependencies aligned</li> </ul> <p>Kudos to @gamepro65, @saket, @rharter and others for contributions this release!</p>"},{"location":"changelog/#110-2022-10-12","title":"1.1.0 - 2022-10-12","text":""},{"location":"changelog/#new_3","title":"New","text":"<ul> <li>Migrate Paparazzi to layoutlib Chipmunk 2021.2.1</li> <li>Add support for multiplatform plugin</li> <li>Add support for JDKs 16+</li> <li>Add support for locales and layout direction (LTR/RTL)</li> <li>Add Pixel 6 &amp; Pixel 6 Pro device configs</li> <li>Enable night mode for legacy views and composables</li> <li>Enable ui mode to support form factors other than phones/tablets, e.g., auto, watches, etc.</li> <li>Google Wear DeviceConfig support</li> <li>Expose an API for offsetting frame capture time</li> <li>Add InstantAnimationsRule to delay snapshot capture until the last frame.</li> <li>Compose 1.3.0</li> <li>Kotlin 1.7.10</li> <li>[Gradle Plugin] Gradle 7.5.1</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Generate resource ids to support aapt inline resources in composables</li> <li>Reset AndroidUiDispatcher between compose snapshots</li> <li>Fix OOM error when a large number of compose snapshots are verified</li> <li>Fix HTML report in development mode</li> <li>Honor customization of Gradle\u2019s build output directory</li> <li>[Gradle Plugin] Configure native platform transformed path directly in test task to reduce cache misses</li> <li>[Gradle Plugin] Fix accidental eager task creation reducing memory pressure</li> <li>[Gradle Plugin] Fail explicitly when applying Android application plugin</li> </ul> <p>Kudos to @chris-horner, @swankjesse, @yschimke, @dniHze, @TWiStErRob, @gamepro65, @liutikas and others for contributions this release!</p>"},{"location":"changelog/#100-2022-06-03","title":"1.0.0 - 2022-06-03","text":""},{"location":"changelog/#new_4","title":"New","text":"<ul> <li>Support for Composable snapshots</li> <li>Migrate Paparazzi to layoutlib Bumblebee 2021.1.1 for better rendering and API 31 support</li> <li>Update Paparazzi configuration via new <code>unsafeUpdateConfig</code> method instead of <code>snapshot</code>/<code>gif</code></li> <li>Cache Paparazzi bootstrap logic for better performance per test suite</li> <li>Surface internally thrown exceptions from layoutlib</li> <li>Throw a more helpful exception if Android platform is missing</li> <li>Bump default compileSdk to API 31</li> <li>Compose 1.1.1</li> <li>Kotlin 1.6.10</li> <li>[Gradle Plugin] Gradle 7.4.2</li> <li>[Gradle Plugin] Android Gradle Plugin 7.1.2</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Prepend paths with file:// for clickable error output in IDE</li> <li>Update default SDK path on Linux</li> <li>Fix accessibility test logic to avoid unnecessary coloring changes on updated view ids</li> <li>Fixes crash when using InputMethodManager to show/hide keyboard</li> <li>Temporarily work around Compose runtime memory leaks</li> <li>[Gradle Plugin] Prefer namespace DSL declaration over manifest package declaration</li> <li>[Gradle Plugin] Publish plugin marker on snapshot builds</li> <li>[Gradle Plugin] Exclude androidTest sourceSets during paparazzi runs</li> </ul> <p>Kudos to @luis-cortes, @nak5ive, @alexvanyo, @gamepro65 and others for contributions this release!</p>"},{"location":"changelog/#093-2022-01-20","title":"0.9.3 - 2022-01-20","text":""},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Load the correct mac arm artifact on M1 machines</li> <li>Generate fake View.id for consistent colors for accessibility entries when views are modified</li> </ul> <p>Kudos to @geoff-powell, @nicbell for their contributions this release!</p>"},{"location":"changelog/#092-2022-01-20","title":"0.9.2 - 2022-01-20","text":"<p>Please ignore this release</p>"},{"location":"changelog/#091-2022-01-14","title":"0.9.1 - 2022-01-14","text":""},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Download mac arm artifact if on M1 machines</li> <li>Support for assets from transitive dependencies</li> <li>Add fix for ClassNotFoundException when using nonTransitiveRClass</li> <li>Update RELEASING notes to publish plugin marker artifact</li> <li>Avoid NPE in AccessibilityRenderExtension when layout params are not supplied</li> <li>Use View.id to generate consistent colors for accessibility entries when views are modified</li> </ul> <p>Kudos to @luis-cortes, @geoff-powell, @autonomousapps and @LuK1709 for their contributions this release!</p>"},{"location":"changelog/#090-2021-11-22","title":"0.9.0 - 2021-11-22","text":""},{"location":"changelog/#new_5","title":"New","text":"<ul> <li>Migrate Paparazzi to layoutlib Arctic Fox 2020.3.1, providing native support for M1 machines</li> <li>Migrate Paparazzi to layoutlib 4.2, unlocking future Compose support</li> <li>Add support for projects enabling non-transitive resources</li> <li>RenderExtension now visits view hierarchy pre-rendering instead of layering bitmaps post-rendering</li> <li>Fail-fast when Bridge.init fails, usually due to native crash</li> <li>Expose RenderingMode as a configurable option</li> <li>Bump default compileSdk to API 30</li> <li>Improve Java-interoperability experience</li> <li>Kotlin 1.5.31</li> </ul>"},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Don\u2019t require Android plugin to be declared before Paparazzi plugin</li> <li>Clear AnimationHandler leak after each snapshot</li> <li>Don\u2019t generate empty mov files on snapshot failure</li> <li>Add Kotlin platform bom to prevent classpath conflicts during test builds</li> <li>Use correct default Android SDK path on Windows</li> <li>Use platform-agnostic file paths in Gradle artifacts to support remote caching across platforms</li> <li>Use platform-agnostic file paths in Javascript for web page support on Windows</li> <li>Fix font scaling issue in AccessibilityRenderExtension by using bundled font</li> </ul> <p>Kudos to @luis-cortes, @geoff-powell and @TWiStErRob for their contributions this release!</p>"},{"location":"changelog/#080-2021-10-07","title":"0.8.0 - 2021-10-07","text":""},{"location":"changelog/#new_6","title":"New","text":"<ul> <li>Migrate Paparazzi to use native layoutlib for better rendering and API 30 support</li> <li>Add new extension for rendering accessibility metadata</li> <li>Add support for fontScale in DeviceConfig</li> <li>Add device config for Pixel 5</li> <li>Add tasks to Gradle task verification group</li> <li>Migrate publishing to gradle-maven-publish-plugin</li> <li>Migrate builds to Github Actions</li> <li>Migrate sample test from Burst to TestParameterInjector</li> <li>Kotlin 1.5.21</li> <li>[Gradle Plugin] Support for configuration caching</li> <li>[Gradle Plugin] Gradle 7.2</li> </ul>"},{"location":"changelog/#fixed_8","title":"Fixed","text":"<ul> <li>Add method interceptor for matrix multiplication operations</li> <li>Don\u2019t swallow FileNotFoundExceptions when overridden platform dir doesn\u2019t exist</li> <li>[Gradle Plugin] Fix remote caching bug by referencing relative, not absolute, paths in intermediate resources file.</li> </ul>"},{"location":"changelog/#071-2021-05-17","title":"0.7.1 - 2021-05-17","text":""},{"location":"changelog/#new_7","title":"New","text":"<ul> <li>[Gradle Plugin] Support the \u2013tests option for record/verify tasks</li> </ul>"},{"location":"changelog/#fixed_9","title":"Fixed","text":"<ul> <li>[Gradle Plugin] Defer task configuration until created</li> </ul>"},{"location":"changelog/#070-2021-02-26","title":"0.7.0 - 2021-02-26","text":""},{"location":"changelog/#new_8","title":"New","text":"<ul> <li>Kotlin 1.4.30</li> <li>Add support for inline complex XML resources</li> <li>Enable Burst support</li> <li>Expose maximum percentage difference in image verification as a setting</li> <li>Render extension api to add extra information to snapshots</li> <li>Allow selection of night mode in DeviceConfig</li> <li>[Gradle Plugin] Gradle 6.8.3</li> <li>[Gradle Plugin] Creating an umbrella task to execute on all variants</li> </ul>"},{"location":"changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Properly execute Choreographer.doFrame after view has been laid out</li> <li>Fix broken text appearances when style resource names contain periods</li> <li>Fix ability to access asset files</li> <li>Use target-sdk to simulate device when available</li> <li>Always write screenshots to disk in record mode</li> <li>Don\u2019t crash when running on Java 12+</li> <li>[Gradle Plugin] Force test re-runs when a resource or asset has changed</li> <li>[Gradle Plugin] Force test re-runs if generated report or snapshot dirs are deleted</li> </ul>"},{"location":"changelog/#060-2020-10-02","title":"0.6.0 - 2020-10-02","text":"<p>As of this release, consumers must build on Java 11 environments.</p>"},{"location":"changelog/#new_9","title":"New","text":"<ul> <li>Point to a more recent version of layoutlib that runs on Android Q and builds with Java 11.</li> <li>Refactor Paparazzi to better support non-Gradle builds</li> <li>Added device configs for Pixel 4 series</li> </ul>"},{"location":"changelog/#052-2020-09-17","title":"0.5.2 - 2020-09-17","text":""},{"location":"changelog/#fixed_11","title":"Fixed","text":"<ul> <li>[Gradle Plugin] Fixed record and verify tasks in multi-module projects.</li> </ul>"},{"location":"changelog/#051-2020-09-17","title":"0.5.1 - 2020-09-17","text":""},{"location":"changelog/#fixed_12","title":"Fixed","text":"<ul> <li>[Gradle Plugin] Fixed race condition in record and verify tasks.</li> </ul>"},{"location":"changelog/#050-2020-09-16","title":"0.5.0 - 2020-09-16","text":"<ul> <li>Initial release.</li> </ul>"},{"location":"code_of_conduct/","title":"Open Source Code of Conduct","text":"<p>At Square, we are committed to contributing to the open source community and simplifying the process of releasing and managing open source software. We\u2019ve seen incredible support and enthusiasm from thousands of people who have already contributed to our projects\u200a\u2014\u200aand we want to ensure our community continues to be truly open for everyone.</p> <p>This code of conduct outlines our expectations for participants, as well as steps to reporting unacceptable behavior. We are committed to providing a welcoming and inspiring community for all and expect our code of conduct to be honored.</p> <p>Square\u2019s open source community strives to:</p> <ul> <li> <p>Be open: We invite anyone to participate in any aspect of our projects. Our community is    open, and any responsibility can be carried by a contributor who demonstrates the required    capacity and competence.</p> </li> <li> <p>Be considerate: People use our work, and we depend on the work of others. Consider users and    colleagues before taking action. For example, changes to code, infrastructure, policy, and    documentation may negatively impact others.</p> </li> <li> <p>Be respectful: We expect people to work together to resolve conflict, assume good intentions,    and act with empathy. Do not turn disagreements into personal attacks.</p> </li> <li> <p>Be collaborative: Collaboration reduces redundancy and improves the quality of our work. We    strive for transparency within our open source community, and we work closely with upstream    developers and others in the free software community to coordinate our efforts.</p> </li> <li> <p>Be pragmatic: Questions are encouraged and should be asked early in the process to avoid    problems later. Be thoughtful and considerate when seeking out the appropriate forum for your    questions. Those who are asked should be responsive and helpful.</p> </li> <li> <p>Step down considerately: Members of every project come and go. When somebody leaves or    disengages from the project, they should make it known and take the proper steps to ensure that    others can pick up where they left off.</p> </li> </ul> <p>This code is not exhaustive or complete. It serves to distill our common understanding of a collaborative, shared environment, and goals. We expect it to be followed in spirit as much as in the letter.</p>"},{"location":"code_of_conduct/#diversity-statement","title":"Diversity Statement","text":"<p>We encourage everyone to participate and are committed to building a community for all. Although we may not be able to satisfy everyone, we all agree that everyone is equal.</p> <p>Whenever a participant has made a mistake, we expect them to take responsibility for it. If someone has been harmed or offended, it is our responsibility to listen carefully and respectfully, and do our best to right the wrong.</p> <p>Although this list cannot be exhaustive, we explicitly honor diversity in age, culture, ethnicity, gender identity or expression, language, national origin, political beliefs, profession, race, religion, sexual orientation, socioeconomic status, and technical ability. We will not tolerate discrimination based on any of the protected characteristics above, including participants with disabilities.</p>"},{"location":"code_of_conduct/#reporting-issues","title":"Reporting Issues","text":"<p>If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com. For more details, please see our Reporting Guidelines below.</p>"},{"location":"code_of_conduct/#thanks","title":"Thanks","text":"<p>Some of the ideas and wording for the statements and guidelines above were based on work by the Twitter, Ubuntu, GDC, and Django communities. We are thankful for their work.</p>"},{"location":"code_of_conduct/#reporting-guide","title":"Reporting Guide","text":"<p>If you experience or witness unacceptable behavior\u200a\u2014\u200aor have any other concerns\u200a\u2014\u200aplease report it by emailing codeofconduct@squareup.com. All reports will be handled with discretion.</p> <p>In your report please include:</p> <ul> <li>Your contact information.</li> <li>Names (real, nicknames, or pseudonyms) of any individuals involved. If there are additional    witnesses, please include them as well.</li> <li>Your account of what occurred, and if you believe the incident is ongoing. If there is a publicly    available record (e.g. a mailing list archive or a public IRC logger), please include a link.</li> <li>Any additional information that may be helpful.</li> </ul> <p>After filing a report, a representative from the Square Code of Conduct committee will contact you personally. The committee will then review the incident, follow up with any additional questions, and make a decision as to how to respond.</p> <p>Anyone asked to stop unacceptable behavior is expected to comply immediately. If an individual engages in unacceptable behavior, the Square Code of Conduct committee may take any action they deem appropriate, up to and including a permanent ban from all of Square spaces without warning.</p>"},{"location":"1.x/","title":"paparazzi - Paparazzi","text":"<p>//paparazzi</p>"},{"location":"1.x/#paparazzi","title":"paparazzi","text":""},{"location":"1.x/#packages","title":"Packages","text":"Name app.cash.paparazzi app.cash.paparazzi.accessibility app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated app.cash.paparazzi.deprecated.com.android.io app.cash.paparazzi.internal app.cash.paparazzi.internal.interceptors app.cash.paparazzi.internal.parsers app.cash.paparazzi.internal.resources app.cash.paparazzi.internal.resources.base"},{"location":"1.x/paparazzi/app.cash.paparazzi/","title":"Package-level declarations - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi/#types","title":"Types","text":"Name Summary DeviceConfig [jvm]data class DeviceConfig(val screenHeight: Int = 1280, val screenWidth: Int = 768, val xdpi: Int = 320, val ydpi: Int = 320, val orientation: ScreenOrientation = ScreenOrientation.PORTRAIT, val uiMode: UiMode = UiMode.NORMAL, val nightMode: NightMode = NightMode.NOTNIGHT, val density: Density = Density.XHIGH, val fontScale: Float = 1.0f, val layoutDirection: LayoutDirection = LayoutDirection.LTR, val locale: String? = null, val ratio: ScreenRatio = ScreenRatio.NOTLONG, val size: ScreenSize = ScreenSize.NORMAL, val keyboard: Keyboard = Keyboard.NOKEY, val touchScreen: TouchScreen = TouchScreen.FINGER, val keyboardState: KeyboardState = KeyboardState.SOFT, val softButtons: Boolean = true, val navigation: Navigation = Navigation.NONAV, val screenRound: ScreenRound? = null, val released: String = \"November 13, 2012\")Provides FolderConfiguration and HardwareConfig for various devices. Also provides utility methods to parse <code>build.prop</code> and <code>attrs.xml</code> to generate the appropriate maps. Environment [jvm]data class Environment(val platformDir: String, val appTestDir: String, val resDir: String, val assetsDir: String, val packageName: String, val compileSdkVersion: Int, val resourcePackageNames: List&lt;String&gt;, val localResourceDirs: List&lt;String&gt;, val moduleResourceDirs: List&lt;String&gt;, val libraryResourceDirs: List&lt;String&gt;, val allModuleAssetDirs: List&lt;String&gt;, val libraryAssetDirs: List&lt;String&gt;) Flags [jvm]object Flags HtmlReportWriter [jvm]class HtmlReportWriter@JvmOverloadsconstructor(runName: String = defaultRunName(), rootDirectory: File = File(\"${System.getProperty(\"paparazzi.build.dir\", \"build\")}/reports/paparazzi\"), snapshotRootDirectory: File = File(\"src/test/snapshots\")) : SnapshotHandlerCreates an HTML report that avoids writing files that have already been written. InstantAnimationsRule [jvm]class InstantAnimationsRule : TestRuleSets animation duration scale to 0 so all animations run instantly. Use this with Paparazzi to skip animations and snapshot their terminal state. Paparazzi [jvm]class Paparazzi@JvmOverloadsconstructor(environment: Environment = detectEnvironment(), deviceConfig: DeviceConfig = DeviceConfig.NEXUS_5, theme: String = \"android:Theme.Material.NoActionBar.Fullscreen\", renderingMode: SessionParams.RenderingMode = RenderingMode.NORMAL, appCompatEnabled: Boolean = true, maxPercentDifference: Double = 0.1, snapshotHandler: SnapshotHandler = determineHandler(maxPercentDifference), renderExtensions: Set&lt;RenderExtension&gt; = setOf(), supportsRtl: Boolean = false, showSystemUi: Boolean = false, validateAccessibility: Boolean = false, thumbnailScale: ThumbnailScale = ThumbnailScale.ScaleMaxSideTo(DEFAULT_THUMBNAIL_SIZE)) : TestRule RenderExtension [jvm]interface RenderExtensionAn extension for overlaying additional information on top of each rendered frame. Snapshot [jvm]@JsonClass(generateAdapter = true)data class Snapshot(val name: String?, val testName: TestName, val timestamp: Date, val tags: List&lt;String&gt; = listOf(), val file: String? = null) SnapshotHandler [jvm]interface SnapshotHandler : Closeable SnapshotVerifier [jvm]class SnapshotVerifier@JvmOverloadsconstructor(maxPercentDifference: Double, rootDirectory: File = File(\"src/test/snapshots\")) : SnapshotHandler TestName [jvm]data class TestName(val packageName: String, val className: String, val methodName: String) ThumbnailScale [jvm]interface ThumbnailScale"},{"location":"1.x/paparazzi/app.cash.paparazzi/#functions","title":"Functions","text":"Name Summary androidHome [jvm]fun androidHome(): String detectEnvironment [jvm]fun detectEnvironment(): Environment"},{"location":"1.x/paparazzi/app.cash.paparazzi/android-home/","title":"androidHome - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/androidHome</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/android-home/#androidhome","title":"androidHome","text":"<p>[jvm]\\ fun androidHome(): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/detect-environment/","title":"detectEnvironment - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/detectEnvironment</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/detect-environment/#detectenvironment","title":"detectEnvironment","text":"<p>[jvm]\\ fun detectEnvironment(): Environment</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/","title":"DeviceConfig - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/#deviceconfig","title":"DeviceConfig","text":"<p>[jvm]\\ data class DeviceConfig(val screenHeight: Int = 1280, val screenWidth: Int = 768, val xdpi: Int = 320, val ydpi: Int = 320, val orientation: ScreenOrientation = ScreenOrientation.PORTRAIT, val uiMode: UiMode = UiMode.NORMAL, val nightMode: NightMode = NightMode.NOTNIGHT, val density: Density = Density.XHIGH, val fontScale: Float = 1.0f, val layoutDirection: LayoutDirection = LayoutDirection.LTR, val locale: String? = null, val ratio: ScreenRatio = ScreenRatio.NOTLONG, val size: ScreenSize = ScreenSize.NORMAL, val keyboard: Keyboard = Keyboard.NOKEY, val touchScreen: TouchScreen = TouchScreen.FINGER, val keyboardState: KeyboardState = KeyboardState.SOFT, val softButtons: Boolean = true, val navigation: Navigation = Navigation.NONAV, val screenRound: ScreenRound? = null, val released: String = \"November 13, 2012\")</p> <p>Provides FolderConfiguration and HardwareConfig for various devices. Also provides utility methods to parse <code>build.prop</code> and <code>attrs.xml</code> to generate the appropriate maps.</p> <p>Defaults are for a Nexus 4 device.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/#constructors","title":"Constructors","text":"DeviceConfig [jvm]constructor(screenHeight: Int = 1280, screenWidth: Int = 768, xdpi: Int = 320, ydpi: Int = 320, orientation: ScreenOrientation = ScreenOrientation.PORTRAIT, uiMode: UiMode = UiMode.NORMAL, nightMode: NightMode = NightMode.NOTNIGHT, density: Density = Density.XHIGH, fontScale: Float = 1.0f, layoutDirection: LayoutDirection = LayoutDirection.LTR, locale: String? = null, ratio: ScreenRatio = ScreenRatio.NOTLONG, size: ScreenSize = ScreenSize.NORMAL, keyboard: Keyboard = Keyboard.NOKEY, touchScreen: TouchScreen = TouchScreen.FINGER, keyboardState: KeyboardState = KeyboardState.SOFT, softButtons: Boolean = true, navigation: Navigation = Navigation.NONAV, screenRound: ScreenRound? = null, released: String = \"November 13, 2012\")"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/#types","title":"Types","text":"Name Summary Companion [jvm]object CompanionDevice specs per: https://android.googlesource.com/platform/tools/base/+/mirror-goog-studio-master-dev/sdklib/src/main/java/com/android/sdklib/devices/nexus.xml"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/#properties","title":"Properties","text":"Name Summary density [jvm]val density: Density folderConfiguration [jvm]val folderConfiguration: FolderConfiguration fontScale [jvm]val fontScale: Float = 1.0f hardwareConfig [jvm]val hardwareConfig: HardwareConfig keyboard [jvm]val keyboard: Keyboard keyboardState [jvm]val keyboardState: KeyboardState layoutDirection [jvm]val layoutDirection: LayoutDirection locale [jvm]val locale: String? = null navigation [jvm]val navigation: Navigation nightMode [jvm]val nightMode: NightMode orientation [jvm]val orientation: ScreenOrientation ratio [jvm]val ratio: ScreenRatio released [jvm]val released: String screenHeight [jvm]val screenHeight: Int = 1280 screenRound [jvm]val screenRound: ScreenRound? = null screenWidth [jvm]val screenWidth: Int = 768 size [jvm]val size: ScreenSize softButtons [jvm]val softButtons: Boolean = true touchScreen [jvm]val touchScreen: TouchScreen uiMode [jvm]val uiMode: UiMode uiModeMask [jvm]val uiModeMask: Int xdpi [jvm]val xdpi: Int = 320 ydpi [jvm]val ydpi: Int = 320"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-device-config/","title":"DeviceConfig - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-device-config/#deviceconfig","title":"DeviceConfig","text":"<p>[jvm]\\ constructor(screenHeight: Int = 1280, screenWidth: Int = 768, xdpi: Int = 320, ydpi: Int = 320, orientation: ScreenOrientation = ScreenOrientation.PORTRAIT, uiMode: UiMode = UiMode.NORMAL, nightMode: NightMode = NightMode.NOTNIGHT, density: Density = Density.XHIGH, fontScale: Float = 1.0f, layoutDirection: LayoutDirection = LayoutDirection.LTR, locale: String? = null, ratio: ScreenRatio = ScreenRatio.NOTLONG, size: ScreenSize = ScreenSize.NORMAL, keyboard: Keyboard = Keyboard.NOKEY, touchScreen: TouchScreen = TouchScreen.FINGER, keyboardState: KeyboardState = KeyboardState.SOFT, softButtons: Boolean = true, navigation: Navigation = Navigation.NONAV, screenRound: ScreenRound? = null, released: String = \"November 13, 2012\")</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/density/","title":"density - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/density</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/density/#density","title":"density","text":"<p>[jvm]\\ val density: Density</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/folder-configuration/","title":"folderConfiguration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/folderConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/folder-configuration/#folderconfiguration","title":"folderConfiguration","text":"<p>[jvm]\\ val folderConfiguration: FolderConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/font-scale/","title":"fontScale - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/fontScale</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/font-scale/#fontscale","title":"fontScale","text":"<p>[jvm]\\ val fontScale: Float = 1.0f</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/hardware-config/","title":"hardwareConfig - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/hardwareConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/hardware-config/#hardwareconfig","title":"hardwareConfig","text":"<p>[jvm]\\ val hardwareConfig: HardwareConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/keyboard-state/","title":"keyboardState - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/keyboardState</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/keyboard-state/#keyboardstate","title":"keyboardState","text":"<p>[jvm]\\ val keyboardState: KeyboardState</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/keyboard/","title":"keyboard - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/keyboard</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/keyboard/#keyboard","title":"keyboard","text":"<p>[jvm]\\ val keyboard: Keyboard</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/layout-direction/","title":"layoutDirection - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/layoutDirection</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/layout-direction/#layoutdirection","title":"layoutDirection","text":"<p>[jvm]\\ val layoutDirection: LayoutDirection</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/locale/","title":"locale - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/locale</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/locale/#locale","title":"locale","text":"<p>[jvm]\\ val locale: String? = null</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/navigation/","title":"navigation - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/navigation</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/navigation/#navigation","title":"navigation","text":"<p>[jvm]\\ val navigation: Navigation</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/night-mode/","title":"nightMode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/nightMode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/night-mode/#nightmode","title":"nightMode","text":"<p>[jvm]\\ val nightMode: NightMode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/orientation/","title":"orientation - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/orientation</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/orientation/#orientation","title":"orientation","text":"<p>[jvm]\\ val orientation: ScreenOrientation</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ratio/","title":"ratio - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/ratio</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ratio/#ratio","title":"ratio","text":"<p>[jvm]\\ val ratio: ScreenRatio</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/released/","title":"released - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/released</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/released/#released","title":"released","text":"<p>[jvm]\\ val released: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/screen-height/","title":"screenHeight - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/screenHeight</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/screen-height/#screenheight","title":"screenHeight","text":"<p>[jvm]\\ val screenHeight: Int = 1280</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/screen-round/","title":"screenRound - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/screenRound</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/screen-round/#screenround","title":"screenRound","text":"<p>[jvm]\\ val screenRound: ScreenRound? = null</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/screen-width/","title":"screenWidth - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/screenWidth</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/screen-width/#screenwidth","title":"screenWidth","text":"<p>[jvm]\\ val screenWidth: Int = 768</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/size/","title":"size - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/size</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/size/#size","title":"size","text":"<p>[jvm]\\ val size: ScreenSize</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/soft-buttons/","title":"softButtons - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/softButtons</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/soft-buttons/#softbuttons","title":"softButtons","text":"<p>[jvm]\\ val softButtons: Boolean = true</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/touch-screen/","title":"touchScreen - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/touchScreen</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/touch-screen/#touchscreen","title":"touchScreen","text":"<p>[jvm]\\ val touchScreen: TouchScreen</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ui-mode-mask/","title":"uiModeMask - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/uiModeMask</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ui-mode-mask/#uimodemask","title":"uiModeMask","text":"<p>[jvm]\\ val uiModeMask: Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ui-mode/","title":"uiMode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/uiMode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ui-mode/#uimode","title":"uiMode","text":"<p>[jvm]\\ val uiMode: UiMode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/xdpi/","title":"xdpi - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/xdpi</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/xdpi/#xdpi","title":"xdpi","text":"<p>[jvm]\\ val xdpi: Int = 320</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ydpi/","title":"ydpi - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/ydpi</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/ydpi/#ydpi","title":"ydpi","text":"<p>[jvm]\\ val ydpi: Int = 320</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p> <p>Device specs per: https://android.googlesource.com/platform/tools/base/+/mirror-goog-studio-master-dev/sdklib/src/main/java/com/android/sdklib/devices/nexus.xml</p> <p>Release dates obtained from Wikipedia.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/#properties","title":"Properties","text":"Name Summary GALAXY_WATCH4_CLASSIC_LARGE [jvm]val GALAXY_WATCH4_CLASSIC_LARGE: DeviceConfig NEXUS_10 [jvm]@JvmFieldval NEXUS_10: DeviceConfig NEXUS_4 [jvm]@JvmFieldval NEXUS_4: DeviceConfig NEXUS_5 [jvm]@JvmFieldval NEXUS_5: DeviceConfig NEXUS_5_LAND [jvm]@JvmFieldval NEXUS_5_LAND: DeviceConfig NEXUS_7 [jvm]@JvmFieldval NEXUS_7: DeviceConfig NEXUS_7_2012 [jvm]@JvmFieldval NEXUS_7_2012: DeviceConfig PIXEL [jvm]@JvmFieldval PIXEL: DeviceConfig PIXEL_2 [jvm]@JvmFieldval PIXEL_2: DeviceConfig PIXEL_2_XL [jvm]@JvmFieldval PIXEL_2_XL: DeviceConfig PIXEL_3 [jvm]@JvmFieldval PIXEL_3: DeviceConfig PIXEL_3_XL [jvm]@JvmFieldval PIXEL_3_XL: DeviceConfig PIXEL_3A [jvm]@JvmFieldval PIXEL_3A: DeviceConfig PIXEL_3A_XL [jvm]@JvmFieldval PIXEL_3A_XL: DeviceConfig PIXEL_4 [jvm]@JvmFieldval PIXEL_4: DeviceConfig PIXEL_4_XL [jvm]@JvmFieldval PIXEL_4_XL: DeviceConfig PIXEL_4A [jvm]@JvmFieldval PIXEL_4A: DeviceConfig PIXEL_5 [jvm]@JvmFieldval PIXEL_5: DeviceConfig PIXEL_6 [jvm]@JvmFieldval PIXEL_6: DeviceConfig PIXEL_6_PRO [jvm]@JvmFieldval PIXEL_6_PRO: DeviceConfig PIXEL_C [jvm]@JvmFieldval PIXEL_C: DeviceConfig PIXEL_XL [jvm]@JvmFieldval PIXEL_XL: DeviceConfig WEAR_OS_SMALL_ROUND [jvm]@JvmFieldval WEAR_OS_SMALL_ROUND: DeviceConfig WEAR_OS_SQUARE [jvm]@JvmFieldval WEAR_OS_SQUARE: DeviceConfig"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/#functions","title":"Functions","text":"Name Summary getEnumMap [jvm]fun getEnumMap(path: File): Map&lt;String, Map&lt;String, Int&gt;&gt; loadProperties [jvm]fun loadProperties(path: File): Map&lt;String, String&gt;"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-g-a-l-a-x-y_-w-a-t-c-h4_-c-l-a-s-s-i-c_-l-a-r-g-e/","title":"GALAXY_WATCH4_CLASSIC_LARGE - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/GALAXY_WATCH4_CLASSIC_LARGE</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-g-a-l-a-x-y_-w-a-t-c-h4_-c-l-a-s-s-i-c_-l-a-r-g-e/#galaxy_watch4_classic_large","title":"GALAXY_WATCH4_CLASSIC_LARGE","text":"<p>[jvm]\\ val GALAXY_WATCH4_CLASSIC_LARGE: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_10/","title":"NEXUS_10 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/NEXUS_10</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_10/#nexus_10","title":"NEXUS_10","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val NEXUS_10: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_4/","title":"NEXUS_4 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/NEXUS_4</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_4/#nexus_4","title":"NEXUS_4","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val NEXUS_4: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_5/","title":"NEXUS_5 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/NEXUS_5</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_5/#nexus_5","title":"NEXUS_5","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val NEXUS_5: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_5_-l-a-n-d/","title":"NEXUS_5_LAND - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/NEXUS_5_LAND</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_5_-l-a-n-d/#nexus_5_land","title":"NEXUS_5_LAND","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val NEXUS_5_LAND: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_7/","title":"NEXUS_7 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/NEXUS_7</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_7/#nexus_7","title":"NEXUS_7","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val NEXUS_7: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_7_2012/","title":"NEXUS_7_2012 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/NEXUS_7_2012</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-n-e-x-u-s_7_2012/#nexus_7_2012","title":"NEXUS_7_2012","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val NEXUS_7_2012: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l/","title":"PIXEL - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l/#pixel","title":"PIXEL","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_-c/","title":"PIXEL_C - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_C</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_-c/#pixel_c","title":"PIXEL_C","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_C: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_-x-l/","title":"PIXEL_XL - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_XL</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_-x-l/#pixel_xl","title":"PIXEL_XL","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_XL: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_2/","title":"PIXEL_2 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_2</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_2/#pixel_2","title":"PIXEL_2","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_2: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_2_-x-l/","title":"PIXEL_2_XL - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_2_XL</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_2_-x-l/#pixel_2_xl","title":"PIXEL_2_XL","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_2_XL: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3-a/","title":"PIXEL_3A - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_3A</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3-a/#pixel_3a","title":"PIXEL_3A","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_3A: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3-a_-x-l/","title":"PIXEL_3A_XL - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_3A_XL</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3-a_-x-l/#pixel_3a_xl","title":"PIXEL_3A_XL","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_3A_XL: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3/","title":"PIXEL_3 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_3</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3/#pixel_3","title":"PIXEL_3","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_3: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3_-x-l/","title":"PIXEL_3_XL - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_3_XL</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_3_-x-l/#pixel_3_xl","title":"PIXEL_3_XL","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_3_XL: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4-a/","title":"PIXEL_4A - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_4A</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4-a/#pixel_4a","title":"PIXEL_4A","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_4A: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4/","title":"PIXEL_4 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_4</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4/#pixel_4","title":"PIXEL_4","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_4: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4_-x-l/","title":"PIXEL_4_XL - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_4_XL</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_4_-x-l/#pixel_4_xl","title":"PIXEL_4_XL","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_4_XL: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_5/","title":"PIXEL_5 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_5</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_5/#pixel_5","title":"PIXEL_5","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_5: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_6/","title":"PIXEL_6 - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_6</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_6/#pixel_6","title":"PIXEL_6","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_6: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_6_-p-r-o/","title":"PIXEL_6_PRO - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/PIXEL_6_PRO</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-p-i-x-e-l_6_-p-r-o/#pixel_6_pro","title":"PIXEL_6_PRO","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val PIXEL_6_PRO: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-w-e-a-r_-o-s_-s-m-a-l-l_-r-o-u-n-d/","title":"WEAR_OS_SMALL_ROUND - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/WEAR_OS_SMALL_ROUND</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-w-e-a-r_-o-s_-s-m-a-l-l_-r-o-u-n-d/#wear_os_small_round","title":"WEAR_OS_SMALL_ROUND","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val WEAR_OS_SMALL_ROUND: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-w-e-a-r_-o-s_-s-q-u-a-r-e/","title":"WEAR_OS_SQUARE - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/WEAR_OS_SQUARE</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/-w-e-a-r_-o-s_-s-q-u-a-r-e/#wear_os_square","title":"WEAR_OS_SQUARE","text":"<p>[jvm]\\</p> <p>@JvmField</p> <p>val WEAR_OS_SQUARE: DeviceConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/get-enum-map/","title":"getEnumMap - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/getEnumMap</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/get-enum-map/#getenummap","title":"getEnumMap","text":"<p>[jvm]\\ fun getEnumMap(path: File): Map&lt;String, Map&lt;String, Int&gt;&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/load-properties/","title":"loadProperties - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/DeviceConfig/Companion/loadProperties</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-device-config/-companion/load-properties/#loadproperties","title":"loadProperties","text":"<p>[jvm]\\ fun loadProperties(path: File): Map&lt;String, String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/","title":"Environment - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/#environment","title":"Environment","text":"<p>[jvm]\\ data class Environment(val platformDir: String, val appTestDir: String, val resDir: String, val assetsDir: String, val packageName: String, val compileSdkVersion: Int, val resourcePackageNames: List&lt;String&gt;, val localResourceDirs: List&lt;String&gt;, val moduleResourceDirs: List&lt;String&gt;, val libraryResourceDirs: List&lt;String&gt;, val allModuleAssetDirs: List&lt;String&gt;, val libraryAssetDirs: List&lt;String&gt;)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/#constructors","title":"Constructors","text":"Environment [jvm]constructor(platformDir: String, appTestDir: String, resDir: String, assetsDir: String, packageName: String, compileSdkVersion: Int, resourcePackageNames: List&lt;String&gt;, localResourceDirs: List&lt;String&gt;, moduleResourceDirs: List&lt;String&gt;, libraryResourceDirs: List&lt;String&gt;, allModuleAssetDirs: List&lt;String&gt;, libraryAssetDirs: List&lt;String&gt;)"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/#properties","title":"Properties","text":"Name Summary allModuleAssetDirs [jvm]val allModuleAssetDirs: List&lt;String&gt; appTestDir [jvm]val appTestDir: String assetsDir [jvm]val assetsDir: String compileSdkVersion [jvm]val compileSdkVersion: Int libraryAssetDirs [jvm]val libraryAssetDirs: List&lt;String&gt; libraryResourceDirs [jvm]val libraryResourceDirs: List&lt;String&gt; localResourceDirs [jvm]val localResourceDirs: List&lt;String&gt; moduleResourceDirs [jvm]val moduleResourceDirs: List&lt;String&gt; packageName [jvm]val packageName: String platformDir [jvm]val platformDir: String resDir [jvm]val resDir: String resourcePackageNames [jvm]val resourcePackageNames: List&lt;String&gt;"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/-environment/","title":"Environment - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/Environment</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/-environment/#environment","title":"Environment","text":"<p>[jvm]\\ constructor(platformDir: String, appTestDir: String, resDir: String, assetsDir: String, packageName: String, compileSdkVersion: Int, resourcePackageNames: List&lt;String&gt;, localResourceDirs: List&lt;String&gt;, moduleResourceDirs: List&lt;String&gt;, libraryResourceDirs: List&lt;String&gt;, allModuleAssetDirs: List&lt;String&gt;, libraryAssetDirs: List&lt;String&gt;)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/all-module-asset-dirs/","title":"allModuleAssetDirs - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/allModuleAssetDirs</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/all-module-asset-dirs/#allmoduleassetdirs","title":"allModuleAssetDirs","text":"<p>[jvm]\\ val allModuleAssetDirs: List&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/app-test-dir/","title":"appTestDir - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/appTestDir</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/app-test-dir/#apptestdir","title":"appTestDir","text":"<p>[jvm]\\ val appTestDir: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/assets-dir/","title":"assetsDir - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/assetsDir</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/assets-dir/#assetsdir","title":"assetsDir","text":"<p>[jvm]\\ val assetsDir: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/compile-sdk-version/","title":"compileSdkVersion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/compileSdkVersion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/compile-sdk-version/#compilesdkversion","title":"compileSdkVersion","text":"<p>[jvm]\\ val compileSdkVersion: Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/library-asset-dirs/","title":"libraryAssetDirs - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/libraryAssetDirs</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/library-asset-dirs/#libraryassetdirs","title":"libraryAssetDirs","text":"<p>[jvm]\\ val libraryAssetDirs: List&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/library-resource-dirs/","title":"libraryResourceDirs - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/libraryResourceDirs</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/library-resource-dirs/#libraryresourcedirs","title":"libraryResourceDirs","text":"<p>[jvm]\\ val libraryResourceDirs: List&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/local-resource-dirs/","title":"localResourceDirs - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/localResourceDirs</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/local-resource-dirs/#localresourcedirs","title":"localResourceDirs","text":"<p>[jvm]\\ val localResourceDirs: List&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/module-resource-dirs/","title":"moduleResourceDirs - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/moduleResourceDirs</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/module-resource-dirs/#moduleresourcedirs","title":"moduleResourceDirs","text":"<p>[jvm]\\ val moduleResourceDirs: List&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/package-name/","title":"packageName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/packageName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/package-name/#packagename","title":"packageName","text":"<p>[jvm]\\ val packageName: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/platform-dir/","title":"platformDir - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/platformDir</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/platform-dir/#platformdir","title":"platformDir","text":"<p>[jvm]\\ val platformDir: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/res-dir/","title":"resDir - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/resDir</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/res-dir/#resdir","title":"resDir","text":"<p>[jvm]\\ val resDir: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/resource-package-names/","title":"resourcePackageNames - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Environment/resourcePackageNames</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-environment/resource-package-names/#resourcepackagenames","title":"resourcePackageNames","text":"<p>[jvm]\\ val resourcePackageNames: List&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-flags/","title":"Flags - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Flags</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-flags/#flags","title":"Flags","text":"<p>[jvm]\\ object Flags</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-flags/#properties","title":"Properties","text":"Name Summary DEBUG_LINKED_OBJECTS [jvm]const val DEBUG_LINKED_OBJECTS: String LEGACY_ASSET_LOADING [jvm]const val LEGACY_ASSET_LOADING: String LEGACY_RESOURCE_LOADING [jvm]const val LEGACY_RESOURCE_LOADING: String"},{"location":"1.x/paparazzi/app.cash.paparazzi/-flags/-d-e-b-u-g_-l-i-n-k-e-d_-o-b-j-e-c-t-s/","title":"DEBUG_LINKED_OBJECTS - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Flags/DEBUG_LINKED_OBJECTS</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-flags/-d-e-b-u-g_-l-i-n-k-e-d_-o-b-j-e-c-t-s/#debug_linked_objects","title":"DEBUG_LINKED_OBJECTS","text":"<p>[jvm]\\ const val DEBUG_LINKED_OBJECTS: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-flags/-l-e-g-a-c-y_-a-s-s-e-t_-l-o-a-d-i-n-g/","title":"LEGACY_ASSET_LOADING - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Flags/LEGACY_ASSET_LOADING</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-flags/-l-e-g-a-c-y_-a-s-s-e-t_-l-o-a-d-i-n-g/#legacy_asset_loading","title":"LEGACY_ASSET_LOADING","text":"<p>[jvm]\\ const val LEGACY_ASSET_LOADING: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-flags/-l-e-g-a-c-y_-r-e-s-o-u-r-c-e_-l-o-a-d-i-n-g/","title":"LEGACY_RESOURCE_LOADING - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Flags/LEGACY_RESOURCE_LOADING</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-flags/-l-e-g-a-c-y_-r-e-s-o-u-r-c-e_-l-o-a-d-i-n-g/#legacy_resource_loading","title":"LEGACY_RESOURCE_LOADING","text":"<p>[jvm]\\ const val LEGACY_RESOURCE_LOADING: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/","title":"HtmlReportWriter - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/HtmlReportWriter</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/#htmlreportwriter","title":"HtmlReportWriter","text":"<p>[jvm]\\ class HtmlReportWriter@JvmOverloadsconstructor(runName: String = defaultRunName(), rootDirectory: File = File(\"${System.getProperty(\"paparazzi.build.dir\", \"build\")}/reports/paparazzi\"), snapshotRootDirectory: File = File(\"src/test/snapshots\")) : SnapshotHandler</p> <p>Creates an HTML report that avoids writing files that have already been written.</p> <p>Images and videos are named by hashes of their contents. Paparazzi won\u2019t write two images or videos with the same contents. Note that the images/ directory includes the individual frames of each video.</p> <p>Runs are named by their date.</p> <pre><code>images\n088c60580f06efa95c37fd8e754074729ee74a06.png\n93f9a81cb594280f4b3898d90dfad8c8ea969b01.png\n22d37abd0841ba2a8d0bd635954baf7cbfaa269b.png\na4769e43cc5901ef28c0d46c46a44ea6429cbccc.png\nvideos\nd1cddc5da2224053f2af51f4e69a76de4e61fc41.mov\nruns\n20190626002322_b9854e.js\n20190626002345_b1e882.js\nindex.html\nindex.js\npaparazzi.js\n</code></pre>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/#constructors","title":"Constructors","text":"HtmlReportWriter [jvm]@JvmOverloadsconstructor(runName: String = defaultRunName(), rootDirectory: File = File(\"${System.getProperty(\"paparazzi.build.dir\", \"build\")}/reports/paparazzi\"), snapshotRootDirectory: File = File(\"src/test/snapshots\"))"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/#functions","title":"Functions","text":"Name Summary close [jvm]open override fun close()Release all resources and block until everything has been written to the file system. newFrameHandler [jvm]open override fun newFrameHandler(snapshot: Snapshot, frameCount: Int, fps: Int): SnapshotHandler.FrameHandler"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/-html-report-writer/","title":"HtmlReportWriter - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/HtmlReportWriter/HtmlReportWriter</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/-html-report-writer/#htmlreportwriter","title":"HtmlReportWriter","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>constructor(runName: String = defaultRunName(), rootDirectory: File = File(\"${System.getProperty(\"paparazzi.build.dir\", \"build\")}/reports/paparazzi\"), snapshotRootDirectory: File = File(\"src/test/snapshots\"))</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/close/","title":"close - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/HtmlReportWriter/close</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/close/#close","title":"close","text":"<p>[jvm]\\ open override fun close()</p> <p>Release all resources and block until everything has been written to the file system.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/new-frame-handler/","title":"newFrameHandler - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/HtmlReportWriter/newFrameHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-html-report-writer/new-frame-handler/#newframehandler","title":"newFrameHandler","text":"<p>[jvm]\\ open override fun newFrameHandler(snapshot: Snapshot, frameCount: Int, fps: Int): SnapshotHandler.FrameHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/","title":"InstantAnimationsRule - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/InstantAnimationsRule</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/#instantanimationsrule","title":"InstantAnimationsRule","text":"<p>[jvm]\\ class InstantAnimationsRule : TestRule</p> <p>Sets animation duration scale to 0 so all animations run instantly. Use this with Paparazzi to skip animations and snapshot their terminal state.</p> <p>Note that animation side effects are still performed, including calls like AnimatorListener.onAnimationEnd. This way views from fade-ins and moves are rendered as they do when the animations complete.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/#constructors","title":"Constructors","text":"InstantAnimationsRule [jvm]constructor()"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/#functions","title":"Functions","text":"Name Summary apply [jvm]open override fun apply(base: Statement, description: Description): Statement"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/-instant-animations-rule/","title":"InstantAnimationsRule - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/InstantAnimationsRule/InstantAnimationsRule</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/-instant-animations-rule/#instantanimationsrule","title":"InstantAnimationsRule","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/apply/","title":"apply - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/InstantAnimationsRule/apply</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-instant-animations-rule/apply/#apply","title":"apply","text":"<p>[jvm]\\ open override fun apply(base: Statement, description: Description): Statement</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/","title":"Paparazzi - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/#paparazzi","title":"Paparazzi","text":"<p>[jvm]\\ class Paparazzi@JvmOverloadsconstructor(environment: Environment = detectEnvironment(), deviceConfig: DeviceConfig = DeviceConfig.NEXUS_5, theme: String = \"android:Theme.Material.NoActionBar.Fullscreen\", renderingMode: SessionParams.RenderingMode = RenderingMode.NORMAL, appCompatEnabled: Boolean = true, maxPercentDifference: Double = 0.1, snapshotHandler: SnapshotHandler = determineHandler(maxPercentDifference), renderExtensions: Set&lt;RenderExtension&gt; = setOf(), supportsRtl: Boolean = false, showSystemUi: Boolean = false, validateAccessibility: Boolean = false, thumbnailScale: ThumbnailScale = ThumbnailScale.ScaleMaxSideTo(DEFAULT_THUMBNAIL_SIZE)) : TestRule</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/#constructors","title":"Constructors","text":"Paparazzi [jvm]@JvmOverloadsconstructor(environment: Environment = detectEnvironment(), deviceConfig: DeviceConfig = DeviceConfig.NEXUS_5, theme: String = \"android:Theme.Material.NoActionBar.Fullscreen\", renderingMode: SessionParams.RenderingMode = RenderingMode.NORMAL, appCompatEnabled: Boolean = true, maxPercentDifference: Double = 0.1, snapshotHandler: SnapshotHandler = determineHandler(maxPercentDifference), renderExtensions: Set&lt;RenderExtension&gt; = setOf(), supportsRtl: Boolean = false, showSystemUi: Boolean = false, validateAccessibility: Boolean = false, thumbnailScale: ThumbnailScale = ThumbnailScale.ScaleMaxSideTo(DEFAULT_THUMBNAIL_SIZE))"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/#properties","title":"Properties","text":"Name Summary context [jvm]val context: Context layoutInflater [jvm]val layoutInflater: LayoutInflater resources [jvm]val resources: Resources"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/#functions","title":"Functions","text":"Name Summary apply [jvm]open override fun apply(base: Statement, description: Description): Statement close [jvm]fun close() gif [jvm]@JvmOverloadsfun gif(view: View, name: String? = null, start: Long = 0, end: Long = 500, fps: Int = 30) inflate [jvm]fun &lt;V : View&gt; inflate(@LayoutReslayoutId: Int): V prepare [jvm]fun prepare(description: Description) snapshot [jvm]fun snapshot(name: String? = null, composable: @Composable() -&gt; Unit)@JvmOverloadsfun snapshot(view: View, name: String? = null, offsetMillis: Long = 0) unsafeUpdateConfig [jvm]fun unsafeUpdateConfig(deviceConfig: DeviceConfig? = null, theme: String? = null, renderingMode: SessionParams.RenderingMode? = null)"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/-paparazzi/","title":"Paparazzi - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/Paparazzi</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/-paparazzi/#paparazzi","title":"Paparazzi","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>constructor(environment: Environment = detectEnvironment(), deviceConfig: DeviceConfig = DeviceConfig.NEXUS_5, theme: String = \"android:Theme.Material.NoActionBar.Fullscreen\", renderingMode: SessionParams.RenderingMode = RenderingMode.NORMAL, appCompatEnabled: Boolean = true, maxPercentDifference: Double = 0.1, snapshotHandler: SnapshotHandler = determineHandler(maxPercentDifference), renderExtensions: Set&lt;RenderExtension&gt; = setOf(), supportsRtl: Boolean = false, showSystemUi: Boolean = false, validateAccessibility: Boolean = false, thumbnailScale: ThumbnailScale = ThumbnailScale.ScaleMaxSideTo(DEFAULT_THUMBNAIL_SIZE))</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/apply/","title":"apply - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/apply</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/apply/#apply","title":"apply","text":"<p>[jvm]\\ open override fun apply(base: Statement, description: Description): Statement</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/close/","title":"close - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/close</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/close/#close","title":"close","text":"<p>[jvm]\\ fun close()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/context/","title":"context - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/context</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/context/#context","title":"context","text":"<p>[jvm]\\ val context: Context</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/gif/","title":"gif - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/gif</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/gif/#gif","title":"gif","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>fun gif(view: View, name: String? = null, start: Long = 0, end: Long = 500, fps: Int = 30)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/inflate/","title":"inflate - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/inflate</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/inflate/#inflate","title":"inflate","text":"<p>[jvm]\\ fun &lt;V : View&gt; inflate(@LayoutReslayoutId: Int): V</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/layout-inflater/","title":"layoutInflater - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/layoutInflater</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/layout-inflater/#layoutinflater","title":"layoutInflater","text":"<p>[jvm]\\ val layoutInflater: LayoutInflater</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/prepare/","title":"prepare - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/prepare</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/prepare/#prepare","title":"prepare","text":"<p>[jvm]\\ fun prepare(description: Description)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/resources/","title":"resources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/resources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/resources/#resources","title":"resources","text":"<p>[jvm]\\ val resources: Resources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/snapshot/","title":"snapshot - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/snapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/snapshot/#snapshot","title":"snapshot","text":"<p>[jvm]\\ fun snapshot(name: String? = null, composable: @Composable() -&gt; Unit)</p> <p>@JvmOverloads</p> <p>fun snapshot(view: View, name: String? = null, offsetMillis: Long = 0)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/unsafe-update-config/","title":"unsafeUpdateConfig - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/unsafeUpdateConfig</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/unsafe-update-config/#unsafeupdateconfig","title":"unsafeUpdateConfig","text":"<p>[jvm]\\ fun unsafeUpdateConfig(deviceConfig: DeviceConfig? = null, theme: String? = null, renderingMode: SessionParams.RenderingMode? = null)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Paparazzi/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-paparazzi/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-render-extension/","title":"RenderExtension - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/RenderExtension</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-render-extension/#renderextension","title":"RenderExtension","text":"<p>interface RenderExtension</p> <p>An extension for overlaying additional information on top of each rendered frame.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-render-extension/#inheritors","title":"Inheritors","text":"AccessibilityRenderExtension"},{"location":"1.x/paparazzi/app.cash.paparazzi/-render-extension/#functions","title":"Functions","text":"Name Summary renderView [jvm]abstract fun renderView(contentView: View): ViewAllows this extension to modify the view hierarchy represented by contentView."},{"location":"1.x/paparazzi/app.cash.paparazzi/-render-extension/render-view/","title":"renderView - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/RenderExtension/renderView</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-render-extension/render-view/#renderview","title":"renderView","text":"<p>[jvm]\\ abstract fun renderView(contentView: View): View</p> <p>Allows this extension to modify the view hierarchy represented by contentView.</p> <p>Returns the root view of the modified hierarchy.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/","title":"Snapshot - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/#snapshot","title":"Snapshot","text":"<p>[jvm]\\ @JsonClass(generateAdapter = true)</p> <p>data class Snapshot(val name: String?, val testName: TestName, val timestamp: Date, val tags: List&lt;String&gt; = listOf(), val file: String? = null)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/#constructors","title":"Constructors","text":"Snapshot [jvm]constructor(name: String?, testName: TestName, timestamp: Date, tags: List&lt;String&gt; = listOf(), file: String? = null)"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/#properties","title":"Properties","text":"Name Summary file [jvm]val file: String? = null name [jvm]val name: String? tags [jvm]val tags: List&lt;String&gt; testName [jvm]val testName: TestName timestamp [jvm]val timestamp: Date"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/-snapshot/","title":"Snapshot - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot/Snapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/-snapshot/#snapshot","title":"Snapshot","text":"<p>[jvm]\\ constructor(name: String?, testName: TestName, timestamp: Date, tags: List&lt;String&gt; = listOf(), file: String? = null)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/file/","title":"file - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot/file</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/file/#file","title":"file","text":"<p>[jvm]\\ val file: String? = null</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/name/","title":"name - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot/name</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/name/#name","title":"name","text":"<p>[jvm]\\ val name: String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/tags/","title":"tags - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot/tags</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/tags/#tags","title":"tags","text":"<p>[jvm]\\ val tags: List&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/test-name/","title":"testName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot/testName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/test-name/#testname","title":"testName","text":"<p>[jvm]\\ val testName: TestName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/timestamp/","title":"timestamp - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/Snapshot/timestamp</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot/timestamp/#timestamp","title":"timestamp","text":"<p>[jvm]\\ val timestamp: Date</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/","title":"SnapshotHandler - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/#snapshothandler","title":"SnapshotHandler","text":"<p>interface SnapshotHandler : Closeable</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/#inheritors","title":"Inheritors","text":"HtmlReportWriter SnapshotVerifier"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/#types","title":"Types","text":"Name Summary FrameHandler [jvm]interface FrameHandler : Closeable"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/#functions","title":"Functions","text":"Name Summary close [jvm]abstract override fun close() newFrameHandler [jvm]abstract fun newFrameHandler(snapshot: Snapshot, frameCount: Int, fps: Int): SnapshotHandler.FrameHandler"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/new-frame-handler/","title":"newFrameHandler - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotHandler/newFrameHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/new-frame-handler/#newframehandler","title":"newFrameHandler","text":"<p>[jvm]\\ abstract fun newFrameHandler(snapshot: Snapshot, frameCount: Int, fps: Int): SnapshotHandler.FrameHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/","title":"FrameHandler - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotHandler/FrameHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/#framehandler","title":"FrameHandler","text":"<p>[jvm]\\ interface FrameHandler : Closeable</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/#functions","title":"Functions","text":"Name Summary close [jvm]abstract override fun close() handle [jvm]abstract fun handle(image: BufferedImage)"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/handle/","title":"handle - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotHandler/FrameHandler/handle</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-handler/-frame-handler/handle/#handle","title":"handle","text":"<p>[jvm]\\ abstract fun handle(image: BufferedImage)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/","title":"SnapshotVerifier - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotVerifier</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/#snapshotverifier","title":"SnapshotVerifier","text":"<p>[jvm]\\ class SnapshotVerifier@JvmOverloadsconstructor(maxPercentDifference: Double, rootDirectory: File = File(\"src/test/snapshots\")) : SnapshotHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/#constructors","title":"Constructors","text":"SnapshotVerifier [jvm]@JvmOverloadsconstructor(maxPercentDifference: Double, rootDirectory: File = File(\"src/test/snapshots\"))"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/#functions","title":"Functions","text":"Name Summary close [jvm]open override fun close() newFrameHandler [jvm]open override fun newFrameHandler(snapshot: Snapshot, frameCount: Int, fps: Int): SnapshotHandler.FrameHandler"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/-snapshot-verifier/","title":"SnapshotVerifier - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotVerifier/SnapshotVerifier</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/-snapshot-verifier/#snapshotverifier","title":"SnapshotVerifier","text":"<p>[jvm]\\</p> <p>@JvmOverloads</p> <p>constructor(maxPercentDifference: Double, rootDirectory: File = File(\"src/test/snapshots\"))</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/close/","title":"close - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotVerifier/close</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/close/#close","title":"close","text":"<p>[jvm]\\ open override fun close()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/new-frame-handler/","title":"newFrameHandler - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/SnapshotVerifier/newFrameHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-snapshot-verifier/new-frame-handler/#newframehandler","title":"newFrameHandler","text":"<p>[jvm]\\ open override fun newFrameHandler(snapshot: Snapshot, frameCount: Int, fps: Int): SnapshotHandler.FrameHandler</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/","title":"TestName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/TestName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/#testname","title":"TestName","text":"<p>[jvm]\\ data class TestName(val packageName: String, val className: String, val methodName: String)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/#constructors","title":"Constructors","text":"TestName [jvm]constructor(packageName: String, className: String, methodName: String)"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/#properties","title":"Properties","text":"Name Summary className [jvm]val className: String methodName [jvm]val methodName: String packageName [jvm]val packageName: String"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/-test-name/","title":"TestName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/TestName/TestName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/-test-name/#testname","title":"TestName","text":"<p>[jvm]\\ constructor(packageName: String, className: String, methodName: String)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/class-name/","title":"className - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/TestName/className</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/class-name/#classname","title":"className","text":"<p>[jvm]\\ val className: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/method-name/","title":"methodName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/TestName/methodName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/method-name/#methodname","title":"methodName","text":"<p>[jvm]\\ val methodName: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/package-name/","title":"packageName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/TestName/packageName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-test-name/package-name/#packagename","title":"packageName","text":"<p>[jvm]\\ val packageName: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-thumbnail-scale/","title":"ThumbnailScale - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/ThumbnailScale</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-thumbnail-scale/#thumbnailscale","title":"ThumbnailScale","text":"<p>interface ThumbnailScale</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-thumbnail-scale/#inheritors","title":"Inheritors","text":"NoScale ScaleMaxSideTo"},{"location":"1.x/paparazzi/app.cash.paparazzi/-thumbnail-scale/#types","title":"Types","text":"Name Summary NoScale [jvm]object NoScale : ThumbnailScaleThumbnails should not be scaled ScaleMaxSideTo [jvm]data class ScaleMaxSideTo(val size: Int) : ThumbnailScaleScale thumbnail to have max side less or equal to size"},{"location":"1.x/paparazzi/app.cash.paparazzi/-thumbnail-scale/-no-scale/","title":"NoScale - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/ThumbnailScale/NoScale</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-thumbnail-scale/-no-scale/#noscale","title":"NoScale","text":"<p>[jvm]\\ object NoScale : ThumbnailScale</p> <p>Thumbnails should not be scaled</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-thumbnail-scale/-scale-max-side-to/","title":"ScaleMaxSideTo - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/ThumbnailScale/ScaleMaxSideTo</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-thumbnail-scale/-scale-max-side-to/#scalemaxsideto","title":"ScaleMaxSideTo","text":"<p>[jvm]\\ data class ScaleMaxSideTo(val size: Int) : ThumbnailScale</p> <p>Scale thumbnail to have max side less or equal to size</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-thumbnail-scale/-scale-max-side-to/#constructors","title":"Constructors","text":"ScaleMaxSideTo [jvm]constructor(size: Int)"},{"location":"1.x/paparazzi/app.cash.paparazzi/-thumbnail-scale/-scale-max-side-to/#properties","title":"Properties","text":"Name Summary size [jvm]val size: Int"},{"location":"1.x/paparazzi/app.cash.paparazzi/-thumbnail-scale/-scale-max-side-to/-scale-max-side-to/","title":"ScaleMaxSideTo - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/ThumbnailScale/ScaleMaxSideTo/ScaleMaxSideTo</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-thumbnail-scale/-scale-max-side-to/-scale-max-side-to/#scalemaxsideto","title":"ScaleMaxSideTo","text":"<p>[jvm]\\ constructor(size: Int)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-thumbnail-scale/-scale-max-side-to/size/","title":"size - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi/ThumbnailScale/ScaleMaxSideTo/size</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi/-thumbnail-scale/-scale-max-side-to/size/#size","title":"size","text":"<p>[jvm]\\ val size: Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/","title":"Package-level declarations - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.accessibility</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/#types","title":"Types","text":"Name Summary AccessibilityRenderExtension [jvm]class AccessibilityRenderExtension : RenderExtension"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/","title":"AccessibilityRenderExtension - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.accessibility/AccessibilityRenderExtension</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/#accessibilityrenderextension","title":"AccessibilityRenderExtension","text":"<p>[jvm]\\ class AccessibilityRenderExtension : RenderExtension</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/#constructors","title":"Constructors","text":"AccessibilityRenderExtension [jvm]constructor()"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/#functions","title":"Functions","text":"Name Summary renderView [jvm]open override fun renderView(contentView: View): ViewAllows this extension to modify the view hierarchy represented by contentView."},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/-accessibility-render-extension/","title":"AccessibilityRenderExtension - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.accessibility/AccessibilityRenderExtension/AccessibilityRenderExtension</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/-accessibility-render-extension/#accessibilityrenderextension","title":"AccessibilityRenderExtension","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/render-view/","title":"renderView - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.accessibility/AccessibilityRenderExtension/renderView</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.accessibility/-accessibility-render-extension/render-view/#renderview","title":"renderView","text":"<p>[jvm]\\ open override fun renderView(contentView: View): View</p> <p>Allows this extension to modify the view hierarchy represented by contentView.</p> <p>Returns the root view of the modified hierarchy.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/","title":"Package-level declarations - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/#types","title":"Types","text":"Name Summary FrameworkResources [jvm]open class ~~FrameworkResources~~ : ResourceRepository IdGeneratingResourceFile [jvm]class ~~IdGeneratingResourceFile~~ : ResourceFile, ValueResourceParser.IValueResourceRepository IdResourceParser [jvm]open class ~~IdResourceParser~~ MultiResourceFile [jvm]class ~~MultiResourceFile~~ : ResourceFile, ValueResourceParser.IValueResourceRepository ResourceDeltaKind [jvm]enum ~~ResourceDeltaKind~~ ResourceFile [jvm]abstract class ~~ResourceFile~~ : Configurable ResourceFolder [jvm]class ~~ResourceFolder~~ : Configurable ResourceItem [jvm]open class ~~ResourceItem~~ : Comparable&lt;T&gt; ResourceRepository [jvm]abstract class ~~ResourceRepository~~ ScanningContext [jvm]open class ~~ScanningContext~~ SingleResourceFile [jvm]open class ~~SingleResourceFile~~ : ResourceFile ValidatingResourceParser [jvm]open class ~~ValidatingResourceParser~~ ValueResourceParser [jvm]class ~~ValueResourceParser~~ : DefaultHandler"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/","title":"FrameworkResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/FrameworkResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/#frameworkresources","title":"FrameworkResources","text":"<p>[jvm]\\ open class ~~FrameworkResources~~ : ResourceRepository\u2014</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/#deprecated_1","title":"Deprecated","text":"<p>This class is part of an obsolete resource repository system that is no longer used in production code. The class is preserved temporarily for LayoutLib tests.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/#constructors","title":"Constructors","text":"FrameworkResources [jvm]constructor(@NonNullresFolder: IAbstractFolder)"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/#functions","title":"Functions","text":"Name Summary clear [jvm]open fun clear() ensureInitialized [jvm]open fun ensureInitialized(): BooleanEnsures that the repository has been initialized again after a call to clear. getAvailableResourceTypes [jvm]@NonNullopen fun getAvailableResourceTypes(): List&lt;ResourceType&gt; getConfiguredResources [jvm]@NonNullopen fun getConfiguredResources(@NonNullreferenceConfig: FolderConfiguration): Map&lt;ResourceType, ResourceValueMap&gt;Returns the resources values matching a given FolderConfiguration. getFolders [jvm]@Nullableopen fun getFolders(@NonNulltype: ResourceFolderType): List&lt;ResourceFolder&gt;Returns a list of ResourceFolder for a specific ResourceFolderType. getLanguages [jvm]@NonNullopen fun getLanguages(): SortedSet&lt;String&gt;Returns the sorted list of languages used in the resources. getMatchingFile [jvm]@Nullableopen fun getMatchingFile(@NonNullname: String, @NonNulltype: ResourceFolderType, @NonNullconfig: FolderConfiguration): ResourceFileReturns the ResourceFile matching the given name, ResourceFolderType and configuration.[jvm]@Nullableopen fun getMatchingFile(@NonNullname: String, @NonNulltype: ResourceType, @NonNullconfig: FolderConfiguration): ResourceFileReturns the ResourceFile matching the given name, ResourceType and configuration. getRegions [jvm]@NonNullopen fun getRegions(@NonNullcurrentLanguage: String): SortedSet&lt;String&gt;Returns the sorted list of regions used in the resources with the given language. getResFolder [jvm]open fun getResFolder(): IAbstractFolder getResourceFolder [jvm]@Nullableopen fun getResourceFolder(@NonNullfolder: IAbstractFolder): ResourceFolderReturns the ResourceFolder associated with a IAbstractFolder. getResourceItem [jvm]@NonNullopen fun getResourceItem(@NonNulltype: ResourceType, @NonNullname: String): ResourceItemReturns a ResourceItem matching the given ResourceType and name. getResourceItemsOfType [jvm]@NonNullopen fun getResourceItemsOfType(@NonNulltype: ResourceType): List&lt;ResourceItem&gt;Returns a Collection (always non null, but can be empty) of publicResourceItem matching a given ResourceType. getSourceFiles [jvm]@Nullableopen fun getSourceFiles(@NonNulltype: ResourceType, @NonNullname: String, @NullablereferenceConfig: FolderConfiguration): List&lt;ResourceFile&gt;Returns the list of source files for a given resource. hasResourceItem [jvm]open fun hasResourceItem(@NonNullurl: String): Booleanopen fun hasResourceItem(@NonNulltype: ResourceType, @NonNullname: String): BooleanReturns true if this resource repository contains a resource of the given name. hasResourcesOfType [jvm]open fun hasResourcesOfType(@NonNulltype: ResourceType): BooleanReturns whether the repository has public resources of a given ResourceType. isFrameworkRepository [jvm]open fun isFrameworkRepository(): Boolean loadPublicResources [jvm]open fun loadPublicResources(@Nullablelogger: ILogger)Reads the public.xml file in data/res/values/ for a given resource folder and builds up a map of public resources. loadResources [jvm]open fun loadResources()Loads the resources. postUpdateCleanUp [jvm]open fun postUpdateCleanUp()Cleans up the repository of resource items that have no source file anymore. processFolder [jvm]@Nullableopen fun processFolder(@NonNullfolder: IAbstractFolder): ResourceFolderProcesses a folder and adds it to the list of existing folders. removeFolder [jvm]@Nullableopen fun removeFolder(@NonNulltype: ResourceFolderType, @NonNullremovedFolder: IAbstractFolder, @Nullablecontext: ScanningContext): ResourceFolderRemoves a ResourceFolder associated with the specified IAbstractFolder."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/-framework-resources/","title":"FrameworkResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/FrameworkResources/FrameworkResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/-framework-resources/#frameworkresources","title":"FrameworkResources","text":"<p>[jvm]\\ constructor(@NonNullresFolder: IAbstractFolder)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/get-resource-items-of-type/","title":"getResourceItemsOfType - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/FrameworkResources/getResourceItemsOfType</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/get-resource-items-of-type/#getresourceitemsoftype","title":"getResourceItemsOfType","text":"<p>[jvm]\\</p> <p>@NonNull</p> <p>open fun getResourceItemsOfType(@NonNulltype: ResourceType): List&lt;ResourceItem&gt;</p> <p>Returns a Collection (always non null, but can be empty) of publicResourceItem matching a given ResourceType.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/get-resource-items-of-type/#return","title":"Return","text":"<p>a collection of items, possibly empty.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/get-resource-items-of-type/#parameters","title":"Parameters","text":"<p>jvm</p> type the type of the resources to return"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/has-resources-of-type/","title":"hasResourcesOfType - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/FrameworkResources/hasResourcesOfType</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/has-resources-of-type/#hasresourcesoftype","title":"hasResourcesOfType","text":"<p>[jvm]\\ open fun hasResourcesOfType(@NonNulltype: ResourceType): Boolean</p> <p>Returns whether the repository has public resources of a given ResourceType.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/has-resources-of-type/#return","title":"Return","text":"<p>true if the repository contains resources of the given type, false otherwise.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/has-resources-of-type/#parameters","title":"Parameters","text":"<p>jvm</p> type the type of resource to check."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/load-public-resources/","title":"loadPublicResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/FrameworkResources/loadPublicResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/load-public-resources/#loadpublicresources","title":"loadPublicResources","text":"<p>[jvm]\\ open fun loadPublicResources(@Nullablelogger: ILogger)</p> <p>Reads the public.xml file in data/res/values/ for a given resource folder and builds up a map of public resources. This map is a subset of the full resource map that only contains framework resources that are public.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-framework-resources/load-public-resources/#parameters","title":"Parameters","text":"<p>jvm</p> logger a logger to report issues to"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/","title":"IdGeneratingResourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/IdGeneratingResourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/#idgeneratingresourcefile","title":"IdGeneratingResourceFile","text":"<p>[jvm]\\ class ~~IdGeneratingResourceFile~~ : ResourceFile, ValueResourceParser.IValueResourceRepository\u2014</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/#deprecated_1","title":"Deprecated","text":"<p>This class is part of an obsolete resource repository system that is no longer used in production code. The class is preserved temporarily for LayoutLib tests.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/#constructors","title":"Constructors","text":"IdGeneratingResourceFile [jvm]constructor(file: IAbstractFile, folder: ResourceFolder, type: ResourceType)"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/#functions","title":"Functions","text":"Name Summary addResourceValue [jvm]open fun addResourceValue(value: ResourceValue) getConfiguration [jvm]open fun getConfiguration(): FolderConfigurationabstract fun getConfiguration(): FolderConfiguration getFile [jvm]fun getFile(): IAbstractFileReturns the IFile associated with the ResourceFile. getFolder [jvm]fun getFolder(): ResourceFolderReturns the parent folder as a ResourceFolder. getRepository [jvm]fun getRepository(): ResourceRepository getResourceTypes [jvm]open fun getResourceTypes(): Collection&lt;ResourceType&gt;Returns the list of ResourceType generated by the file. getValue [jvm]open fun getValue(type: ResourceType, name: String): ResourceValueReturns the value of a resource generated by this file by ResourceType and name. hasResources [jvm]open fun hasResources(type: ResourceType): BooleanReturns whether the file generated a resource of a specific type. isFramework [jvm]fun isFramework(): BooleanReturns whether the resource is a framework resource. toString [jvm]open fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/-id-generating-resource-file/","title":"IdGeneratingResourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/IdGeneratingResourceFile/IdGeneratingResourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/-id-generating-resource-file/#idgeneratingresourcefile","title":"IdGeneratingResourceFile","text":"<p>[jvm]\\ constructor(file: IAbstractFile, folder: ResourceFolder, type: ResourceType)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/add-resource-value/","title":"addResourceValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/IdGeneratingResourceFile/addResourceValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/add-resource-value/#addresourcevalue","title":"addResourceValue","text":"<p>[jvm]\\ open fun addResourceValue(value: ResourceValue)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/get-resource-types/","title":"getResourceTypes - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/IdGeneratingResourceFile/getResourceTypes</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/get-resource-types/#getresourcetypes","title":"getResourceTypes","text":"<p>[jvm]\\ open fun getResourceTypes(): Collection&lt;ResourceType&gt;</p> <p>Returns the list of ResourceType generated by the file. This is never null.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/get-value/","title":"getValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/IdGeneratingResourceFile/getValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/get-value/#getvalue","title":"getValue","text":"<p>[jvm]\\ open fun getValue(type: ResourceType, name: String): ResourceValue</p> <p>Returns the value of a resource generated by this file by ResourceType and name. </p> <p>If no resource match, <code>null</code> is returned.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/get-value/#parameters","title":"Parameters","text":"<p>jvm</p> type the type of the resource. name the name of the resource."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/has-resources/","title":"hasResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/IdGeneratingResourceFile/hasResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/has-resources/#hasresources","title":"hasResources","text":"<p>[jvm]\\ open fun hasResources(type: ResourceType): Boolean</p> <p>Returns whether the file generated a resource of a specific type.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-generating-resource-file/has-resources/#parameters","title":"Parameters","text":"<p>jvm</p> type The ResourceType"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-resource-parser/","title":"IdResourceParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/IdResourceParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-resource-parser/#idresourceparser","title":"IdResourceParser","text":"<p>[jvm]\\ open class ~~IdResourceParser~~\u2014</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-resource-parser/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-resource-parser/#deprecated_1","title":"Deprecated","text":"<p>This class is part of an obsolete resource repository system that is no longer used in production code. The class is preserved temporarily for LayoutLib tests.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-resource-parser/#constructors","title":"Constructors","text":"IdResourceParser [jvm]constructor(@NonNullrepository: ValueResourceParser.IValueResourceRepository, @NonNullcontext: ScanningContext, isFramework: Boolean)Creates a new IdResourceParser"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-resource-parser/#functions","title":"Functions","text":"Name Summary parse [jvm]open fun parse(type: ResourceType, path: String, input: InputStream): BooleanParse the given input and register ids with the given IValueResourceRepository."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-resource-parser/-id-resource-parser/","title":"IdResourceParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/IdResourceParser/IdResourceParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-resource-parser/-id-resource-parser/#idresourceparser","title":"IdResourceParser","text":"<p>[jvm]\\ constructor(@NonNullrepository: ValueResourceParser.IValueResourceRepository, @NonNullcontext: ScanningContext, isFramework: Boolean)</p> <p>Creates a new IdResourceParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-resource-parser/-id-resource-parser/#parameters","title":"Parameters","text":"<p>jvm</p> repository value repository for registering resource declaration context a context object with state for the current update, such as a place to stash errors encountered isFramework true if scanning a framework resource"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-resource-parser/parse/","title":"parse - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/IdResourceParser/parse</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-resource-parser/parse/#parse","title":"parse","text":"<p>[jvm]\\ open fun parse(type: ResourceType, path: String, input: InputStream): Boolean</p> <p>Parse the given input and register ids with the given IValueResourceRepository.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-resource-parser/parse/#return","title":"Return","text":"<p>true if parsing succeeds and false if it fails</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-resource-parser/parse/#parameters","title":"Parameters","text":"<p>jvm</p> type the type of resource being scanned path the full OS path to the file being parsed input the input stream of the XML to be parsed (will be closed by this method)"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-id-resource-parser/parse/#throws","title":"Throws","text":"IOException if reading the contents fails"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/","title":"MultiResourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/MultiResourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/#multiresourcefile","title":"MultiResourceFile","text":"<p>[jvm]\\ class ~~MultiResourceFile~~ : ResourceFile, ValueResourceParser.IValueResourceRepository\u2014</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/#deprecated_1","title":"Deprecated","text":"<p>This class is part of an obsolete resource repository system that is no longer used in production code. The class is preserved temporarily for LayoutLib tests.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/#constructors","title":"Constructors","text":"MultiResourceFile [jvm]constructor(file: IAbstractFile, folder: ResourceFolder)"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/#functions","title":"Functions","text":"Name Summary addResourceValue [jvm]open fun addResourceValue(value: ResourceValue)Adds a resource item to the list getConfiguration [jvm]open fun getConfiguration(): FolderConfigurationabstract fun getConfiguration(): FolderConfiguration getFile [jvm]fun getFile(): IAbstractFileReturns the IFile associated with the ResourceFile. getFolder [jvm]fun getFolder(): ResourceFolderReturns the parent folder as a ResourceFolder. getRepository [jvm]fun getRepository(): ResourceRepository getResourceTypes [jvm]open fun getResourceTypes(): Collection&lt;ResourceType&gt;Returns the list of ResourceType generated by the file. getValue [jvm]open fun getValue(type: ResourceType, name: String): ResourceValueReturns the value of a resource generated by this file by ResourceType and name. hasResources [jvm]open fun hasResources(type: ResourceType): BooleanReturns whether the file generated a resource of a specific type. isFramework [jvm]fun isFramework(): BooleanReturns whether the resource is a framework resource. toString [jvm]open fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/-multi-resource-file/","title":"MultiResourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/MultiResourceFile/MultiResourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/-multi-resource-file/#multiresourcefile","title":"MultiResourceFile","text":"<p>[jvm]\\ constructor(file: IAbstractFile, folder: ResourceFolder)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/add-resource-value/","title":"addResourceValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/MultiResourceFile/addResourceValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/add-resource-value/#addresourcevalue","title":"addResourceValue","text":"<p>[jvm]\\ open fun addResourceValue(value: ResourceValue)</p> <p>Adds a resource item to the list</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/add-resource-value/#parameters","title":"Parameters","text":"<p>jvm</p> value The value of the resource."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/get-resource-types/","title":"getResourceTypes - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/MultiResourceFile/getResourceTypes</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/get-resource-types/#getresourcetypes","title":"getResourceTypes","text":"<p>[jvm]\\ open fun getResourceTypes(): Collection&lt;ResourceType&gt;</p> <p>Returns the list of ResourceType generated by the file. This is never null.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/get-value/","title":"getValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/MultiResourceFile/getValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/get-value/#getvalue","title":"getValue","text":"<p>[jvm]\\ open fun getValue(type: ResourceType, name: String): ResourceValue</p> <p>Returns the value of a resource generated by this file by ResourceType and name. </p> <p>If no resource match, <code>null</code> is returned.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/get-value/#parameters","title":"Parameters","text":"<p>jvm</p> type the type of the resource. name the name of the resource."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/has-resources/","title":"hasResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/MultiResourceFile/hasResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/has-resources/#hasresources","title":"hasResources","text":"<p>[jvm]\\ open fun hasResources(type: ResourceType): Boolean</p> <p>Returns whether the file generated a resource of a specific type.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-multi-resource-file/has-resources/#parameters","title":"Parameters","text":"<p>jvm</p> type The ResourceType"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/","title":"ResourceDeltaKind - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceDeltaKind</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/#resourcedeltakind","title":"ResourceDeltaKind","text":"<p>[jvm]\\ enum ~~ResourceDeltaKind~~\u2014</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/#deprecated_1","title":"Deprecated","text":"<p>This class is part of an obsolete resource repository system that is no longer used in production code. The class is preserved temporarily for LayoutLib tests.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/#entries","title":"Entries","text":"CHANGED [jvm]~~CHANGED~~ ADDED [jvm]~~ADDED~~ REMOVED [jvm]~~REMOVED~~"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/#functions","title":"Functions","text":"Name Summary valueOf [jvm]open fun valueOf(name: String): ResourceDeltaKindReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [jvm]open fun values(): Array&lt;ResourceDeltaKind&gt;Returns an array containing the constants of this enum type, in the order they\u2019re declared. This method may be used to iterate over the constants."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/value-of/","title":"valueOf - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceDeltaKind/valueOf</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/value-of/#valueof","title":"valueOf","text":"<p>[jvm]\\ open fun valueOf(name: String): ResourceDeltaKind</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/value-of/#return","title":"Return","text":"<p>the enum constant with the specified name</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/values/","title":"values - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceDeltaKind/values</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/values/#values","title":"values","text":"<p>[jvm]\\ open fun values(): Array&lt;ResourceDeltaKind&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they\u2019re declared. This method may be used to iterate over the constants.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/values/#return","title":"Return","text":"<p>an array containing the constants of this enum type, in the order they\u2019re declared</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/-a-d-d-e-d/","title":"ADDED - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceDeltaKind/ADDED</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/-a-d-d-e-d/#added","title":"ADDED","text":"<p>[jvm]\\ ~~ADDED~~</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/-a-d-d-e-d/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/-c-h-a-n-g-e-d/","title":"CHANGED - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceDeltaKind/CHANGED</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/-c-h-a-n-g-e-d/#changed","title":"CHANGED","text":"<p>[jvm]\\ ~~CHANGED~~</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/-c-h-a-n-g-e-d/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/-r-e-m-o-v-e-d/","title":"REMOVED - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceDeltaKind/REMOVED</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/-r-e-m-o-v-e-d/#removed","title":"REMOVED","text":"<p>[jvm]\\ ~~REMOVED~~</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-delta-kind/-r-e-m-o-v-e-d/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/","title":"ResourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/#resourcefile","title":"ResourceFile","text":"<p>abstract class ~~ResourceFile~~ : Configurable\u2014</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/#deprecated_1","title":"Deprecated","text":"<p>This class is part of an obsolete resource repository system that is no longer used in production code. The class is preserved temporarily for LayoutLib tests.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/#inheritors","title":"Inheritors","text":"MultiResourceFile IdGeneratingResourceFile SingleResourceFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/#functions","title":"Functions","text":"Name Summary getConfiguration [jvm]open fun getConfiguration(): FolderConfiguration getFile [jvm]fun getFile(): IAbstractFileReturns the IFile associated with the ResourceFile. getFolder [jvm]fun getFolder(): ResourceFolderReturns the parent folder as a ResourceFolder. getRepository [jvm]fun getRepository(): ResourceRepository getResourceTypes [jvm]abstract fun getResourceTypes(): Collection&lt;ResourceType&gt;Returns the list of ResourceType generated by the file. getValue [jvm]abstract fun getValue(type: ResourceType, name: String): ResourceValueReturns the value of a resource generated by this file by ResourceType and name. hasResources [jvm]abstract fun hasResources(type: ResourceType): BooleanReturns whether the file generated a resource of a specific type. isFramework [jvm]fun isFramework(): BooleanReturns whether the resource is a framework resource. toString [jvm]open fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/get-configuration/","title":"getConfiguration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFile/getConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/get-configuration/#getconfiguration","title":"getConfiguration","text":"<p>[jvm]\\ open fun getConfiguration(): FolderConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/get-file/","title":"getFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFile/getFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/get-file/#getfile","title":"getFile","text":"<p>[jvm]\\ fun getFile(): IAbstractFile</p> <p>Returns the IFile associated with the ResourceFile.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/get-folder/","title":"getFolder - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFile/getFolder</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/get-folder/#getfolder","title":"getFolder","text":"<p>[jvm]\\ fun getFolder(): ResourceFolder</p> <p>Returns the parent folder as a ResourceFolder.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/get-repository/","title":"getRepository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFile/getRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/get-repository/#getrepository","title":"getRepository","text":"<p>[jvm]\\ fun getRepository(): ResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/get-resource-types/","title":"getResourceTypes - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFile/getResourceTypes</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/get-resource-types/#getresourcetypes","title":"getResourceTypes","text":"<p>[jvm]\\ abstract fun getResourceTypes(): Collection&lt;ResourceType&gt;</p> <p>Returns the list of ResourceType generated by the file. This is never null.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/get-value/","title":"getValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFile/getValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/get-value/#getvalue","title":"getValue","text":"<p>[jvm]\\ abstract fun getValue(type: ResourceType, name: String): ResourceValue</p> <p>Returns the value of a resource generated by this file by ResourceType and name. </p> <p>If no resource match, <code>null</code> is returned.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/get-value/#parameters","title":"Parameters","text":"<p>jvm</p> type the type of the resource. name the name of the resource."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/has-resources/","title":"hasResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFile/hasResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/has-resources/#hasresources","title":"hasResources","text":"<p>[jvm]\\ abstract fun hasResources(type: ResourceType): Boolean</p> <p>Returns whether the file generated a resource of a specific type.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/has-resources/#parameters","title":"Parameters","text":"<p>jvm</p> type The ResourceType"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/is-framework/","title":"isFramework - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFile/isFramework</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/is-framework/#isframework","title":"isFramework","text":"<p>[jvm]\\ fun isFramework(): Boolean</p> <p>Returns whether the resource is a framework resource.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/to-string/","title":"toString - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFile/toString</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-file/to-string/#tostring","title":"toString","text":"<p>[jvm]\\ open fun toString(): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/","title":"ResourceFolder - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFolder</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/#resourcefolder","title":"ResourceFolder","text":"<p>[jvm]\\ class ~~ResourceFolder~~ : Configurable\u2014</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/#deprecated_1","title":"Deprecated","text":"<p>This class is part of an obsolete resource repository system that is no longer used in production code. The class is preserved temporarily for LayoutLib tests.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/#functions","title":"Functions","text":"Name Summary addFile [jvm]open fun addFile(file: ResourceFile)Adds a ResourceFile to the folder. getConfiguration [jvm]open fun getConfiguration(): FolderConfiguration getFile [jvm]open fun getFile(filename: String): ResourceFileReturns the ResourceFile matching a given name. getFolder [jvm]open fun getFolder(): IAbstractFolderReturns the IAbstractFolder associated with this object. getRepository [jvm]open fun getRepository(): ResourceRepository getResourceTypes [jvm]open fun getResourceTypes(): Collection&lt;ResourceType&gt;Returns the list of ResourceTypes generated by the files inside this folder. getType [jvm]open fun getType(): ResourceFolderTypeReturns the ResourceFolderType of this object. hasFile [jvm]open fun hasFile(name: String): BooleanReturns whether the folder contains a file with the given name. hasResources [jvm]open fun hasResources(type: ResourceType): BooleanReturns whether a file in the folder is generating a resource of a specified type. processFile [jvm]open fun processFile(file: IAbstractFile, kind: ResourceDeltaKind, context: ScanningContext): ResourceFileProcesses a file and adds it to its parent folder resource. toString [jvm]open fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/add-file/","title":"addFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFolder/addFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/add-file/#addfile","title":"addFile","text":"<p>[jvm]\\ open fun addFile(file: ResourceFile)</p> <p>Adds a ResourceFile to the folder.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/add-file/#parameters","title":"Parameters","text":"<p>jvm</p> file The ResourceFile."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/get-configuration/","title":"getConfiguration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFolder/getConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/get-configuration/#getconfiguration","title":"getConfiguration","text":"<p>[jvm]\\ open fun getConfiguration(): FolderConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/get-file/","title":"getFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFolder/getFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/get-file/#getfile","title":"getFile","text":"<p>[jvm]\\ open fun getFile(filename: String): ResourceFile</p> <p>Returns the ResourceFile matching a given name.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/get-file/#return","title":"Return","text":"<p>the ResourceFile or <code>null</code> if no match was found.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/get-file/#parameters","title":"Parameters","text":"<p>jvm</p> filename The name of the file to return."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/get-folder/","title":"getFolder - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFolder/getFolder</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/get-folder/#getfolder","title":"getFolder","text":"<p>[jvm]\\ open fun getFolder(): IAbstractFolder</p> <p>Returns the IAbstractFolder associated with this object.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/get-repository/","title":"getRepository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFolder/getRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/get-repository/#getrepository","title":"getRepository","text":"<p>[jvm]\\ open fun getRepository(): ResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/get-resource-types/","title":"getResourceTypes - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFolder/getResourceTypes</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/get-resource-types/#getresourcetypes","title":"getResourceTypes","text":"<p>[jvm]\\ open fun getResourceTypes(): Collection&lt;ResourceType&gt;</p> <p>Returns the list of ResourceTypes generated by the files inside this folder.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/get-type/","title":"getType - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFolder/getType</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/get-type/#gettype","title":"getType","text":"<p>[jvm]\\ open fun getType(): ResourceFolderType</p> <p>Returns the ResourceFolderType of this object.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/has-file/","title":"hasFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFolder/hasFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/has-file/#hasfile","title":"hasFile","text":"<p>[jvm]\\ open fun hasFile(name: String): Boolean</p> <p>Returns whether the folder contains a file with the given name.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/has-file/#parameters","title":"Parameters","text":"<p>jvm</p> name the name of the file."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/has-resources/","title":"hasResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFolder/hasResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/has-resources/#hasresources","title":"hasResources","text":"<p>[jvm]\\ open fun hasResources(type: ResourceType): Boolean</p> <p>Returns whether a file in the folder is generating a resource of a specified type.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/has-resources/#parameters","title":"Parameters","text":"<p>jvm</p> type The ResourceType being looked up."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/process-file/","title":"processFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFolder/processFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/process-file/#processfile","title":"processFile","text":"<p>[jvm]\\ open fun processFile(file: IAbstractFile, kind: ResourceDeltaKind, context: ScanningContext): ResourceFile</p> <p>Processes a file and adds it to its parent folder resource.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/process-file/#return","title":"Return","text":"<p>the ResourceFile that was created.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/process-file/#parameters","title":"Parameters","text":"<p>jvm</p> file the underlying resource file. kind the file change kind. context a context object with state for the current update, such as a place to stash errors encountered"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/to-string/","title":"toString - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceFolder/toString</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-folder/to-string/#tostring","title":"toString","text":"<p>[jvm]\\ open fun toString(): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/","title":"ResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/#resourceitem","title":"ResourceItem","text":"<p>[jvm]\\ open class ~~ResourceItem~~ : Comparable&lt;T&gt; \u2014</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/#deprecated_1","title":"Deprecated","text":"<p>This class is part of an obsolete resource repository system that is no longer used in production code. The class is preserved temporarily for LayoutLib tests.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/#constructors","title":"Constructors","text":"ResourceItem [jvm]constructor(name: String)Constructs a new ResourceItem."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/#functions","title":"Functions","text":"Name Summary compareTo [jvm]open fun compareTo(other: ResourceItem): IntCompares the ResourceItem to another. getAlternateCount [jvm]open fun getAlternateCount(): IntReturns the number of alternate versions for this resource. getName [jvm]fun getName(): StringReturns the name of the resource. getResourceValue [jvm]open fun getResourceValue(type: ResourceType, referenceConfig: FolderConfiguration, isFramework: Boolean): ResourceValueReturns a ResourceValue for this item based on the given configuration. getSourceFileArray [jvm]open fun getSourceFileArray(): Array&lt;ResourceFile&gt;Returns the sorted list of ResourceItem objects for this resource item. getSourceFileList [jvm]open fun getSourceFileList(): List&lt;ResourceFile&gt;Returns the list of source file for this resource. getXmlString [jvm]open fun getXmlString(type: ResourceType, system: Boolean): StringReturns a formatted string usable in an XML to use for the ResourceItem. hasAlternates [jvm]open fun hasAlternates(): BooleanReturns if the resource has at least one non-default version. hasDefault [jvm]open fun hasDefault(): BooleanReturns whether the resource has a default version, with no qualifier. isDeclaredInline [jvm]open fun isDeclaredInline(): BooleanReturns whether the ID resource has been declared inline inside another resource XML file. isEditableDirectly [jvm]open fun isEditableDirectly(): BooleanReturns whether the resource is editable directly. toString [jvm]open fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/-resource-item/","title":"ResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceItem/ResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/-resource-item/#resourceitem","title":"ResourceItem","text":"<p>[jvm]\\ constructor(name: String)</p> <p>Constructs a new ResourceItem.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/-resource-item/#parameters","title":"Parameters","text":"<p>jvm</p> name the name of the resource as it appears in the XML and R.java files."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/compare-to/","title":"compareTo - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceItem/compareTo</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/compare-to/#compareto","title":"compareTo","text":"<p>[jvm]\\ open fun compareTo(other: ResourceItem): Int</p> <p>Compares the ResourceItem to another.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/compare-to/#parameters","title":"Parameters","text":"<p>jvm</p> other the ResourceItem to be compared to."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-alternate-count/","title":"getAlternateCount - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceItem/getAlternateCount</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-alternate-count/#getalternatecount","title":"getAlternateCount","text":"<p>[jvm]\\ open fun getAlternateCount(): Int</p> <p>Returns the number of alternate versions for this resource.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-alternate-count/#see-also","title":"See also","text":"ResourceFile FolderConfiguration"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-name/","title":"getName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceItem/getName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-name/#getname","title":"getName","text":"<p>[jvm]\\ fun getName(): String</p> <p>Returns the name of the resource.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-resource-value/","title":"getResourceValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceItem/getResourceValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-resource-value/#getresourcevalue","title":"getResourceValue","text":"<p>[jvm]\\ open fun getResourceValue(type: ResourceType, referenceConfig: FolderConfiguration, isFramework: Boolean): ResourceValue</p> <p>Returns a ResourceValue for this item based on the given configuration. If the ResourceItem has several source files, one will be selected based on the config.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-resource-value/#return","title":"Return","text":"<p>a ResourceValue or null if none match the config.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-resource-value/#parameters","title":"Parameters","text":"<p>jvm</p> type the type of the resource. This is necessary because ResourceItem doesn\u2019t embed its type, but ResourceValue does. referenceConfig the config of the resource item. isFramework whether the resource is a framework value. Same as the type."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-source-file-array/","title":"getSourceFileArray - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceItem/getSourceFileArray</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-source-file-array/#getsourcefilearray","title":"getSourceFileArray","text":"<p>[jvm]\\ open fun getSourceFileArray(): Array&lt;ResourceFile&gt;</p> <p>Returns the sorted list of ResourceItem objects for this resource item.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-source-file-list/","title":"getSourceFileList - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceItem/getSourceFileList</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-source-file-list/#getsourcefilelist","title":"getSourceFileList","text":"<p>[jvm]\\ open fun getSourceFileList(): List&lt;ResourceFile&gt;</p> <p>Returns the list of source file for this resource.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-xml-string/","title":"getXmlString - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceItem/getXmlString</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-xml-string/#getxmlstring","title":"getXmlString","text":"<p>[jvm]\\ open fun getXmlString(type: ResourceType, system: Boolean): String</p> <p>Returns a formatted string usable in an XML to use for the ResourceItem.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-xml-string/#return","title":"Return","text":"<p>a string in the format @[type]/[name]</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/get-xml-string/#parameters","title":"Parameters","text":"<p>jvm</p> system Whether this is a system resource or a project resource."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/has-alternates/","title":"hasAlternates - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceItem/hasAlternates</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/has-alternates/#hasalternates","title":"hasAlternates","text":"<p>[jvm]\\ open fun hasAlternates(): Boolean</p> <p>Returns if the resource has at least one non-default version.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/has-alternates/#see-also","title":"See also","text":"ResourceFile FolderConfiguration"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/has-default/","title":"hasDefault - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceItem/hasDefault</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/has-default/#hasdefault","title":"hasDefault","text":"<p>[jvm]\\ open fun hasDefault(): Boolean</p> <p>Returns whether the resource has a default version, with no qualifier.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/has-default/#see-also","title":"See also","text":"ResourceFile FolderConfiguration"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/is-declared-inline/","title":"isDeclaredInline - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceItem/isDeclaredInline</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/is-declared-inline/#isdeclaredinline","title":"isDeclaredInline","text":"<p>[jvm]\\ open fun isDeclaredInline(): Boolean</p> <p>Returns whether the ID resource has been declared inline inside another resource XML file. If the resource type is not ID, this will always return <code>false</code>.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/is-editable-directly/","title":"isEditableDirectly - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceItem/isEditableDirectly</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/is-editable-directly/#iseditabledirectly","title":"isEditableDirectly","text":"<p>[jvm]\\ open fun isEditableDirectly(): Boolean</p> <p>Returns whether the resource is editable directly. </p> <p>This is typically the case for resources that don\u2019t have alternate versions, or resources of type ID that aren\u2019t declared inline.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/to-string/","title":"toString - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceItem/toString</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-item/to-string/#tostring","title":"toString","text":"<p>[jvm]\\ open fun toString(): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/","title":"ResourceRepository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/#resourcerepository","title":"ResourceRepository","text":"<p>abstract class ~~ResourceRepository~~\u2014</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/#deprecated_1","title":"Deprecated","text":"<p>This class is part of an obsolete resource repository system that is no longer used in production code. The class is preserved temporarily for LayoutLib tests.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/#inheritors","title":"Inheritors","text":"FrameworkResources"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/#functions","title":"Functions","text":"Name Summary clear [jvm]open fun clear() ensureInitialized [jvm]open fun ensureInitialized(): BooleanEnsures that the repository has been initialized again after a call to clear. getAvailableResourceTypes [jvm]@NonNullopen fun getAvailableResourceTypes(): List&lt;ResourceType&gt; getConfiguredResources [jvm]@NonNullopen fun getConfiguredResources(@NonNullreferenceConfig: FolderConfiguration): Map&lt;ResourceType, ResourceValueMap&gt;Returns the resources values matching a given FolderConfiguration. getFolders [jvm]@Nullableopen fun getFolders(@NonNulltype: ResourceFolderType): List&lt;ResourceFolder&gt;Returns a list of ResourceFolder for a specific ResourceFolderType. getLanguages [jvm]@NonNullopen fun getLanguages(): SortedSet&lt;String&gt;Returns the sorted list of languages used in the resources. getMatchingFile [jvm]@Nullableopen fun getMatchingFile(@NonNullname: String, @NonNulltype: ResourceFolderType, @NonNullconfig: FolderConfiguration): ResourceFileReturns the ResourceFile matching the given name, ResourceFolderType and configuration.[jvm]@Nullableopen fun getMatchingFile(@NonNullname: String, @NonNulltype: ResourceType, @NonNullconfig: FolderConfiguration): ResourceFileReturns the ResourceFile matching the given name, ResourceType and configuration. getRegions [jvm]@NonNullopen fun getRegions(@NonNullcurrentLanguage: String): SortedSet&lt;String&gt;Returns the sorted list of regions used in the resources with the given language. getResFolder [jvm]open fun getResFolder(): IAbstractFolder getResourceFolder [jvm]@Nullableopen fun getResourceFolder(@NonNullfolder: IAbstractFolder): ResourceFolderReturns the ResourceFolder associated with a IAbstractFolder. getResourceItem [jvm]@NonNullopen fun getResourceItem(@NonNulltype: ResourceType, @NonNullname: String): ResourceItemReturns a ResourceItem matching the given ResourceType and name. getResourceItemsOfType [jvm]@NonNullopen fun getResourceItemsOfType(@NonNulltype: ResourceType): Collection&lt;ResourceItem&gt;Returns a list of ResourceItem matching a given ResourceType. getSourceFiles [jvm]@Nullableopen fun getSourceFiles(@NonNulltype: ResourceType, @NonNullname: String, @NullablereferenceConfig: FolderConfiguration): List&lt;ResourceFile&gt;Returns the list of source files for a given resource. hasResourceItem [jvm]open fun hasResourceItem(@NonNullurl: String): Booleanopen fun hasResourceItem(@NonNulltype: ResourceType, @NonNullname: String): BooleanReturns true if this resource repository contains a resource of the given name. hasResourcesOfType [jvm]open fun hasResourcesOfType(@NonNulltype: ResourceType): BooleanReturns whether the repository has resources of a given ResourceType. isFrameworkRepository [jvm]open fun isFrameworkRepository(): Boolean loadResources [jvm]open fun loadResources()Loads the resources. postUpdateCleanUp [jvm]open fun postUpdateCleanUp()Cleans up the repository of resource items that have no source file anymore. processFolder [jvm]@Nullableopen fun processFolder(@NonNullfolder: IAbstractFolder): ResourceFolderProcesses a folder and adds it to the list of existing folders. removeFolder [jvm]@Nullableopen fun removeFolder(@NonNulltype: ResourceFolderType, @NonNullremovedFolder: IAbstractFolder, @Nullablecontext: ScanningContext): ResourceFolderRemoves a ResourceFolder associated with the specified IAbstractFolder."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/clear/","title":"clear - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/clear</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/clear/#clear","title":"clear","text":"<p>[jvm]\\ open fun clear()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/ensure-initialized/","title":"ensureInitialized - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/ensureInitialized</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/ensure-initialized/#ensureinitialized","title":"ensureInitialized","text":"<p>[jvm]\\ open fun ensureInitialized(): Boolean</p> <p>Ensures that the repository has been initialized again after a call to clear.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/ensure-initialized/#return","title":"Return","text":"<p>true if the repository was just re-initialized.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-available-resource-types/","title":"getAvailableResourceTypes - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/getAvailableResourceTypes</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-available-resource-types/#getavailableresourcetypes","title":"getAvailableResourceTypes","text":"<p>[jvm]\\</p> <p>@NonNull</p> <p>open fun getAvailableResourceTypes(): List&lt;ResourceType&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-configured-resources/","title":"getConfiguredResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/getConfiguredResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-configured-resources/#getconfiguredresources","title":"getConfiguredResources","text":"<p>[jvm]\\</p> <p>@NonNull</p> <p>open fun getConfiguredResources(@NonNullreferenceConfig: FolderConfiguration): Map&lt;ResourceType, ResourceValueMap&gt;</p> <p>Returns the resources values matching a given FolderConfiguration.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-configured-resources/#return","title":"Return","text":"<p>a map with guaranteed to contain an entry for each ResourceType</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-configured-resources/#parameters","title":"Parameters","text":"<p>jvm</p> referenceConfig the configuration that each value must match."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-folders/","title":"getFolders - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/getFolders</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-folders/#getfolders","title":"getFolders","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun getFolders(@NonNulltype: ResourceFolderType): List&lt;ResourceFolder&gt;</p> <p>Returns a list of ResourceFolder for a specific ResourceFolderType.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-folders/#parameters","title":"Parameters","text":"<p>jvm</p> type The ResourceFolderType"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-languages/","title":"getLanguages - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/getLanguages</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-languages/#getlanguages","title":"getLanguages","text":"<p>[jvm]\\</p> <p>@NonNull</p> <p>open fun getLanguages(): SortedSet&lt;String&gt;</p> <p>Returns the sorted list of languages used in the resources.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-matching-file/","title":"getMatchingFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/getMatchingFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-matching-file/#getmatchingfile","title":"getMatchingFile","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun getMatchingFile(@NonNullname: String, @NonNulltype: ResourceFolderType, @NonNullconfig: FolderConfiguration): ResourceFile</p> <p>Returns the ResourceFile matching the given name, ResourceFolderType and configuration. </p> <p>This only works with files generating one resource named after the file (for instance, layouts, bitmap based drawable, xml, anims).</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-matching-file/#return","title":"Return","text":"<p>the matching file or <code>null</code> if no match was found.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-matching-file/#parameters","title":"Parameters","text":"<p>jvm</p> name the resource name or file name type the folder type search for config the folder configuration to match for <p>[jvm]\\</p> <p>@Nullable</p> <p>open fun getMatchingFile(@NonNullname: String, @NonNulltype: ResourceType, @NonNullconfig: FolderConfiguration): ResourceFile</p> <p>Returns the ResourceFile matching the given name, ResourceType and configuration. </p> <p>This only works with files generating one resource named after the file (for instance, layouts, bitmap based drawable, xml, anims).</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-matching-file/#return_1","title":"Return","text":"<p>the matching file or <code>null</code> if no match was found.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-matching-file/#parameters_1","title":"Parameters","text":"<p>jvm</p> name the resource name or file name type the folder type search for config the folder configuration to match for"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-regions/","title":"getRegions - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/getRegions</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-regions/#getregions","title":"getRegions","text":"<p>[jvm]\\</p> <p>@NonNull</p> <p>open fun getRegions(@NonNullcurrentLanguage: String): SortedSet&lt;String&gt;</p> <p>Returns the sorted list of regions used in the resources with the given language.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-regions/#parameters","title":"Parameters","text":"<p>jvm</p> currentLanguage the current language the region must be associated with."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-res-folder/","title":"getResFolder - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/getResFolder</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-res-folder/#getresfolder","title":"getResFolder","text":"<p>[jvm]\\ open fun getResFolder(): IAbstractFolder</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-resource-folder/","title":"getResourceFolder - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/getResourceFolder</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-resource-folder/#getresourcefolder","title":"getResourceFolder","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun getResourceFolder(@NonNullfolder: IAbstractFolder): ResourceFolder</p> <p>Returns the ResourceFolder associated with a IAbstractFolder.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-resource-folder/#return","title":"Return","text":"<p>the ResourceFolder or null if it was not found.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-resource-folder/#parameters","title":"Parameters","text":"<p>jvm</p> folder The IAbstractFolder object."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-resource-item/","title":"getResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/getResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-resource-item/#getresourceitem","title":"getResourceItem","text":"<p>[jvm]\\</p> <p>@NonNull</p> <p>open fun getResourceItem(@NonNulltype: ResourceType, @NonNullname: String): ResourceItem</p> <p>Returns a ResourceItem matching the given ResourceType and name. If none exist, it creates one.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-resource-item/#return","title":"Return","text":"<p>A resource item matching the type and name.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-resource-item/#parameters","title":"Parameters","text":"<p>jvm</p> type the resource type name the name of the resource."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-resource-items-of-type/","title":"getResourceItemsOfType - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/getResourceItemsOfType</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-resource-items-of-type/#getresourceitemsoftype","title":"getResourceItemsOfType","text":"<p>[jvm]\\</p> <p>@NonNull</p> <p>open fun getResourceItemsOfType(@NonNulltype: ResourceType): Collection&lt;ResourceItem&gt;</p> <p>Returns a list of ResourceItem matching a given ResourceType.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-resource-items-of-type/#return","title":"Return","text":"<p>a non null collection of resource items</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-resource-items-of-type/#parameters","title":"Parameters","text":"<p>jvm</p> type the type of the resource items to return"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-source-files/","title":"getSourceFiles - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/getSourceFiles</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-source-files/#getsourcefiles","title":"getSourceFiles","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun getSourceFiles(@NonNulltype: ResourceType, @NonNullname: String, @NullablereferenceConfig: FolderConfiguration): List&lt;ResourceFile&gt;</p> <p>Returns the list of source files for a given resource. Optionally, if a FolderConfiguration is given, then only the best match for this config is returned.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-source-files/#return","title":"Return","text":"<p>a list of files generating this resource or null if it was not found.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/get-source-files/#parameters","title":"Parameters","text":"<p>jvm</p> type the type of the resource. name the name of the resource. referenceConfig an optional config for which only the best match will be returned."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/has-resource-item/","title":"hasResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/hasResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/has-resource-item/#hasresourceitem","title":"hasResourceItem","text":"<p>[jvm]\\ open fun hasResourceItem(@NonNullurl: String): Boolean</p> <p>Returns true if this resource repository contains a resource of the given name.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/has-resource-item/#return","title":"Return","text":"<p>true if the resource is known</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/has-resource-item/#parameters","title":"Parameters","text":"<p>jvm</p> url the resource URL <p>[jvm]\\ open fun hasResourceItem(@NonNulltype: ResourceType, @NonNullname: String): Boolean</p> <p>Returns true if this resource repository contains a resource of the given name.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/has-resource-item/#return_1","title":"Return","text":"<p>true if the resource is known</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/has-resource-item/#parameters_1","title":"Parameters","text":"<p>jvm</p> type the type of resource to look up name the name of the resource"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/has-resources-of-type/","title":"hasResourcesOfType - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/hasResourcesOfType</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/has-resources-of-type/#hasresourcesoftype","title":"hasResourcesOfType","text":"<p>[jvm]\\ open fun hasResourcesOfType(@NonNulltype: ResourceType): Boolean</p> <p>Returns whether the repository has resources of a given ResourceType.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/has-resources-of-type/#return","title":"Return","text":"<p>true if the repository contains resources of the given type, false otherwise.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/has-resources-of-type/#parameters","title":"Parameters","text":"<p>jvm</p> type the type of resource to check."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/is-framework-repository/","title":"isFrameworkRepository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/isFrameworkRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/is-framework-repository/#isframeworkrepository","title":"isFrameworkRepository","text":"<p>[jvm]\\ open fun isFrameworkRepository(): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/load-resources/","title":"loadResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/loadResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/load-resources/#loadresources","title":"loadResources","text":"<p>[jvm]\\ open fun loadResources()</p> <p>Loads the resources.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/post-update-clean-up/","title":"postUpdateCleanUp - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/postUpdateCleanUp</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/post-update-clean-up/#postupdatecleanup","title":"postUpdateCleanUp","text":"<p>[jvm]\\ open fun postUpdateCleanUp()</p> <p>Cleans up the repository of resource items that have no source file anymore.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/process-folder/","title":"processFolder - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/processFolder</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/process-folder/#processfolder","title":"processFolder","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun processFolder(@NonNullfolder: IAbstractFolder): ResourceFolder</p> <p>Processes a folder and adds it to the list of existing folders.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/process-folder/#return","title":"Return","text":"<p>the ResourceFolder created from this folder, or null if the process failed.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/process-folder/#parameters","title":"Parameters","text":"<p>jvm</p> folder the folder to process"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/remove-folder/","title":"removeFolder - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ResourceRepository/removeFolder</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/remove-folder/#removefolder","title":"removeFolder","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun removeFolder(@NonNulltype: ResourceFolderType, @NonNullremovedFolder: IAbstractFolder, @Nullablecontext: ScanningContext): ResourceFolder</p> <p>Removes a ResourceFolder associated with the specified IAbstractFolder.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/remove-folder/#return","title":"Return","text":"<p>the ResourceFolder that was removed, or null if no matches were found.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-resource-repository/remove-folder/#parameters","title":"Parameters","text":"<p>jvm</p> type The type of the folder removedFolder the IAbstractFolder object. context the scanning context"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/","title":"ScanningContext - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ScanningContext</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/#scanningcontext","title":"ScanningContext","text":"<p>[jvm]\\ open class ~~ScanningContext~~\u2014</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/#deprecated_1","title":"Deprecated","text":"<p>This class is part of an obsolete resource repository system that is no longer used in production code. The class is preserved temporarily for LayoutLib tests.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/#constructors","title":"Constructors","text":"ScanningContext [jvm]constructor()Constructs a new ScanningContext"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/#functions","title":"Functions","text":"Name Summary addError [jvm]open fun addError(@NonNullerror: String)Adds the given error to the scanning context. checkValue [jvm]open fun checkValue(@Nullableuri: String, @NonNullname: String, @NonNullvalue: String): BooleanAsks the context to check whether the given attribute name and value is valid in this context. getErrors [jvm]@Nullableopen fun getErrors(): List&lt;String&gt;Returns a list of errors encountered during scanning, or null if there were no errors. needsFullAapt [jvm]open fun needsFullAapt(): BooleanReturns whether this repository has been marked as \"dirty\"; if one or more of the constituent files have declared that the resource item names that they provide have changed."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/-scanning-context/","title":"ScanningContext - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ScanningContext/ScanningContext</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/-scanning-context/#scanningcontext","title":"ScanningContext","text":"<p>[jvm]\\ constructor()</p> <p>Constructs a new ScanningContext</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/add-error/","title":"addError - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ScanningContext/addError</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/add-error/#adderror","title":"addError","text":"<p>[jvm]\\ open fun addError(@NonNullerror: String)</p> <p>Adds the given error to the scanning context. The error should use the same syntax as real aapt error messages such that the aapt parser can properly detect the filename, line number, etc.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/add-error/#parameters","title":"Parameters","text":"<p>jvm</p> error the error message, including file name and line number at the beginning"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/check-value/","title":"checkValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ScanningContext/checkValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/check-value/#checkvalue","title":"checkValue","text":"<p>[jvm]\\ open fun checkValue(@Nullableuri: String, @NonNullname: String, @NonNullvalue: String): Boolean</p> <p>Asks the context to check whether the given attribute name and value is valid in this context.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/check-value/#return","title":"Return","text":"<p>true if the attribute is valid</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/check-value/#parameters","title":"Parameters","text":"<p>jvm</p> uri the XML namespace URI name the attribute local name value the attribute value"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/get-errors/","title":"getErrors - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ScanningContext/getErrors</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/get-errors/#geterrors","title":"getErrors","text":"<p>[jvm]\\</p> <p>@Nullable</p> <p>open fun getErrors(): List&lt;String&gt;</p> <p>Returns a list of errors encountered during scanning, or null if there were no errors.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/needs-full-aapt/","title":"needsFullAapt - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ScanningContext/needsFullAapt</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/needs-full-aapt/#needsfullaapt","title":"needsFullAapt","text":"<p>[jvm]\\ open fun needsFullAapt(): Boolean</p> <p>Returns whether this repository has been marked as \"dirty\"; if one or more of the constituent files have declared that the resource item names that they provide have changed.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-scanning-context/needs-full-aapt/#return","title":"Return","text":"<p>true if a full aapt compilation is required</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/","title":"SingleResourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/SingleResourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/#singleresourcefile","title":"SingleResourceFile","text":"<p>[jvm]\\ open class ~~SingleResourceFile~~ : ResourceFile\u2014</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/#deprecated_1","title":"Deprecated","text":"<p>This class is part of an obsolete resource repository system that is no longer used in production code. The class is preserved temporarily for LayoutLib tests.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/#constructors","title":"Constructors","text":"SingleResourceFile [jvm]constructor(file: IAbstractFile, folder: ResourceFolder)"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/#functions","title":"Functions","text":"Name Summary getConfiguration [jvm]open fun getConfiguration(): FolderConfigurationabstract fun getConfiguration(): FolderConfiguration getFile [jvm]fun getFile(): IAbstractFileReturns the IFile associated with the ResourceFile. getFolder [jvm]fun getFolder(): ResourceFolderReturns the parent folder as a ResourceFolder. getRepository [jvm]fun getRepository(): ResourceRepository getResourceTypes [jvm]open fun getResourceTypes(): Collection&lt;ResourceType&gt;Returns the list of ResourceType generated by the file. getValue [jvm]open fun getValue(type: ResourceType, name: String): ResourceValueReturns the value of a resource generated by this file by ResourceType and name. hasResources [jvm]open fun hasResources(type: ResourceType): BooleanReturns whether the file generated a resource of a specific type. isFramework [jvm]fun isFramework(): BooleanReturns whether the resource is a framework resource. toString [jvm]open fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/-single-resource-file/","title":"SingleResourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/SingleResourceFile/SingleResourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/-single-resource-file/#singleresourcefile","title":"SingleResourceFile","text":"<p>[jvm]\\ constructor(file: IAbstractFile, folder: ResourceFolder)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/get-resource-types/","title":"getResourceTypes - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/SingleResourceFile/getResourceTypes</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/get-resource-types/#getresourcetypes","title":"getResourceTypes","text":"<p>[jvm]\\ open fun getResourceTypes(): Collection&lt;ResourceType&gt;</p> <p>Returns the list of ResourceType generated by the file. This is never null.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/get-value/","title":"getValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/SingleResourceFile/getValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/get-value/#getvalue","title":"getValue","text":"<p>[jvm]\\ open fun getValue(type: ResourceType, name: String): ResourceValue</p> <p>Returns the value of a resource generated by this file by ResourceType and name. </p> <p>If no resource match, <code>null</code> is returned.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/get-value/#parameters","title":"Parameters","text":"<p>jvm</p> type the type of the resource. name the name of the resource."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/has-resources/","title":"hasResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/SingleResourceFile/hasResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/has-resources/#hasresources","title":"hasResources","text":"<p>[jvm]\\ open fun hasResources(type: ResourceType): Boolean</p> <p>Returns whether the file generated a resource of a specific type.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-single-resource-file/has-resources/#parameters","title":"Parameters","text":"<p>jvm</p> type The ResourceType"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-validating-resource-parser/","title":"ValidatingResourceParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ValidatingResourceParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-validating-resource-parser/#validatingresourceparser","title":"ValidatingResourceParser","text":"<p>[jvm]\\ open class ~~ValidatingResourceParser~~\u2014</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-validating-resource-parser/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-validating-resource-parser/#deprecated_1","title":"Deprecated","text":"<p>This class is part of an obsolete resource repository system that is no longer used in production code. The class is preserved temporarily for LayoutLib tests.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-validating-resource-parser/#constructors","title":"Constructors","text":"ValidatingResourceParser [jvm]constructor(@NonNullcontext: ScanningContext, isFramework: Boolean)Creates a new ValidatingResourceParser"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-validating-resource-parser/#functions","title":"Functions","text":"Name Summary parse [jvm]open fun parse(path: String, input: InputStream): BooleanParse the given input and return false if it contains errors, or if the context is already tagged as needing a full aapt run."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-validating-resource-parser/-validating-resource-parser/","title":"ValidatingResourceParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ValidatingResourceParser/ValidatingResourceParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-validating-resource-parser/-validating-resource-parser/#validatingresourceparser","title":"ValidatingResourceParser","text":"<p>[jvm]\\ constructor(@NonNullcontext: ScanningContext, isFramework: Boolean)</p> <p>Creates a new ValidatingResourceParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-validating-resource-parser/-validating-resource-parser/#parameters","title":"Parameters","text":"<p>jvm</p> context a context object with state for the current update, such as a place to stash errors encountered isFramework true if scanning a framework resource"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-validating-resource-parser/parse/","title":"parse - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ValidatingResourceParser/parse</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-validating-resource-parser/parse/#parse","title":"parse","text":"<p>[jvm]\\ open fun parse(path: String, input: InputStream): Boolean</p> <p>Parse the given input and return false if it contains errors, or if the context is already tagged as needing a full aapt run.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-validating-resource-parser/parse/#return","title":"Return","text":"<p>true if parsing succeeds and false if it fails</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-validating-resource-parser/parse/#parameters","title":"Parameters","text":"<p>jvm</p> path the full OS path to the file being parsed input the input stream of the XML to be parsed (will be closed by this method)"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-validating-resource-parser/parse/#throws","title":"Throws","text":"IOException if reading the contents fails"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/","title":"ValueResourceParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ValueResourceParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/#valueresourceparser","title":"ValueResourceParser","text":"<p>[jvm]\\ class ~~ValueResourceParser~~ : DefaultHandler\u2014</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/#deprecated","title":"Deprecated","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/#deprecated_1","title":"Deprecated","text":"<p>This class is part of an obsolete resource repository system that is no longer used in production code. The class is preserved temporarily for LayoutLib tests.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/#constructors","title":"Constructors","text":"ValueResourceParser [jvm]constructor(repository: ValueResourceParser.IValueResourceRepository, isFramework: Boolean, libraryName: String)"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/#types","title":"Types","text":"Name Summary IValueResourceRepository [jvm]interface IValueResourceRepository"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/#functions","title":"Functions","text":"Name Summary characters [jvm]open fun characters(ch: Array&lt;Char&gt;, start: Int, length: Int) declaration [jvm]open fun declaration(version: String, encoding: String, standalone: String) endDocument [jvm]open fun endDocument() endElement [jvm]open fun endElement(uri: String, localName: String, qName: String) endPrefixMapping [jvm]open fun endPrefixMapping(prefix: String) error [jvm]open fun error(e: SAXParseException) fatalError [jvm]open fun fatalError(e: SAXParseException) ignorableWhitespace [jvm]open fun ignorableWhitespace(ch: Array&lt;Char&gt;, start: Int, length: Int) notationDecl [jvm]open fun notationDecl(name: String, publicId: String, systemId: String) processingInstruction [jvm]open fun processingInstruction(target: String, data: String) resolveEntity [jvm]open fun resolveEntity(publicId: String, systemId: String): InputSource setDocumentLocator [jvm]open fun setDocumentLocator(locator: Locator) skippedEntity [jvm]open fun skippedEntity(name: String) startDocument [jvm]open fun startDocument() startElement [jvm]open fun startElement(uri: String, localName: String, qName: String, attributes: Attributes) startPrefixMapping [jvm]open fun startPrefixMapping(prefix: String, uri: String) unparsedEntityDecl [jvm]open fun unparsedEntityDecl(name: String, publicId: String, systemId: String, notationName: String) warning [jvm]open fun warning(e: SAXParseException)"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/-value-resource-parser/","title":"ValueResourceParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ValueResourceParser/ValueResourceParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/-value-resource-parser/#valueresourceparser","title":"ValueResourceParser","text":"<p>[jvm]\\ constructor(repository: ValueResourceParser.IValueResourceRepository, isFramework: Boolean, libraryName: String)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/characters/","title":"characters - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ValueResourceParser/characters</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/characters/#characters","title":"characters","text":"<p>[jvm]\\ open fun characters(ch: Array&lt;Char&gt;, start: Int, length: Int)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/end-element/","title":"endElement - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ValueResourceParser/endElement</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/end-element/#endelement","title":"endElement","text":"<p>[jvm]\\ open fun endElement(uri: String, localName: String, qName: String)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/start-element/","title":"startElement - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ValueResourceParser/startElement</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/start-element/#startelement","title":"startElement","text":"<p>[jvm]\\ open fun startElement(uri: String, localName: String, qName: String, attributes: Attributes)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/-i-value-resource-repository/","title":"IValueResourceRepository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ValueResourceParser/IValueResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/-i-value-resource-repository/#ivalueresourcerepository","title":"IValueResourceRepository","text":"<p>interface IValueResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/-i-value-resource-repository/#inheritors","title":"Inheritors","text":"MultiResourceFile IdGeneratingResourceFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/-i-value-resource-repository/#functions","title":"Functions","text":"Name Summary addResourceValue [jvm]abstract fun addResourceValue(value: ResourceValue)"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/-i-value-resource-repository/add-resource-value/","title":"addResourceValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/ValueResourceParser/IValueResourceRepository/addResourceValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.ide.common.resources.deprecated/-value-resource-parser/-i-value-resource-repository/add-resource-value/#addresourcevalue","title":"addResourceValue","text":"<p>[jvm]\\ abstract fun addResourceValue(value: ResourceValue)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/","title":"Package-level declarations - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/#types","title":"Types","text":"Name Summary FileWrapper [jvm]open class FileWrapper : File, IAbstractFileAn implementation of IAbstractFile extending File. FolderWrapper [jvm]open class FolderWrapper : File, IAbstractFolderAn implementation of IAbstractFolder extending File. IAbstractFile [jvm]interface IAbstractFile : IAbstractResourceA file. IAbstractFolder [jvm]interface IAbstractFolder : IAbstractResourceA folder. IAbstractResource [jvm]interface IAbstractResourceBase representation of a file system resource. StreamException [jvm]open class StreamException : ExceptionException thrown when getContents fails."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/","title":"FileWrapper - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FileWrapper</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/#filewrapper","title":"FileWrapper","text":"<p>[jvm]\\ open class FileWrapper : File, IAbstractFile</p> <p>An implementation of IAbstractFile extending File.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/#constructors","title":"Constructors","text":"FileWrapper [jvm]constructor(file: File)Creates a new File instance matching a given File object.constructor(parent: File, child: String)Creates a new File instance from a parent abstract pathname and a child pathname string.constructor(osPathname: String)Creates a new File instance by converting the given pathname string into an abstract pathname.constructor(parent: String, child: String)Creates a new File instance from a parent abstract pathname and a child pathname string.constructor(uri: URI)Creates a new File instance by converting the given <code>file:</code> URI into an abstract pathname."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/#properties","title":"Properties","text":"Name Summary path [jvm]val path: String pathSeparator [jvm]val pathSeparator: String pathSeparatorChar [jvm]val pathSeparatorChar: Char separator [jvm]val separator: String separatorChar [jvm]val separatorChar: Char"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/#functions","title":"Functions","text":"Name Summary canExecute [jvm]open fun canExecute(): Boolean canRead [jvm]open fun canRead(): Boolean canWrite [jvm]open fun canWrite(): Boolean compareTo [jvm]open fun compareTo(pathname: File): Int createNewFile [jvm]open fun createNewFile(): Boolean createTempFile [jvm]open fun createTempFile(prefix: String, suffix: String, directory: File): File delete [jvm]abstract fun delete(): BooleanDeletes the resource.[jvm]open fun delete(): Boolean deleteOnExit [jvm]open fun deleteOnExit() equals [jvm]open fun equals(obj: Any): Boolean exists [jvm]open fun exists(): Boolean getAbsoluteFile [jvm]open fun getAbsoluteFile(): File getAbsolutePath [jvm]open fun getAbsolutePath(): String getCanonicalFile [jvm]open fun getCanonicalFile(): File getCanonicalPath [jvm]open fun getCanonicalPath(): String getContents [jvm]open fun getContents(): InputStreamReturns an InputStream object on the file content. getFreeSpace [jvm]open fun getFreeSpace(): Long getModificationStamp [jvm]open fun getModificationStamp(): LongReturns the last modification timestamp getName [jvm]abstract fun getName(): StringReturns the name of the resource.[jvm]open fun getName(): String getOsLocation [jvm]open fun getOsLocation(): StringReturns the OS path of the folder location (may be absolute). getOutputStream [jvm]open fun getOutputStream(): OutputStreamReturns an OutputStream to write into the file. getParent [jvm]open fun getParent(): String getParentFile [jvm]open fun getParentFile(): File getParentFolder [jvm]open fun getParentFolder(): IAbstractFolderReturns the parent folder or null if there is no parent. getPreferredWriteMode [jvm]open fun getPreferredWriteMode(): IAbstractFile.PreferredWriteModeReturns the preferred mode to write into the file. getTotalSpace [jvm]open fun getTotalSpace(): Long getUsableSpace [jvm]open fun getUsableSpace(): Long hashCode [jvm]open fun hashCode(): Int isAbsolute [jvm]open fun isAbsolute(): Boolean isDirectory [jvm]open fun isDirectory(): Boolean isFile [jvm]open fun isFile(): Boolean isHidden [jvm]open fun isHidden(): Boolean lastModified [jvm]open fun lastModified(): Long length [jvm]open fun length(): Long list [jvm]open fun list(): Array&lt;String&gt; listFiles [jvm]open fun listFiles(): Array&lt;File&gt; listRoots [jvm]open fun listRoots(): Array&lt;File&gt; mkdir [jvm]open fun mkdir(): Boolean mkdirs [jvm]open fun mkdirs(): Boolean renameTo [jvm]open fun renameTo(dest: File): Boolean setContents [jvm]open fun setContents(source: InputStream)Sets the content of the file. setExecutable [jvm]open fun setExecutable(executable: Boolean, ownerOnly: Boolean): Boolean setLastModified [jvm]open fun setLastModified(time: Long): Boolean setReadable [jvm]open fun setReadable(readable: Boolean, ownerOnly: Boolean): Boolean setReadOnly [jvm]open fun setReadOnly(): Boolean setWritable [jvm]open fun setWritable(writable: Boolean, ownerOnly: Boolean): Boolean toPath [jvm]open fun toPath(): Path toString [jvm]open fun toString(): String toURI [jvm]open fun toURI(): URI toURL [jvm]open fun toURL(): URL"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/-file-wrapper/","title":"FileWrapper - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FileWrapper/FileWrapper</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/-file-wrapper/#filewrapper","title":"FileWrapper","text":"<p>[jvm]\\ constructor(file: File)</p> <p>Creates a new File instance matching a given File object.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/-file-wrapper/#parameters","title":"Parameters","text":"<p>jvm</p> file the file to match <p>[jvm]\\ constructor(parent: File, child: String)</p> <p>Creates a new File instance from a parent abstract pathname and a child pathname string.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/-file-wrapper/#parameters_1","title":"Parameters","text":"<p>jvm</p> parent the parent pathname child the child name"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/-file-wrapper/#see-also","title":"See also","text":"File <p>[jvm]\\ constructor(osPathname: String)</p> <p>Creates a new File instance by converting the given pathname string into an abstract pathname.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/-file-wrapper/#parameters_2","title":"Parameters","text":"<p>jvm</p> osPathname the OS pathname"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/-file-wrapper/#see-also_1","title":"See also","text":"File <p>[jvm]\\ constructor(parent: String, child: String)</p> <p>Creates a new File instance from a parent abstract pathname and a child pathname string.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/-file-wrapper/#parameters_3","title":"Parameters","text":"<p>jvm</p> parent the parent pathname child the child name"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/-file-wrapper/#see-also_2","title":"See also","text":"File <p>[jvm]\\ constructor(uri: URI)</p> <p>Creates a new File instance by converting the given <code>file:</code> URI into an abstract pathname.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/-file-wrapper/#parameters_4","title":"Parameters","text":"<p>jvm</p> uri An absolute, hierarchical URI with a scheme equal to \"file\", a non-empty path component, and undefined authority, query, and fragment components"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/-file-wrapper/#see-also_3","title":"See also","text":"File"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/exists/","title":"exists - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FileWrapper/exists</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/exists/#exists","title":"exists","text":"<p>[jvm]\\ open fun exists(): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/get-contents/","title":"getContents - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FileWrapper/getContents</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/get-contents/#getcontents","title":"getContents","text":"<p>[jvm]\\ open fun getContents(): InputStream</p> <p>Returns an InputStream object on the file content. The stream must be closed by the caller.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/get-contents/#throws","title":"Throws","text":"StreamException"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/get-modification-stamp/","title":"getModificationStamp - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FileWrapper/getModificationStamp</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/get-modification-stamp/#getmodificationstamp","title":"getModificationStamp","text":"<p>[jvm]\\ open fun getModificationStamp(): Long</p> <p>Returns the last modification timestamp</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/get-os-location/","title":"getOsLocation - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FileWrapper/getOsLocation</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/get-os-location/#getoslocation","title":"getOsLocation","text":"<p>[jvm]\\ open fun getOsLocation(): String</p> <p>Returns the OS path of the folder location (may be absolute).</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/get-output-stream/","title":"getOutputStream - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FileWrapper/getOutputStream</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/get-output-stream/#getoutputstream","title":"getOutputStream","text":"<p>[jvm]\\ open fun getOutputStream(): OutputStream</p> <p>Returns an OutputStream to write into the file.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/get-output-stream/#throws","title":"Throws","text":"StreamException"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/get-parent-folder/","title":"getParentFolder - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FileWrapper/getParentFolder</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/get-parent-folder/#getparentfolder","title":"getParentFolder","text":"<p>[jvm]\\ open fun getParentFolder(): IAbstractFolder</p> <p>Returns the parent folder or null if there is no parent.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/get-preferred-write-mode/","title":"getPreferredWriteMode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FileWrapper/getPreferredWriteMode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/get-preferred-write-mode/#getpreferredwritemode","title":"getPreferredWriteMode","text":"<p>[jvm]\\ open fun getPreferredWriteMode(): IAbstractFile.PreferredWriteMode</p> <p>Returns the preferred mode to write into the file.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/set-contents/","title":"setContents - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FileWrapper/setContents</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/set-contents/#setcontents","title":"setContents","text":"<p>[jvm]\\ open fun setContents(source: InputStream)</p> <p>Sets the content of the file.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/set-contents/#parameters","title":"Parameters","text":"<p>jvm</p> source the content"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-file-wrapper/set-contents/#throws","title":"Throws","text":"StreamException"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/","title":"FolderWrapper - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FolderWrapper</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/#folderwrapper","title":"FolderWrapper","text":"<p>[jvm]\\ open class FolderWrapper : File, IAbstractFolder</p> <p>An implementation of IAbstractFolder extending File.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/#constructors","title":"Constructors","text":"FolderWrapper [jvm]constructor(parent: File, child: String)Creates a new File instance from a parent abstract pathname and a child pathname string.constructor(pathname: String)Creates a new File instance by converting the given pathname string into an abstract pathname.constructor(parent: String, child: String)Creates a new File instance from a parent abstract pathname and a child pathname string.constructor(uri: URI)Creates a new File instance by converting the given <code>file:</code> URI into an abstract pathname.constructor(file: File)Creates a new File instance matching a give File object."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/#properties","title":"Properties","text":"Name Summary path [jvm]val path: String pathSeparator [jvm]val pathSeparator: String pathSeparatorChar [jvm]val pathSeparatorChar: Char separator [jvm]val separator: String separatorChar [jvm]val separatorChar: Char"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/#functions","title":"Functions","text":"Name Summary canExecute [jvm]open fun canExecute(): Boolean canRead [jvm]open fun canRead(): Boolean canWrite [jvm]open fun canWrite(): Boolean compareTo [jvm]open fun compareTo(pathname: File): Int createNewFile [jvm]open fun createNewFile(): Boolean createTempFile [jvm]open fun createTempFile(prefix: String, suffix: String, directory: File): File delete [jvm]abstract fun delete(): BooleanDeletes the resource.[jvm]open fun delete(): Boolean deleteOnExit [jvm]open fun deleteOnExit() equals [jvm]open fun equals(obj: Any): Boolean exists [jvm]open fun exists(): Boolean getAbsoluteFile [jvm]open fun getAbsoluteFile(): File getAbsolutePath [jvm]open fun getAbsolutePath(): String getCanonicalFile [jvm]open fun getCanonicalFile(): File getCanonicalPath [jvm]open fun getCanonicalPath(): String getFile [jvm]open fun getFile(name: String): IAbstractFileReturns an IAbstractFile representing a child of the current folder with the given name. getFolder [jvm]open fun getFolder(name: String): IAbstractFolderReturns an IAbstractFolder representing a child of the current folder with the given name. getFreeSpace [jvm]open fun getFreeSpace(): Long getName [jvm]abstract fun getName(): StringReturns the name of the resource.[jvm]open fun getName(): String getOsLocation [jvm]open fun getOsLocation(): StringReturns the OS path of the folder location (may be absolute). getParent [jvm]open fun getParent(): String getParentFile [jvm]open fun getParentFile(): File getParentFolder [jvm]open fun getParentFolder(): IAbstractFolderReturns the parent folder or null if there is no parent. getTotalSpace [jvm]open fun getTotalSpace(): Long getUsableSpace [jvm]open fun getUsableSpace(): Long hasFile [jvm]open fun hasFile(name: String): BooleanReturns true if the receiver contains a file with a given name hashCode [jvm]open fun hashCode(): Int isAbsolute [jvm]open fun isAbsolute(): Boolean isDirectory [jvm]open fun isDirectory(): Boolean isFile [jvm]open fun isFile(): Boolean isHidden [jvm]open fun isHidden(): Boolean lastModified [jvm]open fun lastModified(): Long length [jvm]open fun length(): Long list [jvm]open fun list(filter: IAbstractFolder.FilenameFilter): Array&lt;String&gt;Returns a list of all existing file and directory members in this folder that satisfy the specified filter.[jvm]open fun list(): Array&lt;String&gt; listFiles [jvm]open fun listFiles(): Array&lt;File&gt; listMembers [jvm]open fun listMembers(): Array&lt;IAbstractResource&gt;Returns a list of all existing file and directory members in this folder. listRoots [jvm]open fun listRoots(): Array&lt;File&gt; mkdir [jvm]open fun mkdir(): Boolean mkdirs [jvm]open fun mkdirs(): Boolean renameTo [jvm]open fun renameTo(dest: File): Boolean setExecutable [jvm]open fun setExecutable(executable: Boolean, ownerOnly: Boolean): Boolean setLastModified [jvm]open fun setLastModified(time: Long): Boolean setReadable [jvm]open fun setReadable(readable: Boolean, ownerOnly: Boolean): Boolean setReadOnly [jvm]open fun setReadOnly(): Boolean setWritable [jvm]open fun setWritable(writable: Boolean, ownerOnly: Boolean): Boolean toPath [jvm]open fun toPath(): Path toString [jvm]open fun toString(): String toURI [jvm]open fun toURI(): URI toURL [jvm]open fun toURL(): URL"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/-folder-wrapper/","title":"FolderWrapper - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FolderWrapper/FolderWrapper</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/-folder-wrapper/#folderwrapper","title":"FolderWrapper","text":"<p>[jvm]\\ constructor(parent: File, child: String)</p> <p>Creates a new File instance from a parent abstract pathname and a child pathname string.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/-folder-wrapper/#parameters","title":"Parameters","text":"<p>jvm</p> parent the parent pathname child the child name"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/-folder-wrapper/#see-also","title":"See also","text":"File <p>[jvm]\\ constructor(pathname: String)</p> <p>Creates a new File instance by converting the given pathname string into an abstract pathname.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/-folder-wrapper/#parameters_1","title":"Parameters","text":"<p>jvm</p> pathname the pathname"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/-folder-wrapper/#see-also_1","title":"See also","text":"File <p>[jvm]\\ constructor(parent: String, child: String)</p> <p>Creates a new File instance from a parent abstract pathname and a child pathname string.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/-folder-wrapper/#parameters_2","title":"Parameters","text":"<p>jvm</p> parent the parent pathname child the child name"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/-folder-wrapper/#see-also_2","title":"See also","text":"File <p>[jvm]\\ constructor(uri: URI)</p> <p>Creates a new File instance by converting the given <code>file:</code> URI into an abstract pathname.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/-folder-wrapper/#parameters_3","title":"Parameters","text":"<p>jvm</p> uri An absolute, hierarchical URI with a scheme equal to \"file\", a non-empty path component, and undefined authority, query, and fragment components"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/-folder-wrapper/#see-also_3","title":"See also","text":"File <p>[jvm]\\ constructor(file: File)</p> <p>Creates a new File instance matching a give File object.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/-folder-wrapper/#parameters_4","title":"Parameters","text":"<p>jvm</p> file the file to match"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/exists/","title":"exists - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FolderWrapper/exists</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/exists/#exists","title":"exists","text":"<p>[jvm]\\ open fun exists(): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/get-file/","title":"getFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FolderWrapper/getFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/get-file/#getfile","title":"getFile","text":"<p>[jvm]\\ open fun getFile(name: String): IAbstractFile</p> <p>Returns an IAbstractFile representing a child of the current folder with the given name. The file may not actually exist.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/get-file/#parameters","title":"Parameters","text":"<p>jvm</p> name the name of the file."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/get-folder/","title":"getFolder - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FolderWrapper/getFolder</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/get-folder/#getfolder","title":"getFolder","text":"<p>[jvm]\\ open fun getFolder(name: String): IAbstractFolder</p> <p>Returns an IAbstractFolder representing a child of the current folder with the given name. The folder may not actually exist.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/get-folder/#parameters","title":"Parameters","text":"<p>jvm</p> name the name of the folder."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/get-os-location/","title":"getOsLocation - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FolderWrapper/getOsLocation</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/get-os-location/#getoslocation","title":"getOsLocation","text":"<p>[jvm]\\ open fun getOsLocation(): String</p> <p>Returns the OS path of the folder location (may be absolute).</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/get-parent-folder/","title":"getParentFolder - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FolderWrapper/getParentFolder</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/get-parent-folder/#getparentfolder","title":"getParentFolder","text":"<p>[jvm]\\ open fun getParentFolder(): IAbstractFolder</p> <p>Returns the parent folder or null if there is no parent.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/has-file/","title":"hasFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FolderWrapper/hasFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/has-file/#hasfile","title":"hasFile","text":"<p>[jvm]\\ open fun hasFile(name: String): Boolean</p> <p>Returns true if the receiver contains a file with a given name</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/has-file/#parameters","title":"Parameters","text":"<p>jvm</p> name the name of the file. This is the name without the path leading to the parent folder."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/list-members/","title":"listMembers - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FolderWrapper/listMembers</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/list-members/#listmembers","title":"listMembers","text":"<p>[jvm]\\ open fun listMembers(): Array&lt;IAbstractResource&gt;</p> <p>Returns a list of all existing file and directory members in this folder. The returned array can be empty but is never null.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/list/","title":"list - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/FolderWrapper/list</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/list/#list","title":"list","text":"<p>[jvm]\\ open fun list(filter: IAbstractFolder.FilenameFilter): Array&lt;String&gt;</p> <p>Returns a list of all existing file and directory members in this folder that satisfy the specified filter.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/list/#return","title":"Return","text":"<p>An array of file names (generated using getName). The array can be empty but is never null.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-folder-wrapper/list/#parameters","title":"Parameters","text":"<p>jvm</p> filter A filename filter instance. Must not be null."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/","title":"IAbstractFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/#iabstractfile","title":"IAbstractFile","text":"<p>interface IAbstractFile : IAbstractResource</p> <p>A file.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/#inheritors","title":"Inheritors","text":"FileWrapper"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/#types","title":"Types","text":"Name Summary PreferredWriteMode [jvm]enum PreferredWriteMode"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/#functions","title":"Functions","text":"Name Summary delete [jvm]abstract fun delete(): BooleanDeletes the resource. exists [jvm]abstract fun exists(): BooleanReturns whether the resource actually exists. getContents [jvm]abstract fun getContents(): InputStreamReturns an InputStream object on the file content. getModificationStamp [jvm]abstract fun getModificationStamp(): LongReturns the last modification timestamp getName [jvm]abstract fun getName(): StringReturns the name of the resource. getOsLocation [jvm]abstract fun getOsLocation(): StringReturns the OS path of the folder location (may be absolute). getOutputStream [jvm]abstract fun getOutputStream(): OutputStreamReturns an OutputStream to write into the file. getParentFolder [jvm]abstract fun getParentFolder(): IAbstractFolderReturns the parent folder or null if there is no parent. getPath [jvm]abstract fun getPath(): StringReturns the path of the resource. getPreferredWriteMode [jvm]abstract fun getPreferredWriteMode(): IAbstractFile.PreferredWriteModeReturns the preferred mode to write into the file. setContents [jvm]abstract fun setContents(source: InputStream)Sets the content of the file."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/get-contents/","title":"getContents - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFile/getContents</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/get-contents/#getcontents","title":"getContents","text":"<p>[jvm]\\ abstract fun getContents(): InputStream</p> <p>Returns an InputStream object on the file content. The stream must be closed by the caller.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/get-contents/#throws","title":"Throws","text":"StreamException"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/get-modification-stamp/","title":"getModificationStamp - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFile/getModificationStamp</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/get-modification-stamp/#getmodificationstamp","title":"getModificationStamp","text":"<p>[jvm]\\ abstract fun getModificationStamp(): Long</p> <p>Returns the last modification timestamp</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/get-output-stream/","title":"getOutputStream - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFile/getOutputStream</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/get-output-stream/#getoutputstream","title":"getOutputStream","text":"<p>[jvm]\\ abstract fun getOutputStream(): OutputStream</p> <p>Returns an OutputStream to write into the file.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/get-output-stream/#throws","title":"Throws","text":"StreamException"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/get-preferred-write-mode/","title":"getPreferredWriteMode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFile/getPreferredWriteMode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/get-preferred-write-mode/#getpreferredwritemode","title":"getPreferredWriteMode","text":"<p>[jvm]\\ abstract fun getPreferredWriteMode(): IAbstractFile.PreferredWriteMode</p> <p>Returns the preferred mode to write into the file.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/set-contents/","title":"setContents - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFile/setContents</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/set-contents/#setcontents","title":"setContents","text":"<p>[jvm]\\ abstract fun setContents(source: InputStream)</p> <p>Sets the content of the file.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/set-contents/#parameters","title":"Parameters","text":"<p>jvm</p> source the content"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/set-contents/#throws","title":"Throws","text":"StreamException"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/","title":"PreferredWriteMode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFile/PreferredWriteMode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/#preferredwritemode","title":"PreferredWriteMode","text":"<p>[jvm]\\ enum PreferredWriteMode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/#entries","title":"Entries","text":"INPUTSTREAM [jvm]INPUTSTREAM OUTPUTSTREAM [jvm]OUTPUTSTREAM"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/#functions","title":"Functions","text":"Name Summary valueOf [jvm]open fun valueOf(name: String): IAbstractFile.PreferredWriteModeReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [jvm]open fun values(): Array&lt;IAbstractFile.PreferredWriteMode&gt;Returns an array containing the constants of this enum type, in the order they\u2019re declared. This method may be used to iterate over the constants."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/value-of/","title":"valueOf - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFile/PreferredWriteMode/valueOf</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/value-of/#valueof","title":"valueOf","text":"<p>[jvm]\\ open fun valueOf(name: String): IAbstractFile.PreferredWriteMode</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/value-of/#return","title":"Return","text":"<p>the enum constant with the specified name</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/values/","title":"values - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFile/PreferredWriteMode/values</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/values/#values","title":"values","text":"<p>[jvm]\\ open fun values(): Array&lt;IAbstractFile.PreferredWriteMode&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they\u2019re declared. This method may be used to iterate over the constants.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/values/#return","title":"Return","text":"<p>an array containing the constants of this enum type, in the order they\u2019re declared</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/-i-n-p-u-t-s-t-r-e-a-m/","title":"INPUTSTREAM - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFile/PreferredWriteMode/INPUTSTREAM</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/-i-n-p-u-t-s-t-r-e-a-m/#inputstream","title":"INPUTSTREAM","text":"<p>[jvm]\\ INPUTSTREAM</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/-o-u-t-p-u-t-s-t-r-e-a-m/","title":"OUTPUTSTREAM - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFile/PreferredWriteMode/OUTPUTSTREAM</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-file/-preferred-write-mode/-o-u-t-p-u-t-s-t-r-e-a-m/#outputstream","title":"OUTPUTSTREAM","text":"<p>[jvm]\\ OUTPUTSTREAM</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/","title":"IAbstractFolder - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFolder</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/#iabstractfolder","title":"IAbstractFolder","text":"<p>interface IAbstractFolder : IAbstractResource</p> <p>A folder.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/#inheritors","title":"Inheritors","text":"FolderWrapper"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/#types","title":"Types","text":"Name Summary FilenameFilter [jvm]interface FilenameFilterInstances of classes that implement this interface are used to filter filenames."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/#functions","title":"Functions","text":"Name Summary delete [jvm]abstract fun delete(): BooleanDeletes the resource. exists [jvm]abstract fun exists(): BooleanReturns whether the resource actually exists. getFile [jvm]abstract fun getFile(name: String): IAbstractFileReturns an IAbstractFile representing a child of the current folder with the given name. getFolder [jvm]abstract fun getFolder(name: String): IAbstractFolderReturns an IAbstractFolder representing a child of the current folder with the given name. getName [jvm]abstract fun getName(): StringReturns the name of the resource. getOsLocation [jvm]abstract fun getOsLocation(): StringReturns the OS path of the folder location (may be absolute). getParentFolder [jvm]abstract fun getParentFolder(): IAbstractFolderReturns the parent folder or null if there is no parent. getPath [jvm]abstract fun getPath(): StringReturns the path of the resource. hasFile [jvm]abstract fun hasFile(name: String): BooleanReturns true if the receiver contains a file with a given name list [jvm]abstract fun list(filter: IAbstractFolder.FilenameFilter): Array&lt;String&gt;Returns a list of all existing file and directory members in this folder that satisfy the specified filter. listMembers [jvm]abstract fun listMembers(): Array&lt;IAbstractResource&gt;Returns a list of all existing file and directory members in this folder."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/get-file/","title":"getFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFolder/getFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/get-file/#getfile","title":"getFile","text":"<p>[jvm]\\ abstract fun getFile(name: String): IAbstractFile</p> <p>Returns an IAbstractFile representing a child of the current folder with the given name. The file may not actually exist.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/get-file/#parameters","title":"Parameters","text":"<p>jvm</p> name the name of the file."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/get-folder/","title":"getFolder - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFolder/getFolder</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/get-folder/#getfolder","title":"getFolder","text":"<p>[jvm]\\ abstract fun getFolder(name: String): IAbstractFolder</p> <p>Returns an IAbstractFolder representing a child of the current folder with the given name. The folder may not actually exist.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/get-folder/#parameters","title":"Parameters","text":"<p>jvm</p> name the name of the folder."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/has-file/","title":"hasFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFolder/hasFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/has-file/#hasfile","title":"hasFile","text":"<p>[jvm]\\ abstract fun hasFile(name: String): Boolean</p> <p>Returns true if the receiver contains a file with a given name</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/has-file/#parameters","title":"Parameters","text":"<p>jvm</p> name the name of the file. This is the name without the path leading to the parent folder."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/list-members/","title":"listMembers - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFolder/listMembers</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/list-members/#listmembers","title":"listMembers","text":"<p>[jvm]\\ abstract fun listMembers(): Array&lt;IAbstractResource&gt;</p> <p>Returns a list of all existing file and directory members in this folder. The returned array can be empty but is never null.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/list/","title":"list - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFolder/list</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/list/#list","title":"list","text":"<p>[jvm]\\ abstract fun list(filter: IAbstractFolder.FilenameFilter): Array&lt;String&gt;</p> <p>Returns a list of all existing file and directory members in this folder that satisfy the specified filter.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/list/#return","title":"Return","text":"<p>An array of file names (generated using getName). The array can be empty but is never null.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/list/#parameters","title":"Parameters","text":"<p>jvm</p> filter A filename filter instance. Must not be null."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/-filename-filter/","title":"FilenameFilter - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFolder/FilenameFilter</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/-filename-filter/#filenamefilter","title":"FilenameFilter","text":"<p>[jvm]\\ interface FilenameFilter</p> <p>Instances of classes that implement this interface are used to filter filenames.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/-filename-filter/#functions","title":"Functions","text":"Name Summary accept [jvm]abstract fun accept(dir: IAbstractFolder, name: String): BooleanTests if a specified file should be included in a file list."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/-filename-filter/accept/","title":"accept - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractFolder/FilenameFilter/accept</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/-filename-filter/accept/#accept","title":"accept","text":"<p>[jvm]\\ abstract fun accept(dir: IAbstractFolder, name: String): Boolean</p> <p>Tests if a specified file should be included in a file list.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/-filename-filter/accept/#return","title":"Return","text":"<p><code>true</code> if and only if the name should be included in the file list; <code>false</code> otherwise.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-folder/-filename-filter/accept/#parameters","title":"Parameters","text":"<p>jvm</p> dir the directory in which the file was found. name the name of the file."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/","title":"IAbstractResource - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractResource</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/#iabstractresource","title":"IAbstractResource","text":"<p>interface IAbstractResource</p> <p>Base representation of a file system resource. </p> <p>This somewhat limited interface is designed to let classes use file-system resources, without having the manually handle either the standard Java file or the Eclipse file API..</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/#inheritors","title":"Inheritors","text":"IAbstractFolder IAbstractFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/#functions","title":"Functions","text":"Name Summary delete [jvm]abstract fun delete(): BooleanDeletes the resource. exists [jvm]abstract fun exists(): BooleanReturns whether the resource actually exists. getName [jvm]abstract fun getName(): StringReturns the name of the resource. getOsLocation [jvm]abstract fun getOsLocation(): StringReturns the OS path of the folder location (may be absolute). getParentFolder [jvm]abstract fun getParentFolder(): IAbstractFolderReturns the parent folder or null if there is no parent. getPath [jvm]abstract fun getPath(): StringReturns the path of the resource."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/delete/","title":"delete - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractResource/delete</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/delete/#delete","title":"delete","text":"<p>[jvm]\\ abstract fun delete(): Boolean</p> <p>Deletes the resource.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/exists/","title":"exists - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractResource/exists</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/exists/#exists","title":"exists","text":"<p>[jvm]\\ abstract fun exists(): Boolean</p> <p>Returns whether the resource actually exists.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/get-name/","title":"getName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractResource/getName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/get-name/#getname","title":"getName","text":"<p>[jvm]\\ abstract fun getName(): String</p> <p>Returns the name of the resource.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/get-os-location/","title":"getOsLocation - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractResource/getOsLocation</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/get-os-location/#getoslocation","title":"getOsLocation","text":"<p>[jvm]\\ abstract fun getOsLocation(): String</p> <p>Returns the OS path of the folder location (may be absolute).</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/get-parent-folder/","title":"getParentFolder - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractResource/getParentFolder</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/get-parent-folder/#getparentfolder","title":"getParentFolder","text":"<p>[jvm]\\ abstract fun getParentFolder(): IAbstractFolder</p> <p>Returns the parent folder or null if there is no parent.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/get-path/","title":"getPath - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/IAbstractResource/getPath</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-i-abstract-resource/get-path/#getpath","title":"getPath","text":"<p>[jvm]\\ abstract fun getPath(): String</p> <p>Returns the path of the resource.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/","title":"StreamException - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/StreamException</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/#streamexception","title":"StreamException","text":"<p>[jvm]\\ open class StreamException : Exception</p> <p>Exception thrown when getContents fails.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/#constructors","title":"Constructors","text":"StreamException [jvm]constructor(e: Exception, file: IAbstractFile)constructor(e: Exception, file: IAbstractFile, error: StreamException.Error)"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/#types","title":"Types","text":"Name Summary Error [jvm]enum Error"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/#properties","title":"Properties","text":"Name Summary cause [jvm]open val cause: Throwable stackTrace [jvm]open var stackTrace: Array&lt;StackTraceElement&gt;"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/#functions","title":"Functions","text":"Name Summary addSuppressed [jvm]fun addSuppressed(exception: Throwable) fillInStackTrace [jvm]open fun fillInStackTrace(): Throwable getError [jvm]open fun getError(): StreamException.Error getFile [jvm]open fun getFile(): IAbstractFile getLocalizedMessage [jvm]open fun getLocalizedMessage(): String getMessage [jvm]open fun getMessage(): String getSuppressed [jvm]fun getSuppressed(): Array&lt;Throwable&gt; initCause [jvm]open fun initCause(cause: Throwable): Throwable printStackTrace [jvm]open fun printStackTrace() toString [jvm]open fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-stream-exception/","title":"StreamException - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/StreamException/StreamException</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-stream-exception/#streamexception","title":"StreamException","text":"<p>[jvm]\\ constructor(e: Exception, file: IAbstractFile)</p> <p>constructor(e: Exception, file: IAbstractFile, error: StreamException.Error)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/get-error/","title":"getError - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/StreamException/getError</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/get-error/#geterror","title":"getError","text":"<p>[jvm]\\ open fun getError(): StreamException.Error</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/get-file/","title":"getFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/StreamException/getFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/get-file/#getfile","title":"getFile","text":"<p>[jvm]\\ open fun getFile(): IAbstractFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/","title":"Error - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/StreamException/Error</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/#error","title":"Error","text":"<p>[jvm]\\ enum Error</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/#entries","title":"Entries","text":"DEFAULT [jvm]DEFAULT OUTOFSYNC [jvm]OUTOFSYNC FILENOTFOUND [jvm]FILENOTFOUND"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/#functions","title":"Functions","text":"Name Summary valueOf [jvm]open fun valueOf(name: String): StreamException.ErrorReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [jvm]open fun values(): Array&lt;StreamException.Error&gt;Returns an array containing the constants of this enum type, in the order they\u2019re declared. This method may be used to iterate over the constants."},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/value-of/","title":"valueOf - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/StreamException/Error/valueOf</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/value-of/#valueof","title":"valueOf","text":"<p>[jvm]\\ open fun valueOf(name: String): StreamException.Error</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/value-of/#return","title":"Return","text":"<p>the enum constant with the specified name</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/values/","title":"values - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/StreamException/Error/values</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/values/#values","title":"values","text":"<p>[jvm]\\ open fun values(): Array&lt;StreamException.Error&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they\u2019re declared. This method may be used to iterate over the constants.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/values/#return","title":"Return","text":"<p>an array containing the constants of this enum type, in the order they\u2019re declared</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/-d-e-f-a-u-l-t/","title":"DEFAULT - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/StreamException/Error/DEFAULT</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/-d-e-f-a-u-l-t/#default","title":"DEFAULT","text":"<p>[jvm]\\ DEFAULT</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/-f-i-l-e-n-o-t-f-o-u-n-d/","title":"FILENOTFOUND - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/StreamException/Error/FILENOTFOUND</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/-f-i-l-e-n-o-t-f-o-u-n-d/#filenotfound","title":"FILENOTFOUND","text":"<p>[jvm]\\ FILENOTFOUND</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/-o-u-t-o-f-s-y-n-c/","title":"OUTOFSYNC - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.deprecated.com.android.io/StreamException/Error/OUTOFSYNC</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.deprecated.com.android.io/-stream-exception/-error/-o-u-t-o-f-s-y-n-c/#outofsync","title":"OUTOFSYNC","text":"<p>[jvm]\\ OUTOFSYNC</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/","title":"Package-level declarations - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/#types","title":"Types","text":"Name Summary ComposeViewAdapter [jvm]class ComposeViewAdapter(context: Context, attrs: AttributeSet) : FrameLayoutPorted from: https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:compose/ui/ui-tooling/src/androidMain/kotlin/androidx/compose/ui/tooling/ComposeViewAdapter.kt?q=ComposeViewAdapter ResourceRepositoryBridge [jvm]interface ResourceRepositoryBridge"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-compose-view-adapter/","title":"ComposeViewAdapter - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal/ComposeViewAdapter</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-compose-view-adapter/#composeviewadapter","title":"ComposeViewAdapter","text":"<p>[jvm]\\ class ComposeViewAdapter(context: Context, attrs: AttributeSet) : FrameLayout</p> <p>Ported from: https://cs.android.com/androidx/platform/frameworks/support/+/androidx-main:compose/ui/ui-tooling/src/androidMain/kotlin/androidx/compose/ui/tooling/ComposeViewAdapter.kt?q=ComposeViewAdapter</p> <p>A wrapper layout for compose-based layouts which allows android.view.WindowManagerImpl to find a composable root</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-compose-view-adapter/#constructors","title":"Constructors","text":"ComposeViewAdapter [jvm]constructor(context: Context, attrs: AttributeSet)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-compose-view-adapter/#properties","title":"Properties","text":"Name Summary mAttributes [jvm]var mAttributes: Array&lt;String&gt; mCachingFailed [jvm]var mCachingFailed: Boolean mPrivateFlags [jvm]var mPrivateFlags: Int mTransformationInfo [jvm]var mTransformationInfo: View.TransformationInfo"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-compose-view-adapter/#functions","title":"Functions","text":"Name Summary addChildrenForAccessibility [jvm]open override fun addChildrenForAccessibility(p0: ArrayList&lt;View&gt;) addExtraDataToAccessibilityNodeInfo [jvm]open override fun addExtraDataToAccessibilityNodeInfo(p0: AccessibilityNodeInfo, p1: String, p2: Bundle) addFocusables [jvm]open fun addFocusables(p0: ArrayList&lt;View&gt;, p1: Int)open override fun addFocusables(p0: ArrayList&lt;View&gt;, p1: Int, p2: Int) addFrameMetricsListener [jvm]open fun addFrameMetricsListener(p0: Window, p1: Window.OnFrameMetricsAvailableListener, p2: Handler) addKeyboardNavigationClusters [jvm]open override fun addKeyboardNavigationClusters(p0: MutableCollection&lt;View&gt;, p1: Int) addOnAttachStateChangeListener [jvm]open fun addOnAttachStateChangeListener(p0: View.OnAttachStateChangeListener) addOnLayoutChangeListener [jvm]open fun addOnLayoutChangeListener(p0: View.OnLayoutChangeListener) addOnUnhandledKeyEventListener [jvm]open fun addOnUnhandledKeyEventListener(p0: View.OnUnhandledKeyEventListener) addStatesFromChildren [jvm]open fun addStatesFromChildren(): Boolean addTouchables [jvm]open override fun addTouchables(p0: ArrayList&lt;View&gt;) addTransientView [jvm]open fun addTransientView(p0: View, p1: Int) addView [jvm]open fun addView(p0: View)open override fun addView(p0: View, p1: ViewGroup.LayoutParams)open fun addView(p0: View, p1: Int)open fun addView(p0: View, p1: Int, p2: ViewGroup.LayoutParams)open fun addView(p0: View, p1: Int, p2: Int) animate [jvm]open fun animate(): ViewPropertyAnimator announceForAccessibility [jvm]open fun announceForAccessibility(p0: CharSequence) applyDrawableToTransparentRegion [jvm]open fun applyDrawableToTransparentRegion(p0: Drawable, p1: Region) autofill [jvm]open fun autofill(p0: SparseArray&lt;AutofillValue&gt;)open fun autofill(p0: AutofillValue) bringChildToFront [jvm]open override fun bringChildToFront(p0: View) bringToFront [jvm]open fun bringToFront() buildDrawingCache [jvm]open fun ~~buildDrawingCache~~()open fun ~~buildDrawingCache~~(p0: Boolean) buildLayer [jvm]open fun buildLayer() buildTouchDispatchChildList [jvm]open fun buildTouchDispatchChildList(): ArrayList&lt;View&gt; callOnClick [jvm]open fun callOnClick(): Boolean cancelDragAndDrop [jvm]open fun cancelDragAndDrop() cancelLongPress [jvm]open fun cancelLongPress() cancelPendingInputEvents [jvm]open fun cancelPendingInputEvents() canHaveDisplayList [jvm]open fun canHaveDisplayList(): Boolean canNotifyAutofillEnterExitEvent [jvm]open fun canNotifyAutofillEnterExitEvent(): Boolean canResolveLayoutDirection [jvm]open fun canResolveLayoutDirection(): Boolean canResolveTextAlignment [jvm]open fun canResolveTextAlignment(): Boolean canResolveTextDirection [jvm]open fun canResolveTextDirection(): Boolean canScrollHorizontally [jvm]open fun canScrollHorizontally(p0: Int): Boolean canScrollVertically [jvm]open fun canScrollVertically(p0: Int): Boolean captureTransitioningViews [jvm]open override fun captureTransitioningViews(p0: MutableList&lt;View&gt;) checkInputConnectionProxy [jvm]open fun checkInputConnectionProxy(p0: View): Boolean childDrawableStateChanged [jvm]open override fun childDrawableStateChanged(p0: View) childHasTransientStateChanged [jvm]open override fun childHasTransientStateChanged(p0: View, p1: Boolean) clearAccessibilityFocus [jvm]open fun clearAccessibilityFocus() clearAnimation [jvm]open fun clearAnimation() clearChildFocus [jvm]open override fun clearChildFocus(p0: View) clearDisappearingChildren [jvm]open fun clearDisappearingChildren() clearFocus [jvm]open override fun clearFocus() clearTranslationState [jvm]open fun clearTranslationState() clearViewTranslationCallback [jvm]open fun clearViewTranslationCallback() clearViewTranslationResponse [jvm]open fun clearViewTranslationResponse() computeScroll [jvm]open fun computeScroll() computeSystemWindowInsets [jvm]open fun computeSystemWindowInsets(p0: WindowInsets, p1: Rect): WindowInsets createAccessibilityNodeInfo [jvm]open fun createAccessibilityNodeInfo(): AccessibilityNodeInfo createAccessibilityNodeInfoInternal [jvm]open fun createAccessibilityNodeInfoInternal(): AccessibilityNodeInfo createContextMenu [jvm]open fun createContextMenu(p0: ContextMenu) createScrollCaptureCallbackInternal [jvm]open fun createScrollCaptureCallbackInternal(p0: Rect, p1: Point): ScrollCaptureCallback createSnapshot [jvm]open override fun createSnapshot(p0: ViewDebug.CanvasProvider, p1: Boolean): Bitmap debug [jvm]open fun debug() destroyDrawingCache [jvm]open fun ~~destroyDrawingCache~~() dispatchActivityResult [jvm]open override fun dispatchActivityResult(p0: String, p1: Int, p2: Int, p3: Intent): Boolean dispatchApplyWindowInsets [jvm]open override fun dispatchApplyWindowInsets(p0: WindowInsets): WindowInsets dispatchCapturedPointerEvent [jvm]open override fun dispatchCapturedPointerEvent(p0: MotionEvent): Boolean dispatchConfigurationChanged [jvm]open override fun dispatchConfigurationChanged(p0: Configuration) dispatchCreateViewTranslationRequest [jvm]open override fun dispatchCreateViewTranslationRequest(p0: MutableMap&lt;AutofillId, LongArray&gt;, p1: IntArray, p2: TranslationCapability, p3: MutableList&lt;ViewTranslationRequest&gt;) dispatchDisplayHint [jvm]open override fun dispatchDisplayHint(p0: Int) dispatchDragEvent [jvm]open override fun dispatchDragEvent(p0: DragEvent): Boolean dispatchDrawableHotspotChanged [jvm]open override fun dispatchDrawableHotspotChanged(p0: Float, p1: Float) dispatchFinishTemporaryDetach [jvm]open override fun dispatchFinishTemporaryDetach() dispatchGenericMotionEvent [jvm]open fun dispatchGenericMotionEvent(p0: MotionEvent): Boolean dispatchInitialProvideContentCaptureStructure [jvm]open fun dispatchInitialProvideContentCaptureStructure() dispatchKeyEvent [jvm]open override fun dispatchKeyEvent(p0: KeyEvent): Boolean dispatchKeyEventPreIme [jvm]open override fun dispatchKeyEventPreIme(p0: KeyEvent): Boolean dispatchKeyShortcutEvent [jvm]open override fun dispatchKeyShortcutEvent(p0: KeyEvent): Boolean dispatchNestedFling [jvm]open fun dispatchNestedFling(p0: Float, p1: Float, p2: Boolean): Boolean dispatchNestedPreFling [jvm]open fun dispatchNestedPreFling(p0: Float, p1: Float): Boolean dispatchNestedPrePerformAccessibilityAction [jvm]open fun dispatchNestedPrePerformAccessibilityAction(p0: Int, p1: Bundle): Boolean dispatchNestedPreScroll [jvm]open fun dispatchNestedPreScroll(p0: Int, p1: Int, p2: IntArray, p3: IntArray): Boolean dispatchNestedScroll [jvm]open fun dispatchNestedScroll(p0: Int, p1: Int, p2: Int, p3: Int, p4: IntArray): Boolean dispatchPointerCaptureChanged [jvm]open override fun dispatchPointerCaptureChanged(p0: Boolean) dispatchPointerEvent [jvm]open fun dispatchPointerEvent(p0: MotionEvent): Boolean dispatchPopulateAccessibilityEvent [jvm]open fun dispatchPopulateAccessibilityEvent(p0: AccessibilityEvent): Boolean dispatchPopulateAccessibilityEventInternal [jvm]open override fun dispatchPopulateAccessibilityEventInternal(p0: AccessibilityEvent): Boolean dispatchProvideAutofillStructure [jvm]open override fun dispatchProvideAutofillStructure(p0: ViewStructure, p1: Int) dispatchProvideContentCaptureStructure [jvm]open override fun dispatchProvideContentCaptureStructure() dispatchProvideStructure [jvm]open override fun dispatchProvideStructure(p0: ViewStructure) dispatchScrollCaptureSearch [jvm]open override fun dispatchScrollCaptureSearch(p0: Rect, p1: Point, p2: Consumer&lt;ScrollCaptureTarget&gt;) dispatchSetActivated [jvm]open override fun dispatchSetActivated(p0: Boolean) dispatchSetSelected [jvm]open override fun dispatchSetSelected(p0: Boolean) dispatchStartTemporaryDetach [jvm]open override fun dispatchStartTemporaryDetach() dispatchSystemUiVisibilityChanged [jvm]open override fun ~~dispatchSystemUiVisibilityChanged~~(p0: Int) dispatchTouchEvent [jvm]open override fun dispatchTouchEvent(p0: MotionEvent): Boolean dispatchTrackballEvent [jvm]open override fun dispatchTrackballEvent(p0: MotionEvent): Boolean dispatchUnhandledMove [jvm]open override fun dispatchUnhandledMove(p0: View, p1: Int): Boolean dispatchWindowFocusChanged [jvm]open override fun dispatchWindowFocusChanged(p0: Boolean) dispatchWindowInsetsAnimationEnd [jvm]open override fun dispatchWindowInsetsAnimationEnd(p0: WindowInsetsAnimation) dispatchWindowInsetsAnimationPrepare [jvm]open override fun dispatchWindowInsetsAnimationPrepare(p0: WindowInsetsAnimation) dispatchWindowInsetsAnimationProgress [jvm]open override fun dispatchWindowInsetsAnimationProgress(p0: WindowInsets, p1: MutableList&lt;WindowInsetsAnimation&gt;): WindowInsets dispatchWindowInsetsAnimationStart [jvm]open override fun dispatchWindowInsetsAnimationStart(p0: WindowInsetsAnimation, p1: WindowInsetsAnimation.Bounds): WindowInsetsAnimation.Bounds dispatchWindowSystemUiVisiblityChanged [jvm]open override fun ~~dispatchWindowSystemUiVisiblityChanged~~(p0: Int) dispatchWindowVisibilityChanged [jvm]open override fun dispatchWindowVisibilityChanged(p0: Int) draw [jvm]open fun draw(p0: Canvas) draw_Original [jvm]open fun draw_Original(p0: Canvas) drawableHotspotChanged [jvm]open fun drawableHotspotChanged(p0: Float, p1: Float) encode [jvm]open fun encode(p0: ViewHierarchyEncoder) endViewTransition [jvm]open fun endViewTransition(p0: View) findFocus [jvm]open override fun findFocus(): View findNamedViews [jvm]open override fun findNamedViews(p0: MutableMap&lt;String, View&gt;) findOnBackInvokedDispatcher [jvm]open fun findOnBackInvokedDispatcher(): OnBackInvokedDispatcher findOnBackInvokedDispatcherForChild [jvm]open override fun findOnBackInvokedDispatcherForChild(p0: View, p1: View): OnBackInvokedDispatcher findViewByAccessibilityIdTraversal [jvm]open override fun findViewByAccessibilityIdTraversal(p0: Int): View findViewByAutofillIdTraversal [jvm]open override fun findViewByAutofillIdTraversal(p0: Int): View findViewById [jvm]open fun &lt;T : View&gt; findViewById(p0: Int): T findViewByPredicate [jvm]open fun &lt;T : View&gt; findViewByPredicate(p0: Predicate&lt;View&gt;): T findViewByPredicateInsideOut [jvm]open fun &lt;T : View&gt; findViewByPredicateInsideOut(p0: View, p1: Predicate&lt;View&gt;): T findViewsWithText [jvm]open override fun findViewsWithText(p0: ArrayList&lt;View&gt;, p1: CharSequence, p2: Int) findViewWithTag [jvm]open fun &lt;T : View&gt; findViewWithTag(p0: Any): T finishMovingTask [jvm]open fun finishMovingTask() fitsSystemWindows [jvm]open fun fitsSystemWindows(): Boolean focusableViewAvailable [jvm]open override fun focusableViewAvailable(p0: View) focusSearch [jvm]open fun focusSearch(p0: Int): Viewopen override fun focusSearch(p0: View, p1: Int): View forceHasOverlappingRendering [jvm]open fun forceHasOverlappingRendering(p0: Boolean) forceLayout [jvm]open fun forceLayout() gatherTransparentRegion [jvm]open override fun gatherTransparentRegion(p0: Region): Boolean generateDisplayHash [jvm]open fun generateDisplayHash(p0: String, p1: Rect, p2: Executor, p3: DisplayHashResultCallback) generateLayoutParams [jvm]open override fun generateLayoutParams(p0: AttributeSet): FrameLayout.LayoutParams getAccessibilityClassName [jvm]open override fun getAccessibilityClassName(): CharSequence getAccessibilityDelegate [jvm]open fun getAccessibilityDelegate(): View.AccessibilityDelegate getAccessibilityLiveRegion [jvm]open fun getAccessibilityLiveRegion(): Int getAccessibilityNodeProvider [jvm]open fun getAccessibilityNodeProvider(): AccessibilityNodeProvider getAccessibilityPaneTitle [jvm]open fun getAccessibilityPaneTitle(): CharSequence getAccessibilitySelectionEnd [jvm]open fun getAccessibilitySelectionEnd(): Int getAccessibilitySelectionStart [jvm]open fun getAccessibilitySelectionStart(): Int getAccessibilityTraversalAfter [jvm]open fun getAccessibilityTraversalAfter(): Int getAccessibilityTraversalBefore [jvm]open fun getAccessibilityTraversalBefore(): Int getAccessibilityViewId [jvm]open fun getAccessibilityViewId(): Int getAccessibilityWindowId [jvm]open fun getAccessibilityWindowId(): Int getAlpha [jvm]open fun getAlpha(): Float getAnimation [jvm]open fun getAnimation(): Animation getAnimationMatrix [jvm]open fun getAnimationMatrix(): Matrix getApplicationWindowToken [jvm]open fun getApplicationWindowToken(): IBinder getAttributeResolutionStack [jvm]open fun getAttributeResolutionStack(p0: Int): IntArray getAttributeSourceResourceMap [jvm]open fun getAttributeSourceResourceMap(): MutableMap&lt;Int, Int&gt; getAutofillHints [jvm]open fun getAutofillHints(): Array&lt;String&gt; getAutofillId [jvm]open fun getAutofillId(): AutofillId getAutofillType [jvm]open fun getAutofillType(): Int getAutofillValue [jvm]open fun getAutofillValue(): AutofillValue getAutofillViewId [jvm]open fun getAutofillViewId(): Int getBackground [jvm]open fun getBackground(): Drawable getBackgroundTintBlendMode [jvm]open fun getBackgroundTintBlendMode(): BlendMode getBackgroundTintList [jvm]open fun getBackgroundTintList(): ColorStateList getBackgroundTintMode [jvm]open fun getBackgroundTintMode(): PorterDuff.Mode getBaseline [jvm]open fun getBaseline(): Int getBottom [jvm]open fun getBottom(): Int getBoundsOnScreen [jvm]open fun getBoundsOnScreen(p0: Rect)open fun getBoundsOnScreen(p0: Rect, p1: Boolean)open fun getBoundsOnScreen(p0: RectF, p1: Boolean) getCameraDistance [jvm]open fun getCameraDistance(): Float getChildAt [jvm]open fun getChildAt(p0: Int): View getChildCount [jvm]open fun getChildCount(): Int getChildDrawingOrder [jvm]open fun getChildDrawingOrder(p0: Int): Int getChildVisibleRect [jvm]open override fun getChildVisibleRect(p0: View, p1: Rect, p2: Point): Booleanopen fun getChildVisibleRect(p0: View, p1: Rect, p2: Point, p3: Boolean): Boolean getClipBounds [jvm]open fun getClipBounds(): Rectopen fun getClipBounds(p0: Rect): Boolean getClipChildren [jvm]open fun getClipChildren(): Boolean getClipToOutline [jvm]open fun getClipToOutline(): Boolean getClipToPadding [jvm]open fun getClipToPadding(): Boolean getConsiderGoneChildrenWhenMeasuring [jvm]open fun ~~getConsiderGoneChildrenWhenMeasuring~~(): Boolean getContentCaptureSession [jvm]open fun getContentCaptureSession(): ContentCaptureSession getContentDescription [jvm]open fun getContentDescription(): CharSequence getContext [jvm]open fun getContext(): Context getDefaultFocusHighlightEnabled [jvm]open fun getDefaultFocusHighlightEnabled(): Boolean getDescendantFocusability [jvm]open fun getDescendantFocusability(): Int getDisplay [jvm]open fun getDisplay(): Display getDrawableState [jvm]open fun getDrawableState(): IntArray getDrawingCache [jvm]open fun ~~getDrawingCache~~(): Bitmapopen fun ~~getDrawingCache~~(p0: Boolean): Bitmap getDrawingCacheBackgroundColor [jvm]open fun ~~getDrawingCacheBackgroundColor~~(): Int getDrawingCacheQuality [jvm]open fun ~~getDrawingCacheQuality~~(): Int getDrawingRect [jvm]open fun getDrawingRect(p0: Rect) getDrawingTime [jvm]open fun getDrawingTime(): Long getElevation [jvm]open fun getElevation(): Float getExplicitStyle [jvm]open fun getExplicitStyle(): Int getFadingEdge [jvm]open fun getFadingEdge(): Int getFadingEdgeLength [jvm]open fun getFadingEdgeLength(): Int getFilterTouchesWhenObscured [jvm]open fun getFilterTouchesWhenObscured(): Boolean getFitsSystemWindows [jvm]open fun getFitsSystemWindows(): Boolean getFocusable [jvm]open fun getFocusable(): Int getFocusables [jvm]open fun getFocusables(p0: Int): ArrayList&lt;View&gt; getFocusedChild [jvm]open fun getFocusedChild(): View getFocusedRect [jvm]open fun getFocusedRect(p0: Rect) getForeground [jvm]open fun getForeground(): Drawable getForegroundGravity [jvm]open fun getForegroundGravity(): Int getForegroundTintBlendMode [jvm]open fun getForegroundTintBlendMode(): BlendMode getForegroundTintList [jvm]open fun getForegroundTintList(): ColorStateList getForegroundTintMode [jvm]open fun getForegroundTintMode(): PorterDuff.Mode getGlobalVisibleRect [jvm]open fun getGlobalVisibleRect(p0: Rect): Booleanopen fun getGlobalVisibleRect(p0: Rect, p1: Point): Boolean getHandler [jvm]open fun getHandler(): Handler getHandwritingArea [jvm]open fun getHandwritingArea(): Rect getHasOverlappingRendering [jvm]open fun getHasOverlappingRendering(): Boolean getHeight [jvm]open fun getHeight(): Int getHitRect [jvm]open fun getHitRect(p0: Rect) getHorizontalFadingEdgeLength [jvm]open fun getHorizontalFadingEdgeLength(): Int getHorizontalScrollbarThumbDrawable [jvm]open fun getHorizontalScrollbarThumbDrawable(): Drawable getHorizontalScrollbarTrackDrawable [jvm]open fun getHorizontalScrollbarTrackDrawable(): Drawable getHotspotBounds [jvm]open fun getHotspotBounds(p0: Rect) getId [jvm]open fun getId(): Int getImportantForAccessibility [jvm]open fun getImportantForAccessibility(): Int getImportantForAutofill [jvm]open fun getImportantForAutofill(): Int getImportantForContentCapture [jvm]open fun getImportantForContentCapture(): Int getInverseMatrix [jvm]open fun getInverseMatrix(): Matrix getIterableTextForAccessibility [jvm]open fun getIterableTextForAccessibility(): CharSequence getIteratorForGranularity [jvm]open fun getIteratorForGranularity(p0: Int): AccessibilityIterators.TextSegmentIterator getKeepScreenOn [jvm]open fun getKeepScreenOn(): Boolean getKeyDispatcherState [jvm]open fun getKeyDispatcherState(): KeyEvent.DispatcherState getLabelFor [jvm]open fun getLabelFor(): Int getLayerType [jvm]open fun getLayerType(): Int getLayoutAnimation [jvm]open fun getLayoutAnimation(): LayoutAnimationController getLayoutAnimationListener [jvm]open fun getLayoutAnimationListener(): Animation.AnimationListener getLayoutDirection [jvm]open fun getLayoutDirection(): Int getLayoutMode [jvm]open fun getLayoutMode(): Int getLayoutParams [jvm]open fun getLayoutParams(): ViewGroup.LayoutParams getLayoutTransition [jvm]open fun getLayoutTransition(): LayoutTransition getLeft [jvm]open fun getLeft(): Int getLocalVisibleRect [jvm]open fun getLocalVisibleRect(p0: Rect): Boolean getLocationInSurface [jvm]open fun getLocationInSurface(p0: IntArray) getLocationInWindow [jvm]open fun getLocationInWindow(p0: IntArray) getLocationOnScreen [jvm]open fun getLocationOnScreen(): IntArrayopen fun getLocationOnScreen(p0: IntArray) getMatrix [jvm]open fun getMatrix(): Matrix getMeasureAllChildren [jvm]open fun getMeasureAllChildren(): Boolean getMeasuredHeight [jvm]open fun getMeasuredHeight(): Int getMeasuredHeightAndState [jvm]open fun getMeasuredHeightAndState(): Int getMeasuredState [jvm]open fun getMeasuredState(): Int getMeasuredWidth [jvm]open fun getMeasuredWidth(): Int getMeasuredWidthAndState [jvm]open fun getMeasuredWidthAndState(): Int getMinimumHeight [jvm]open fun getMinimumHeight(): Int getMinimumWidth [jvm]open fun getMinimumWidth(): Int getNestedScrollAxes [jvm]open fun getNestedScrollAxes(): Int getNextClusterForwardId [jvm]open fun getNextClusterForwardId(): Int getNextFocusDownId [jvm]open fun getNextFocusDownId(): Int getNextFocusForwardId [jvm]open fun getNextFocusForwardId(): Int getNextFocusLeftId [jvm]open fun getNextFocusLeftId(): Int getNextFocusRightId [jvm]open fun getNextFocusRightId(): Int getNextFocusUpId [jvm]open fun getNextFocusUpId(): Int getOnFocusChangeListener [jvm]open fun getOnFocusChangeListener(): View.OnFocusChangeListener getOnLongClickListener [jvm]open fun getOnLongClickListener(): View.OnLongClickListener getOpticalInsets [jvm]open fun getOpticalInsets(): Insets getOutlineAmbientShadowColor [jvm]open fun getOutlineAmbientShadowColor(): Int getOutlineProvider [jvm]open fun getOutlineProvider(): ViewOutlineProvider getOutlineSpotShadowColor [jvm]open fun getOutlineSpotShadowColor(): Int getOverlay [jvm]open override fun getOverlay(): ViewGroupOverlay getOverScrollMode [jvm]open fun getOverScrollMode(): Int getPaddingBottom [jvm]open fun getPaddingBottom(): Int getPaddingEnd [jvm]open fun getPaddingEnd(): Int getPaddingLeft [jvm]open fun getPaddingLeft(): Int getPaddingRight [jvm]open fun getPaddingRight(): Int getPaddingStart [jvm]open fun getPaddingStart(): Int getPaddingTop [jvm]open fun getPaddingTop(): Int getParent [jvm]open fun getParent(): ViewParent getParentForAccessibility [jvm]open fun getParentForAccessibility(): ViewParent getPersistentDrawingCache [jvm]open fun ~~getPersistentDrawingCache~~(): Int getPivotX [jvm]open fun getPivotX(): Float getPivotY [jvm]open fun getPivotY(): Float getPointerIcon [jvm]open fun getPointerIcon(): PointerIcon getPreferKeepClearRects [jvm]open fun getPreferKeepClearRects(): MutableList&lt;Rect&gt; getRawLayoutDirection [jvm]open fun getRawLayoutDirection(): Int getRawTextAlignment [jvm]open fun getRawTextAlignment(): Int getRawTextDirection [jvm]open fun getRawTextDirection(): Int getReceiveContentMimeTypes [jvm]open fun getReceiveContentMimeTypes(): Array&lt;String&gt; getResources [jvm]open fun getResources(): Resources getRevealOnFocusHint [jvm]open fun getRevealOnFocusHint(): Boolean getRight [jvm]open fun getRight(): Int getRootSurfaceControl [jvm]open fun getRootSurfaceControl(): AttachedSurfaceControl getRootView [jvm]open fun getRootView(): View getRootWindowInsets [jvm]open fun getRootWindowInsets(): WindowInsets getRotation [jvm]open fun getRotation(): Float getRotationX [jvm]open fun getRotationX(): Float getRotationY [jvm]open fun getRotationY(): Float getScaleX [jvm]open fun getScaleX(): Float getScaleY [jvm]open fun getScaleY(): Float getScrollBarDefaultDelayBeforeFade [jvm]open fun getScrollBarDefaultDelayBeforeFade(): Int getScrollBarFadeDuration [jvm]open fun getScrollBarFadeDuration(): Int getScrollBarSize [jvm]open fun getScrollBarSize(): Int getScrollBarStyle [jvm]open fun getScrollBarStyle(): Int getScrollCaptureHint [jvm]open fun getScrollCaptureHint(): Int getScrollIndicators [jvm]open fun getScrollIndicators(): Int getScrollX [jvm]open fun getScrollX(): Int getScrollY [jvm]open fun getScrollY(): Int getSolidColor [jvm]open fun getSolidColor(): Int getSourceLayoutResId [jvm]open fun getSourceLayoutResId(): Int getStateDescription [jvm]open fun getStateDescription(): CharSequence getStateListAnimator [jvm]open fun getStateListAnimator(): StateListAnimator getSystemGestureExclusionRects [jvm]open fun getSystemGestureExclusionRects(): MutableList&lt;Rect&gt; getSystemUiVisibility [jvm]open fun ~~getSystemUiVisibility~~(): Int getTag [jvm]open fun getTag(): Anyopen fun getTag(p0: Int): Any getTextAlignment [jvm]open fun getTextAlignment(): Int getTextDirection [jvm]open fun getTextDirection(): Int getThreadedRenderer [jvm]open fun getThreadedRenderer(): ThreadedRenderer getTooltip [jvm]open fun getTooltip(): CharSequence getTooltipText [jvm]open fun getTooltipText(): CharSequence getTooltipView [jvm]open fun getTooltipView(): View getTop [jvm]open fun getTop(): Int getTouchables [jvm]open fun getTouchables(): ArrayList&lt;View&gt; getTouchDelegate [jvm]open fun getTouchDelegate(): TouchDelegate getTouchscreenBlocksFocus [jvm]open fun getTouchscreenBlocksFocus(): Boolean getTransientView [jvm]open fun getTransientView(p0: Int): View getTransientViewCount [jvm]open fun getTransientViewCount(): Int getTransientViewIndex [jvm]open fun getTransientViewIndex(p0: Int): Int getTransitionAlpha [jvm]open fun getTransitionAlpha(): Float getTransitionName [jvm]open fun getTransitionName(): String getTranslationX [jvm]open fun getTranslationX(): Float getTranslationY [jvm]open fun getTranslationY(): Float getTranslationZ [jvm]open fun getTranslationZ(): Float getUniqueDrawingId [jvm]open fun getUniqueDrawingId(): Long getUnrestrictedPreferKeepClearRects [jvm]open fun getUnrestrictedPreferKeepClearRects(): MutableList&lt;Rect&gt; getVerticalFadingEdgeLength [jvm]open fun getVerticalFadingEdgeLength(): Int getVerticalScrollbarPosition [jvm]open fun getVerticalScrollbarPosition(): Int getVerticalScrollbarThumbDrawable [jvm]open fun getVerticalScrollbarThumbDrawable(): Drawable getVerticalScrollbarTrackDrawable [jvm]open fun getVerticalScrollbarTrackDrawable(): Drawable getVerticalScrollbarWidth [jvm]open fun getVerticalScrollbarWidth(): Int getViewRootImpl [jvm]open fun getViewRootImpl(): ViewRootImpl getViewTranslationCallback [jvm]open fun getViewTranslationCallback(): ViewTranslationCallback getViewTranslationResponse [jvm]open fun getViewTranslationResponse(): ViewTranslationResponse getViewTreeObserver [jvm]open fun getViewTreeObserver(): ViewTreeObserver getVisibility [jvm]open fun getVisibility(): Int getWidth [jvm]open fun getWidth(): Int getWindowDisplayFrame [jvm]open fun getWindowDisplayFrame(p0: Rect) getWindowId [jvm]open fun getWindowId(): WindowId getWindowInsetsController [jvm]open fun getWindowInsetsController(): WindowInsetsController getWindowSystemUiVisibility [jvm]open fun ~~getWindowSystemUiVisibility~~(): Int getWindowToken [jvm]open fun getWindowToken(): IBinder getWindowToken_Original [jvm]open fun getWindowToken_Original(): IBinder getWindowVisibility [jvm]open fun getWindowVisibility(): Int getWindowVisibleDisplayFrame [jvm]open fun getWindowVisibleDisplayFrame(p0: Rect) getX [jvm]open fun getX(): Float getY [jvm]open fun getY(): Float getZ [jvm]open fun getZ(): Float hasExplicitFocusable [jvm]open fun hasExplicitFocusable(): Boolean hasFocus [jvm]open override fun hasFocus(): Boolean hasFocusable [jvm]open fun hasFocusable(): Boolean hasIdentityMatrix [jvm]open fun hasIdentityMatrix(): Boolean hasImeFocus [jvm]open fun hasImeFocus(): Boolean hasNestedScrollingParent [jvm]open fun hasNestedScrollingParent(): Boolean hasOnClickListeners [jvm]open fun hasOnClickListeners(): Boolean hasOnLongClickListeners [jvm]open fun hasOnLongClickListeners(): Boolean hasOverlappingRendering [jvm]open fun hasOverlappingRendering(): Boolean hasPointerCapture [jvm]open fun hasPointerCapture(): Boolean hasShadow [jvm]open fun hasShadow(): Boolean hasTransientState [jvm]open override fun hasTransientState(): Boolean hasTranslationTransientState [jvm]open fun hasTranslationTransientState(): Boolean hasWindowFocus [jvm]open fun hasWindowFocus(): Boolean hasWindowInsetsAnimationCallback [jvm]open override fun hasWindowInsetsAnimationCallback(): Boolean hideAutofillHighlight [jvm]open fun hideAutofillHighlight(): Boolean includeForAccessibility [jvm]open fun includeForAccessibility(): Boolean indexOfChild [jvm]open fun indexOfChild(p0: View): Int invalidate [jvm]open fun invalidate()open fun ~~invalidate~~(p0: Rect)open fun invalidate(p0: Boolean)open fun ~~invalidate~~(p0: Int, p1: Int, p2: Int, p3: Int) invalidateChild [jvm]open override fun ~~invalidateChild~~(p0: View, p1: Rect) invalidateChildInParent [jvm]open override fun ~~invalidateChildInParent~~(p0: IntArray, p1: Rect): ViewParent invalidateDrawable [jvm]open override fun invalidateDrawable(p0: Drawable) invalidateOutline [jvm]open fun invalidateOutline() isAccessibilityFocused [jvm]open fun isAccessibilityFocused(): Boolean isAccessibilityHeading [jvm]open fun isAccessibilityHeading(): Boolean isAccessibilitySelectionExtendable [jvm]open fun isAccessibilitySelectionExtendable(): Boolean isActionableForAccessibility [jvm]open fun isActionableForAccessibility(): Boolean isActivated [jvm]open fun isActivated(): Boolean isAggregatedVisible [jvm]open fun isAggregatedVisible(): Boolean isAlwaysDrawnWithCacheEnabled [jvm]open fun ~~isAlwaysDrawnWithCacheEnabled~~(): Boolean isAnimationCacheEnabled [jvm]open fun ~~isAnimationCacheEnabled~~(): Boolean isAssistBlocked [jvm]open fun isAssistBlocked(): Boolean isAttachedToWindow [jvm]open fun isAttachedToWindow(): Boolean isAutofilled [jvm]open fun isAutofilled(): Boolean isAutoHandwritingEnabled [jvm]open fun isAutoHandwritingEnabled(): Boolean isClickable [jvm]open fun isClickable(): Boolean isContextClickable [jvm]open fun isContextClickable(): Boolean isDefaultFocusHighlightNeeded [jvm]open fun isDefaultFocusHighlightNeeded(p0: Drawable, p1: Drawable): Boolean isDirty [jvm]open fun isDirty(): Boolean isDrawingCacheEnabled [jvm]open fun ~~isDrawingCacheEnabled~~(): Boolean isDuplicateParentStateEnabled [jvm]open fun isDuplicateParentStateEnabled(): Boolean isEnabled [jvm]open fun isEnabled(): Boolean isFocusable [jvm]open fun isFocusable(): Boolean isFocusableInTouchMode [jvm]open fun isFocusableInTouchMode(): Boolean isFocused [jvm]open fun isFocused(): Boolean isFocusedByDefault [jvm]open fun isFocusedByDefault(): Boolean isForceDarkAllowed [jvm]open fun isForceDarkAllowed(): Boolean isForegroundInsidePadding [jvm]open fun isForegroundInsidePadding(): Boolean isFrameworkOptionalFitsSystemWindows [jvm]open fun isFrameworkOptionalFitsSystemWindows(): Boolean isHapticFeedbackEnabled [jvm]open fun isHapticFeedbackEnabled(): Boolean isHardwareAccelerated [jvm]open fun isHardwareAccelerated(): Boolean isHorizontalFadingEdgeEnabled [jvm]open fun isHorizontalFadingEdgeEnabled(): Boolean isHorizontalScrollBarEnabled [jvm]open fun isHorizontalScrollBarEnabled(): Boolean isHovered [jvm]open fun isHovered(): Boolean isImportantForAccessibility [jvm]open fun isImportantForAccessibility(): Boolean isImportantForAutofill [jvm]open fun isImportantForAutofill(): Boolean isImportantForContentCapture [jvm]open fun isImportantForContentCapture(): Boolean isInEditMode [jvm]open fun isInEditMode(): Boolean isInEditMode_Original [jvm]open fun isInEditMode_Original(): Boolean isInLayout [jvm]open fun isInLayout(): Boolean isInScrollingContainer [jvm]open fun isInScrollingContainer(): Boolean isInTouchMode [jvm]open fun isInTouchMode(): Boolean isKeyboardNavigationCluster [jvm]open fun isKeyboardNavigationCluster(): Boolean isLaidOut [jvm]open fun isLaidOut(): Boolean isLayoutDirectionInherited [jvm]open fun isLayoutDirectionInherited(): Boolean isLayoutDirectionResolved [jvm]open fun isLayoutDirectionResolved(): Boolean isLayoutRequested [jvm]open fun isLayoutRequested(): Boolean isLayoutRtl [jvm]open fun isLayoutRtl(): Boolean isLayoutSuppressed [jvm]open fun isLayoutSuppressed(): Boolean isLongClickable [jvm]open fun isLongClickable(): Boolean isMotionEventSplittingEnabled [jvm]open fun isMotionEventSplittingEnabled(): Boolean isNestedScrollingEnabled [jvm]open fun isNestedScrollingEnabled(): Boolean isOpaque [jvm]open fun isOpaque(): Boolean isPaddingRelative [jvm]open fun isPaddingRelative(): Boolean isPivotSet [jvm]open fun isPivotSet(): Boolean isPreferKeepClear [jvm]open fun isPreferKeepClear(): Boolean isPressed [jvm]open fun isPressed(): Boolean isRootNamespace [jvm]open fun isRootNamespace(): Boolean isSaveEnabled [jvm]open fun isSaveEnabled(): Boolean isSaveFromParentEnabled [jvm]open fun isSaveFromParentEnabled(): Boolean isScreenReaderFocusable [jvm]open fun isScreenReaderFocusable(): Boolean isScrollbarFadingEnabled [jvm]open fun isScrollbarFadingEnabled(): Boolean isScrollContainer [jvm]open fun isScrollContainer(): Boolean isSelected [jvm]open fun isSelected(): Boolean isShowingContextMenuWithCoords [jvm]open fun isShowingContextMenuWithCoords(): Boolean isShowingLayoutBounds [jvm]open fun isShowingLayoutBounds(): Boolean isShown [jvm]open fun isShown(): Boolean isSoundEffectsEnabled [jvm]open fun isSoundEffectsEnabled(): Boolean isTemporarilyDetached [jvm]open fun isTemporarilyDetached(): Boolean isTextAlignmentInherited [jvm]open fun isTextAlignmentInherited(): Boolean isTextAlignmentResolved [jvm]open fun isTextAlignmentResolved(): Boolean isTextDirectionInherited [jvm]open fun isTextDirectionInherited(): Boolean isTextDirectionResolved [jvm]open fun isTextDirectionResolved(): Boolean isTransitionGroup [jvm]open fun isTransitionGroup(): Boolean isVerticalFadingEdgeEnabled [jvm]open fun isVerticalFadingEdgeEnabled(): Boolean isVerticalScrollBarEnabled [jvm]open fun isVerticalScrollBarEnabled(): Boolean isVisibleToUser [jvm]open fun isVisibleToUser(): Boolean isVisibleToUserForAutofill [jvm]open fun isVisibleToUserForAutofill(p0: Int): Boolean jumpDrawablesToCurrentState [jvm]open override fun jumpDrawablesToCurrentState() keyboardNavigationClusterSearch [jvm]open fun keyboardNavigationClusterSearch(p0: View, p1: Int): View layout [jvm]open override fun layout(p0: Int, p1: Int, p2: Int, p3: Int) layout_Original [jvm]open fun layout_Original(p0: Int, p1: Int, p2: Int, p3: Int) makeFrameworkOptionalFitsSystemWindows [jvm]open override fun makeFrameworkOptionalFitsSystemWindows() makeOptionalFitsSystemWindows [jvm]open override fun makeOptionalFitsSystemWindows() mapRectFromViewToScreenCoords [jvm]open fun mapRectFromViewToScreenCoords(p0: RectF, p1: Boolean) measure [jvm]open fun measure(p0: Int, p1: Int) measure_Original [jvm]open fun measure_Original(p0: Int, p1: Int) notifyEnterOrExitForAutoFillIfNeeded [jvm]open fun notifyEnterOrExitForAutoFillIfNeeded(p0: Boolean) notifySubtreeAccessibilityStateChanged [jvm]open override fun notifySubtreeAccessibilityStateChanged(p0: View, p1: View, p2: Int) notifySubtreeAccessibilityStateChangedIfNeeded [jvm]open override fun notifySubtreeAccessibilityStateChangedIfNeeded() notifyViewAccessibilityStateChangedIfNeeded [jvm]open fun notifyViewAccessibilityStateChangedIfNeeded(p0: Int) offsetChildrenTopAndBottom [jvm]open fun offsetChildrenTopAndBottom(p0: Int) offsetDescendantRectToMyCoords [jvm]open fun offsetDescendantRectToMyCoords(p0: View, p1: Rect) offsetLeftAndRight [jvm]open fun offsetLeftAndRight(p0: Int) offsetRectIntoDescendantCoords [jvm]open fun offsetRectIntoDescendantCoords(p0: View, p1: Rect) offsetTopAndBottom [jvm]open fun offsetTopAndBottom(p0: Int) onActivityResult [jvm]open fun onActivityResult(p0: Int, p1: Int, p2: Intent) onApplyWindowInsets [jvm]open fun onApplyWindowInsets(p0: WindowInsets): WindowInsets onCancelPendingInputEvents [jvm]open fun onCancelPendingInputEvents() onCapturedPointerEvent [jvm]open fun onCapturedPointerEvent(p0: MotionEvent): Boolean onCheckIsTextEditor [jvm]open fun onCheckIsTextEditor(): Boolean onCloseSystemDialogs [jvm]open fun onCloseSystemDialogs(p0: String) onCreateInputConnection [jvm]open fun onCreateInputConnection(p0: EditorInfo): InputConnection onCreateViewTranslationRequest [jvm]open fun onCreateViewTranslationRequest(p0: IntArray, p1: Consumer&lt;ViewTranslationRequest&gt;) onCreateVirtualViewTranslationRequests [jvm]open fun onCreateVirtualViewTranslationRequests(p0: LongArray, p1: IntArray, p2: Consumer&lt;ViewTranslationRequest&gt;) onDescendantInvalidated [jvm]open override fun onDescendantInvalidated(p0: View, p1: View) onDescendantUnbufferedRequested [jvm]open override fun onDescendantUnbufferedRequested() onDragEvent [jvm]open fun onDragEvent(p0: DragEvent): Boolean onDrawForeground [jvm]open fun onDrawForeground(p0: Canvas) onFilterTouchEventForSecurity [jvm]open fun onFilterTouchEventForSecurity(p0: MotionEvent): Boolean onFinishTemporaryDetach [jvm]open fun onFinishTemporaryDetach() onGenericMotionEvent [jvm]open fun onGenericMotionEvent(p0: MotionEvent): Boolean onHoverChanged [jvm]open fun onHoverChanged(p0: Boolean) onHoverEvent [jvm]open fun onHoverEvent(p0: MotionEvent): Boolean onInitializeAccessibilityEvent [jvm]open fun onInitializeAccessibilityEvent(p0: AccessibilityEvent) onInitializeAccessibilityEventInternal [jvm]open fun onInitializeAccessibilityEventInternal(p0: AccessibilityEvent) onInitializeAccessibilityNodeInfo [jvm]open fun onInitializeAccessibilityNodeInfo(p0: AccessibilityNodeInfo) onInitializeAccessibilityNodeInfoInternal [jvm]open override fun onInitializeAccessibilityNodeInfoInternal(p0: AccessibilityNodeInfo) onInputConnectionClosedInternal [jvm]open fun onInputConnectionClosedInternal() onInputConnectionOpenedInternal [jvm]open fun onInputConnectionOpenedInternal(p0: InputConnection, p1: EditorInfo, p2: Handler) onInterceptHoverEvent [jvm]open fun onInterceptHoverEvent(p0: MotionEvent): Boolean onInterceptTouchEvent [jvm]open fun onInterceptTouchEvent(p0: MotionEvent): Boolean onKeyDown [jvm]open override fun onKeyDown(p0: Int, p1: KeyEvent): Boolean onKeyLongPress [jvm]open override fun onKeyLongPress(p0: Int, p1: KeyEvent): Boolean onKeyMultiple [jvm]open override fun onKeyMultiple(p0: Int, p1: Int, p2: KeyEvent): Boolean onKeyPreIme [jvm]open fun onKeyPreIme(p0: Int, p1: KeyEvent): Boolean onKeyShortcut [jvm]open fun onKeyShortcut(p0: Int, p1: KeyEvent): Boolean onKeyUp [jvm]open override fun onKeyUp(p0: Int, p1: KeyEvent): Boolean onMovedToDisplay [jvm]open fun onMovedToDisplay(p0: Int, p1: Configuration) onNestedFling [jvm]open override fun onNestedFling(p0: View, p1: Float, p2: Float, p3: Boolean): Boolean onNestedPreFling [jvm]open override fun onNestedPreFling(p0: View, p1: Float, p2: Float): Boolean onNestedPrePerformAccessibilityAction [jvm]open override fun onNestedPrePerformAccessibilityAction(p0: View, p1: Int, p2: Bundle): Boolean onNestedPreScroll [jvm]open override fun onNestedPreScroll(p0: View, p1: Int, p2: Int, p3: IntArray) onNestedScroll [jvm]open override fun onNestedScroll(p0: View, p1: Int, p2: Int, p3: Int, p4: Int) onNestedScrollAccepted [jvm]open override fun onNestedScrollAccepted(p0: View, p1: View, p2: Int) onPointerCaptureChange [jvm]open fun onPointerCaptureChange(p0: Boolean) onPopulateAccessibilityEvent [jvm]open fun onPopulateAccessibilityEvent(p0: AccessibilityEvent) onPopulateAccessibilityEventInternal [jvm]open fun onPopulateAccessibilityEventInternal(p0: AccessibilityEvent) onProvideAutofillStructure [jvm]open fun onProvideAutofillStructure(p0: ViewStructure, p1: Int) onProvideAutofillVirtualStructure [jvm]open fun onProvideAutofillVirtualStructure(p0: ViewStructure, p1: Int) onProvideContentCaptureStructure [jvm]open fun onProvideContentCaptureStructure(p0: ViewStructure, p1: Int) onProvideStructure [jvm]open fun onProvideStructure(p0: ViewStructure) onProvideVirtualStructure [jvm]open fun onProvideVirtualStructure(p0: ViewStructure) onReceiveContent [jvm]open fun onReceiveContent(p0: ContentInfo): ContentInfo onRequestSendAccessibilityEvent [jvm]open fun onRequestSendAccessibilityEvent(p0: View, p1: AccessibilityEvent): Boolean onRequestSendAccessibilityEventInternal [jvm]open fun onRequestSendAccessibilityEventInternal(p0: View, p1: AccessibilityEvent): Boolean onResolveDrawables [jvm]open fun onResolveDrawables(p0: Int) onResolvePointerIcon [jvm]open override fun onResolvePointerIcon(p0: MotionEvent, p1: Int): PointerIcon onRtlPropertiesChanged [jvm]open fun onRtlPropertiesChanged(p0: Int) onScreenStateChanged [jvm]open fun onScreenStateChanged(p0: Int) onScrollCaptureSearch [jvm]open fun onScrollCaptureSearch(p0: Rect, p1: Point, p2: Consumer&lt;ScrollCaptureTarget&gt;) onStartNestedScroll [jvm]open override fun onStartNestedScroll(p0: View, p1: View, p2: Int): Boolean onStartTemporaryDetach [jvm]open fun onStartTemporaryDetach() onStopNestedScroll [jvm]open override fun onStopNestedScroll(p0: View) onSystemBarAppearanceChanged [jvm]open fun onSystemBarAppearanceChanged(p0: Int) onTouchEvent [jvm]open fun onTouchEvent(p0: MotionEvent): Boolean onTrackballEvent [jvm]open fun onTrackballEvent(p0: MotionEvent): Boolean onViewAdded [jvm]open fun onViewAdded(p0: View) onViewRemoved [jvm]open fun onViewRemoved(p0: View) onViewTranslationResponse [jvm]open fun onViewTranslationResponse(p0: ViewTranslationResponse) onVirtualViewTranslationResponses [jvm]open fun onVirtualViewTranslationResponses(p0: LongSparseArray&lt;ViewTranslationResponse&gt;) onVisibilityAggregated [jvm]open fun onVisibilityAggregated(p0: Boolean) onWindowFocusChanged [jvm]open fun onWindowFocusChanged(p0: Boolean) onWindowSystemUiVisibilityChanged [jvm]open fun ~~onWindowSystemUiVisibilityChanged~~(p0: Int) outputDirtyFlags [jvm]open fun outputDirtyFlags(p0: String, p1: Boolean, p2: Int) performAccessibilityAction [jvm]open fun performAccessibilityAction(p0: Int, p1: Bundle): Boolean performAccessibilityActionInternal [jvm]open fun performAccessibilityActionInternal(p0: Int, p1: Bundle): Boolean performClick [jvm]open fun performClick(): Boolean performContextClick [jvm]open fun performContextClick(): Booleanopen fun performContextClick(p0: Float, p1: Float): Boolean performHapticFeedback [jvm]open fun performHapticFeedback(p0: Int): Booleanopen fun performHapticFeedback(p0: Int, p1: Int): Boolean performLongClick [jvm]open fun performLongClick(): Booleanopen fun performLongClick(p0: Float, p1: Float): Boolean performReceiveContent [jvm]open fun performReceiveContent(p0: ContentInfo): ContentInfo playSoundEffect [jvm]open fun playSoundEffect(p0: Int) pointInView [jvm]open fun pointInView(p0: Float, p1: Float, p2: Float): Boolean post [jvm]open fun post(p0: Runnable): Boolean postDelayed [jvm]open fun postDelayed(p0: Runnable, p1: Long): Boolean postInvalidate [jvm]open fun postInvalidate()open fun postInvalidate(p0: Int, p1: Int, p2: Int, p3: Int) postInvalidateDelayed [jvm]open fun postInvalidateDelayed(p0: Long)open fun postInvalidateDelayed(p0: Long, p1: Int, p2: Int, p3: Int, p4: Int) postInvalidateOnAnimation [jvm]open fun postInvalidateOnAnimation()open fun postInvalidateOnAnimation(p0: Int, p1: Int, p2: Int, p3: Int) postOnAnimation [jvm]open fun postOnAnimation(p0: Runnable) postOnAnimationDelayed [jvm]open fun postOnAnimationDelayed(p0: Runnable, p1: Long) prepareForExtendedAccessibilitySelection [jvm]open fun prepareForExtendedAccessibilitySelection() recomputeViewAttributes [jvm]open override fun recomputeViewAttributes(p0: View) refreshDrawableState [jvm]open fun refreshDrawableState() releasePointerCapture [jvm]open fun releasePointerCapture() removeAllViews [jvm]open fun removeAllViews() removeAllViewsInLayout [jvm]open fun removeAllViewsInLayout() removeCallbacks [jvm]open fun removeCallbacks(p0: Runnable): Boolean removeFrameMetricsListener [jvm]open fun removeFrameMetricsListener(p0: Window.OnFrameMetricsAvailableListener) removeOnAttachStateChangeListener [jvm]open fun removeOnAttachStateChangeListener(p0: View.OnAttachStateChangeListener) removeOnLayoutChangeListener [jvm]open fun removeOnLayoutChangeListener(p0: View.OnLayoutChangeListener) removeOnUnhandledKeyEventListener [jvm]open fun removeOnUnhandledKeyEventListener(p0: View.OnUnhandledKeyEventListener) removeTransientView [jvm]open fun removeTransientView(p0: View) removeView [jvm]open override fun removeView(p0: View) removeViewAt [jvm]open fun removeViewAt(p0: Int) removeViewInLayout [jvm]open fun removeViewInLayout(p0: View) removeViews [jvm]open fun removeViews(p0: Int, p1: Int) removeViewsInLayout [jvm]open fun removeViewsInLayout(p0: Int, p1: Int) requestAccessibilityFocus [jvm]open fun requestAccessibilityFocus(): Boolean requestApplyInsets [jvm]open fun requestApplyInsets() requestChildFocus [jvm]open override fun requestChildFocus(p0: View, p1: View) requestChildRectangleOnScreen [jvm]open override fun requestChildRectangleOnScreen(p0: View, p1: Rect, p2: Boolean): Boolean requestDisallowInterceptTouchEvent [jvm]open override fun requestDisallowInterceptTouchEvent(p0: Boolean) requestFitSystemWindows [jvm]open fun ~~requestFitSystemWindows~~() requestFocus [jvm]open fun requestFocus(): Booleanopen fun requestFocus(p0: Int): Booleanopen override fun requestFocus(p0: Int, p1: Rect): Boolean requestFocusFromTouch [jvm]open fun requestFocusFromTouch(): Boolean requestKeyboardShortcuts [jvm]open fun requestKeyboardShortcuts(p0: MutableList&lt;KeyboardShortcutGroup&gt;, p1: Int) requestLayout [jvm]open fun requestLayout() requestPointerCapture [jvm]open fun requestPointerCapture() requestRectangleOnScreen [jvm]open fun requestRectangleOnScreen(p0: Rect): Booleanopen fun requestRectangleOnScreen(p0: Rect, p1: Boolean): Boolean requestSendAccessibilityEvent [jvm]open override fun requestSendAccessibilityEvent(p0: View, p1: AccessibilityEvent): Boolean requestTransitionStart [jvm]open fun requestTransitionStart(p0: LayoutTransition) requestTransparentRegion [jvm]open override fun requestTransparentRegion(p0: View) requestUnbufferedDispatch [jvm]open fun requestUnbufferedDispatch(p0: MotionEvent)open fun requestUnbufferedDispatch(p0: Int) requireViewById [jvm]open fun &lt;T : View&gt; requireViewById(p0: Int): T resetPaddingToInitialValues [jvm]open fun resetPaddingToInitialValues() resetPivot [jvm]open fun resetPivot() resetResolvedLayoutDirection [jvm]open override fun resetResolvedLayoutDirection() resetResolvedPadding [jvm]open override fun resetResolvedPadding() resetResolvedTextAlignment [jvm]open override fun resetResolvedTextAlignment() resetResolvedTextDirection [jvm]open override fun resetResolvedTextDirection() resetRtlProperties [jvm]open fun resetRtlProperties() resetSubtreeAutofillIds [jvm]open override fun resetSubtreeAutofillIds() resolveLayoutDirection [jvm]open override fun resolveLayoutDirection(): Boolean resolveLayoutParams [jvm]open override fun resolveLayoutParams() resolvePadding [jvm]open override fun resolvePadding() resolveRtlPropertiesIfNeeded [jvm]open override fun resolveRtlPropertiesIfNeeded(): Boolean resolveTextAlignment [jvm]open override fun resolveTextAlignment(): Boolean resolveTextDirection [jvm]open override fun resolveTextDirection(): Boolean restoreDefaultFocus [jvm]open override fun restoreDefaultFocus(): Boolean restoreFocusInCluster [jvm]open override fun restoreFocusInCluster(p0: Int): Boolean restoreFocusNotInCluster [jvm]open override fun restoreFocusNotInCluster(): Boolean restoreHierarchyState [jvm]open fun restoreHierarchyState(p0: SparseArray&lt;Parcelable&gt;) saveAttributeDataForStyleable [jvm]open fun saveAttributeDataForStyleable(p0: Context, p1: IntArray, p2: AttributeSet, p3: TypedArray, p4: Int, p5: Int) saveHierarchyState [jvm]open fun saveHierarchyState(p0: SparseArray&lt;Parcelable&gt;) scheduleDrawable [jvm]open override fun scheduleDrawable(p0: Drawable, p1: Runnable, p2: Long) scheduleLayoutAnimation [jvm]open fun scheduleLayoutAnimation() scrollBy [jvm]open fun scrollBy(p0: Int, p1: Int) scrollTo [jvm]open fun scrollTo(p0: Int, p1: Int) sendAccessibilityEvent [jvm]open override fun sendAccessibilityEvent(p0: Int) sendAccessibilityEventInternal [jvm]open fun sendAccessibilityEventInternal(p0: Int) sendAccessibilityEventUnchecked [jvm]open override fun sendAccessibilityEventUnchecked(p0: AccessibilityEvent) sendAccessibilityEventUncheckedInternal [jvm]open fun sendAccessibilityEventUncheckedInternal(p0: AccessibilityEvent) setAccessibilityDelegate [jvm]open fun setAccessibilityDelegate(p0: View.AccessibilityDelegate) setAccessibilityHeading [jvm]open fun setAccessibilityHeading(p0: Boolean) setAccessibilityLiveRegion [jvm]open fun setAccessibilityLiveRegion(p0: Int) setAccessibilityPaneTitle [jvm]open fun setAccessibilityPaneTitle(p0: CharSequence) setAccessibilitySelection [jvm]open fun setAccessibilitySelection(p0: Int, p1: Int) setAccessibilityTraversalAfter [jvm]open fun setAccessibilityTraversalAfter(p0: Int) setAccessibilityTraversalBefore [jvm]open fun setAccessibilityTraversalBefore(p0: Int) setActivated [jvm]open fun setActivated(p0: Boolean) setAddStatesFromChildren [jvm]open fun setAddStatesFromChildren(p0: Boolean) setAllowClickWhenDisabled [jvm]open fun setAllowClickWhenDisabled(p0: Boolean) setAlpha [jvm]open fun setAlpha(p0: Float) setAlwaysDrawnWithCacheEnabled [jvm]open fun ~~setAlwaysDrawnWithCacheEnabled~~(p0: Boolean) setAnimation [jvm]open fun setAnimation(p0: Animation) setAnimationCacheEnabled [jvm]open fun ~~setAnimationCacheEnabled~~(p0: Boolean) setAnimationMatrix [jvm]open fun setAnimationMatrix(p0: Matrix) setAssistBlocked [jvm]open fun setAssistBlocked(p0: Boolean) setAutofilled [jvm]open fun setAutofilled(p0: Boolean, p1: Boolean) setAutofillHints [jvm]open fun setAutofillHints(vararg p0: String) setAutofillId [jvm]open fun setAutofillId(p0: AutofillId) setAutoHandwritingEnabled [jvm]open fun setAutoHandwritingEnabled(p0: Boolean) setBackground [jvm]open fun setBackground(p0: Drawable) setBackgroundColor [jvm]open fun setBackgroundColor(p0: Int) setBackgroundDrawable [jvm]open fun ~~setBackgroundDrawable~~(p0: Drawable) setBackgroundResource [jvm]open fun setBackgroundResource(p0: Int) setBackgroundTintBlendMode [jvm]open fun setBackgroundTintBlendMode(p0: BlendMode) setBackgroundTintList [jvm]open fun setBackgroundTintList(p0: ColorStateList) setBackgroundTintMode [jvm]open fun setBackgroundTintMode(p0: PorterDuff.Mode) setBottom [jvm]open fun setBottom(p0: Int) setCameraDistance [jvm]open fun setCameraDistance(p0: Float) setClickable [jvm]open fun setClickable(p0: Boolean) setClipBounds [jvm]open fun setClipBounds(p0: Rect) setClipChildren [jvm]open fun setClipChildren(p0: Boolean) setClipToOutline [jvm]open fun setClipToOutline(p0: Boolean) setClipToPadding [jvm]open fun setClipToPadding(p0: Boolean) setContentCaptureSession [jvm]open fun setContentCaptureSession(p0: ContentCaptureSession) setContentDescription [jvm]open fun setContentDescription(p0: CharSequence) setContextClickable [jvm]open fun setContextClickable(p0: Boolean) setDefaultFocusHighlightEnabled [jvm]open fun setDefaultFocusHighlightEnabled(p0: Boolean) setDescendantFocusability [jvm]open fun setDescendantFocusability(p0: Int) setDisabledSystemUiVisibility [jvm]open fun setDisabledSystemUiVisibility(p0: Int) setDrawingCacheBackgroundColor [jvm]open fun ~~setDrawingCacheBackgroundColor~~(p0: Int) setDrawingCacheEnabled [jvm]open fun ~~setDrawingCacheEnabled~~(p0: Boolean) setDrawingCacheQuality [jvm]open fun ~~setDrawingCacheQuality~~(p0: Int) setDuplicateParentStateEnabled [jvm]open fun setDuplicateParentStateEnabled(p0: Boolean) setElevation [jvm]open fun setElevation(p0: Float) setEnabled [jvm]open fun setEnabled(p0: Boolean) setFadingEdgeLength [jvm]open fun setFadingEdgeLength(p0: Int) setFilterTouchesWhenObscured [jvm]open fun setFilterTouchesWhenObscured(p0: Boolean) setFitsSystemWindows [jvm]open fun setFitsSystemWindows(p0: Boolean) setFocusable [jvm]open fun setFocusable(p0: Boolean)open fun setFocusable(p0: Int) setFocusableInTouchMode [jvm]open fun setFocusableInTouchMode(p0: Boolean) setFocusedByDefault [jvm]open fun setFocusedByDefault(p0: Boolean) setFocusedInCluster [jvm]open fun setFocusedInCluster() setForceDarkAllowed [jvm]open fun setForceDarkAllowed(p0: Boolean) setForeground [jvm]open fun setForeground(p0: Drawable) setForegroundGravity [jvm]open override fun setForegroundGravity(p0: Int) setForegroundTintBlendMode [jvm]open fun setForegroundTintBlendMode(p0: BlendMode) setForegroundTintList [jvm]open fun setForegroundTintList(p0: ColorStateList) setForegroundTintMode [jvm]open fun setForegroundTintMode(p0: PorterDuff.Mode) setHandwritingArea [jvm]open fun setHandwritingArea(p0: Rect) setHapticFeedbackEnabled [jvm]open fun setHapticFeedbackEnabled(p0: Boolean) setHasTransientState [jvm]open fun setHasTransientState(p0: Boolean) setHasTranslationTransientState [jvm]open fun setHasTranslationTransientState(p0: Boolean) setHorizontalFadingEdgeEnabled [jvm]open fun setHorizontalFadingEdgeEnabled(p0: Boolean) setHorizontalScrollBarEnabled [jvm]open fun setHorizontalScrollBarEnabled(p0: Boolean) setHorizontalScrollbarThumbDrawable [jvm]open fun setHorizontalScrollbarThumbDrawable(p0: Drawable) setHorizontalScrollbarTrackDrawable [jvm]open fun setHorizontalScrollbarTrackDrawable(p0: Drawable) setHovered [jvm]open fun setHovered(p0: Boolean) setId [jvm]open fun setId(p0: Int) setImportantForAccessibility [jvm]open fun setImportantForAccessibility(p0: Int) setImportantForAutofill [jvm]open fun setImportantForAutofill(p0: Int) setImportantForContentCapture [jvm]open fun setImportantForContentCapture(p0: Int) setIsRootNamespace [jvm]open fun setIsRootNamespace(p0: Boolean) setKeepScreenOn [jvm]open fun setKeepScreenOn(p0: Boolean) setKeyboardNavigationCluster [jvm]open fun setKeyboardNavigationCluster(p0: Boolean) setLabelFor [jvm]open fun setLabelFor(p0: Int) setLayerPaint [jvm]open fun setLayerPaint(p0: Paint) setLayerType [jvm]open fun setLayerType(p0: Int, p1: Paint) setLayoutAnimation [jvm]open fun setLayoutAnimation(p0: LayoutAnimationController) setLayoutAnimationListener [jvm]open fun setLayoutAnimationListener(p0: Animation.AnimationListener) setLayoutDirection [jvm]open fun setLayoutDirection(p0: Int) setLayoutMode [jvm]open fun setLayoutMode(p0: Int) setLayoutParams [jvm]open fun setLayoutParams(p0: ViewGroup.LayoutParams) setLayoutTransition [jvm]open fun setLayoutTransition(p0: LayoutTransition) setLeft [jvm]open fun setLeft(p0: Int) setLeftTopRightBottom [jvm]open fun setLeftTopRightBottom(p0: Int, p1: Int, p2: Int, p3: Int) setLongClickable [jvm]open fun setLongClickable(p0: Boolean) setMeasureAllChildren [jvm]open fun setMeasureAllChildren(p0: Boolean) setMinimumHeight [jvm]open fun setMinimumHeight(p0: Int) setMinimumWidth [jvm]open fun setMinimumWidth(p0: Int) setMotionEventSplittingEnabled [jvm]open fun setMotionEventSplittingEnabled(p0: Boolean) setNestedScrollingEnabled [jvm]open fun setNestedScrollingEnabled(p0: Boolean) setNextClusterForwardId [jvm]open fun setNextClusterForwardId(p0: Int) setNextFocusDownId [jvm]open fun setNextFocusDownId(p0: Int) setNextFocusForwardId [jvm]open fun setNextFocusForwardId(p0: Int) setNextFocusLeftId [jvm]open fun setNextFocusLeftId(p0: Int) setNextFocusRightId [jvm]open fun setNextFocusRightId(p0: Int) setNextFocusUpId [jvm]open fun setNextFocusUpId(p0: Int) setNotifyAutofillManagerOnClick [jvm]open fun setNotifyAutofillManagerOnClick(p0: Boolean) setOnApplyWindowInsetsListener [jvm]open fun setOnApplyWindowInsetsListener(p0: View.OnApplyWindowInsetsListener) setOnCapturedPointerListener [jvm]open fun setOnCapturedPointerListener(p0: View.OnCapturedPointerListener) setOnClickListener [jvm]open fun setOnClickListener(p0: View.OnClickListener) setOnContextClickListener [jvm]open fun setOnContextClickListener(p0: View.OnContextClickListener) setOnCreateContextMenuListener [jvm]open fun setOnCreateContextMenuListener(p0: View.OnCreateContextMenuListener) setOnDragListener [jvm]open fun setOnDragListener(p0: View.OnDragListener) setOnFocusChangeListener [jvm]open fun setOnFocusChangeListener(p0: View.OnFocusChangeListener) setOnGenericMotionListener [jvm]open fun setOnGenericMotionListener(p0: View.OnGenericMotionListener) setOnHierarchyChangeListener [jvm]open fun setOnHierarchyChangeListener(p0: ViewGroup.OnHierarchyChangeListener) setOnHoverListener [jvm]open fun setOnHoverListener(p0: View.OnHoverListener) setOnKeyListener [jvm]open fun setOnKeyListener(p0: View.OnKeyListener) setOnLongClickListener [jvm]open fun setOnLongClickListener(p0: View.OnLongClickListener) setOnReceiveContentListener [jvm]open fun setOnReceiveContentListener(p0: Array&lt;String&gt;, p1: OnReceiveContentListener) setOnScrollChangeListener [jvm]open fun setOnScrollChangeListener(p0: View.OnScrollChangeListener) setOnSystemUiVisibilityChangeListener [jvm]open fun ~~setOnSystemUiVisibilityChangeListener~~(p0: View.OnSystemUiVisibilityChangeListener) setOnTouchListener [jvm]open fun setOnTouchListener(p0: View.OnTouchListener) setOpticalInsets [jvm]open fun setOpticalInsets(p0: Insets) setOutlineAmbientShadowColor [jvm]open fun setOutlineAmbientShadowColor(p0: Int) setOutlineProvider [jvm]open fun setOutlineProvider(p0: ViewOutlineProvider) setOutlineSpotShadowColor [jvm]open fun setOutlineSpotShadowColor(p0: Int) setOverScrollMode [jvm]open fun setOverScrollMode(p0: Int) setPadding [jvm]open fun setPadding(p0: Int, p1: Int, p2: Int, p3: Int) setPaddingRelative [jvm]open fun setPaddingRelative(p0: Int, p1: Int, p2: Int, p3: Int) setPersistentDrawingCache [jvm]open fun ~~setPersistentDrawingCache~~(p0: Int) setPivotX [jvm]open fun setPivotX(p0: Float) setPivotY [jvm]open fun setPivotY(p0: Float) setPointerIcon [jvm]open fun setPointerIcon(p0: PointerIcon) setPreferKeepClear [jvm]open fun setPreferKeepClear(p0: Boolean) setPreferKeepClearRects [jvm]open fun setPreferKeepClearRects(p0: MutableList&lt;Rect&gt;) setPressed [jvm]open fun setPressed(p0: Boolean) setRenderEffect [jvm]open fun setRenderEffect(p0: RenderEffect) setRevealClip [jvm]open fun setRevealClip(p0: Boolean, p1: Float, p2: Float, p3: Float) setRevealOnFocusHint [jvm]open fun setRevealOnFocusHint(p0: Boolean) setRight [jvm]open fun setRight(p0: Int) setRotation [jvm]open fun setRotation(p0: Float) setRotationX [jvm]open fun setRotationX(p0: Float) setRotationY [jvm]open fun setRotationY(p0: Float) setSaveEnabled [jvm]open fun setSaveEnabled(p0: Boolean) setSaveFromParentEnabled [jvm]open fun setSaveFromParentEnabled(p0: Boolean) setScaleX [jvm]open fun setScaleX(p0: Float) setScaleY [jvm]open fun setScaleY(p0: Float) setScreenReaderFocusable [jvm]open fun setScreenReaderFocusable(p0: Boolean) setScrollBarDefaultDelayBeforeFade [jvm]open fun setScrollBarDefaultDelayBeforeFade(p0: Int) setScrollBarFadeDuration [jvm]open fun setScrollBarFadeDuration(p0: Int) setScrollbarFadingEnabled [jvm]open fun setScrollbarFadingEnabled(p0: Boolean) setScrollBarSize [jvm]open fun setScrollBarSize(p0: Int) setScrollBarStyle [jvm]open fun setScrollBarStyle(p0: Int) setScrollCaptureCallback [jvm]open fun setScrollCaptureCallback(p0: ScrollCaptureCallback) setScrollCaptureHint [jvm]open fun setScrollCaptureHint(p0: Int) setScrollContainer [jvm]open fun setScrollContainer(p0: Boolean) setScrollIndicators [jvm]open fun setScrollIndicators(p0: Int)open fun setScrollIndicators(p0: Int, p1: Int) setScrollX [jvm]open fun setScrollX(p0: Int) setScrollY [jvm]open fun setScrollY(p0: Int) setSelected [jvm]open fun setSelected(p0: Boolean) setShowingLayoutBounds [jvm]open fun setShowingLayoutBounds(p0: Boolean) setSoundEffectsEnabled [jvm]open fun setSoundEffectsEnabled(p0: Boolean) setStateDescription [jvm]open fun setStateDescription(p0: CharSequence) setStateListAnimator [jvm]open fun setStateListAnimator(p0: StateListAnimator) setSystemGestureExclusionRects [jvm]open fun setSystemGestureExclusionRects(p0: MutableList&lt;Rect&gt;) setSystemUiVisibility [jvm]open fun ~~setSystemUiVisibility~~(p0: Int) setTag [jvm]open fun setTag(p0: Any)open fun setTag(p0: Int, p1: Any) setTagInternal [jvm]open fun setTagInternal(p0: Int, p1: Any) setTextAlignment [jvm]open fun setTextAlignment(p0: Int) setTextDirection [jvm]open fun setTextDirection(p0: Int) setTooltip [jvm]open fun setTooltip(p0: CharSequence) setTooltipText [jvm]open fun setTooltipText(p0: CharSequence) setTop [jvm]open fun setTop(p0: Int) setTouchDelegate [jvm]open fun setTouchDelegate(p0: TouchDelegate) setTouchscreenBlocksFocus [jvm]open fun setTouchscreenBlocksFocus(p0: Boolean) setTransitionAlpha [jvm]open fun setTransitionAlpha(p0: Float) setTransitionGroup [jvm]open fun setTransitionGroup(p0: Boolean) setTransitionName [jvm]open fun setTransitionName(p0: String) setTransitionVisibility [jvm]open fun setTransitionVisibility(p0: Int) setTranslationX [jvm]open fun setTranslationX(p0: Float) setTranslationY [jvm]open fun setTranslationY(p0: Float) setTranslationZ [jvm]open fun setTranslationZ(p0: Float) setUnrestrictedPreferKeepClearRects [jvm]open fun setUnrestrictedPreferKeepClearRects(p0: MutableList&lt;Rect&gt;) setVerticalFadingEdgeEnabled [jvm]open fun setVerticalFadingEdgeEnabled(p0: Boolean) setVerticalScrollBarEnabled [jvm]open fun setVerticalScrollBarEnabled(p0: Boolean) setVerticalScrollbarPosition [jvm]open fun setVerticalScrollbarPosition(p0: Int) setVerticalScrollbarThumbDrawable [jvm]open fun setVerticalScrollbarThumbDrawable(p0: Drawable) setVerticalScrollbarTrackDrawable [jvm]open fun setVerticalScrollbarTrackDrawable(p0: Drawable) setViewTranslationCallback [jvm]open fun setViewTranslationCallback(p0: ViewTranslationCallback) setVisibility [jvm]open fun setVisibility(p0: Int) setWillNotCacheDrawing [jvm]open fun ~~setWillNotCacheDrawing~~(p0: Boolean) setWillNotDraw [jvm]open fun setWillNotDraw(p0: Boolean) setWindowInsetsAnimationCallback [jvm]open override fun setWindowInsetsAnimationCallback(p0: WindowInsetsAnimation.Callback) setX [jvm]open fun setX(p0: Float) setY [jvm]open fun setY(p0: Float) setZ [jvm]open fun setZ(p0: Float) shouldDelayChildPressedState [jvm]open override fun shouldDelayChildPressedState(): Boolean showContextMenu [jvm]open fun showContextMenu(): Booleanopen fun showContextMenu(p0: Float, p1: Float): Boolean showContextMenuForChild [jvm]open override fun showContextMenuForChild(p0: View): Booleanopen override fun showContextMenuForChild(p0: View, p1: Float, p2: Float): Boolean startActionMode [jvm]open fun startActionMode(p0: ActionMode.Callback): ActionModeopen fun startActionMode(p0: ActionMode.Callback, p1: Int): ActionMode startActionModeForChild [jvm]open override fun startActionModeForChild(p0: View, p1: ActionMode.Callback): ActionModeopen override fun startActionModeForChild(p0: View, p1: ActionMode.Callback, p2: Int): ActionMode startActivityForResult [jvm]open fun startActivityForResult(p0: Intent, p1: Int) startAnimation [jvm]open fun startAnimation(p0: Animation) startDrag [jvm]open fun ~~startDrag~~(p0: ClipData, p1: View.DragShadowBuilder, p2: Any, p3: Int): Boolean startDragAndDrop [jvm]open fun startDragAndDrop(p0: ClipData, p1: View.DragShadowBuilder, p2: Any, p3: Int): Boolean startLayoutAnimation [jvm]open fun startLayoutAnimation() startMovingTask [jvm]open fun startMovingTask(p0: Float, p1: Float): Boolean startNestedScroll [jvm]open fun startNestedScroll(p0: Int): Boolean startViewTransition [jvm]open fun startViewTransition(p0: View) stopNestedScroll [jvm]open fun stopNestedScroll() subtractObscuredTouchableRegion [jvm]open override fun subtractObscuredTouchableRegion(p0: Region, p1: View) suppressLayout [jvm]open fun suppressLayout(p0: Boolean) toGlobalMotionEvent [jvm]open fun toGlobalMotionEvent(p0: MotionEvent): Boolean toLocalMotionEvent [jvm]open fun toLocalMotionEvent(p0: MotionEvent): Boolean toString [jvm]open override fun toString(): String transformFromViewToWindowSpace [jvm]open fun transformFromViewToWindowSpace(p0: IntArray) transformMatrixToGlobal [jvm]open fun transformMatrixToGlobal(p0: Matrix) transformMatrixToLocal [jvm]open fun transformMatrixToLocal(p0: Matrix) transformPointToViewLocal [jvm]open fun transformPointToViewLocal(p0: FloatArray, p1: View) unscheduleDrawable [jvm]open fun unscheduleDrawable(p0: Drawable)open override fun unscheduleDrawable(p0: Drawable, p1: Runnable) updateDisplayListIfDirty [jvm]open fun updateDisplayListIfDirty(): RenderNode updateDragShadow [jvm]open fun updateDragShadow(p0: View.DragShadowBuilder) updateViewLayout [jvm]open override fun updateViewLayout(p0: View, p1: ViewGroup.LayoutParams) willNotCacheDrawing [jvm]open fun ~~willNotCacheDrawing~~(): Boolean willNotDraw [jvm]open fun willNotDraw(): Boolean"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-compose-view-adapter/-compose-view-adapter/","title":"ComposeViewAdapter - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal/ComposeViewAdapter/ComposeViewAdapter</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-compose-view-adapter/-compose-view-adapter/#composeviewadapter","title":"ComposeViewAdapter","text":"<p>[jvm]\\ constructor(context: Context, attrs: AttributeSet)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/","title":"ResourceRepositoryBridge - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal/ResourceRepositoryBridge</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/#resourcerepositorybridge","title":"ResourceRepositoryBridge","text":"<p>interface ResourceRepositoryBridge</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/#inheritors","title":"Inheritors","text":"Legacy New"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/#types","title":"Types","text":"Name Summary Legacy [jvm]class Legacy(val repository: ResourceRepository) : ResourceRepositoryBridge New [jvm]class New(val repository: ResourceRepository) : ResourceRepositoryBridge"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-legacy/","title":"Legacy - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal/ResourceRepositoryBridge/Legacy</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-legacy/#legacy","title":"Legacy","text":"<p>[jvm]\\ class Legacy(val repository: ResourceRepository) : ResourceRepositoryBridge</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-legacy/#constructors","title":"Constructors","text":"Legacy [jvm]constructor(repository: ResourceRepository)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-legacy/#properties","title":"Properties","text":"Name Summary repository [jvm]val repository: ResourceRepository"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-legacy/-legacy/","title":"Legacy - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal/ResourceRepositoryBridge/Legacy/Legacy</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-legacy/-legacy/#legacy","title":"Legacy","text":"<p>[jvm]\\ constructor(repository: ResourceRepository)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-legacy/repository/","title":"repository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal/ResourceRepositoryBridge/Legacy/repository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-legacy/repository/#repository","title":"repository","text":"<p>[jvm]\\ val repository: ResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-new/","title":"New - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal/ResourceRepositoryBridge/New</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-new/#new","title":"New","text":"<p>[jvm]\\ class New(val repository: ResourceRepository) : ResourceRepositoryBridge</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-new/#constructors","title":"Constructors","text":"New [jvm]constructor(repository: ResourceRepository)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-new/#properties","title":"Properties","text":"Name Summary repository [jvm]val repository: ResourceRepository"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-new/-new/","title":"New - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal/ResourceRepositoryBridge/New/New</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-new/-new/#new","title":"New","text":"<p>[jvm]\\ constructor(repository: ResourceRepository)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-new/repository/","title":"repository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal/ResourceRepositoryBridge/New/repository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal/-resource-repository-bridge/-new/repository/#repository","title":"repository","text":"<p>[jvm]\\ val repository: ResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/","title":"Package-level declarations - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/#types","title":"Types","text":"Name Summary ChoreographerDelegateInterceptor [jvm]object ChoreographerDelegateInterceptor EditModeInterceptor [jvm]object EditModeInterceptor IInputMethodManagerInterceptor [jvm]object IInputMethodManagerInterceptorWith ServiceManagerInterceptor returning null for the service, we must override the logic in com.android.internal.view.IInputMethodManager.Stub.asInterface to return the default implementation of IInputMethodManager. MatrixMatrixMultiplicationInterceptor [jvm]object MatrixMatrixMultiplicationInterceptor MatrixVectorMultiplicationInterceptor [jvm]object MatrixVectorMultiplicationInterceptor ResourcesInterceptor [jvm]object ResourcesInterceptor ServiceManagerInterceptor [jvm]object ServiceManagerInterceptorThe ImeTracing class attempts to initialize its mService field in its constructor."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-choreographer-delegate-interceptor/","title":"ChoreographerDelegateInterceptor - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors/ChoreographerDelegateInterceptor</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-choreographer-delegate-interceptor/#choreographerdelegateinterceptor","title":"ChoreographerDelegateInterceptor","text":"<p>[jvm]\\ object ChoreographerDelegateInterceptor</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-choreographer-delegate-interceptor/#functions","title":"Functions","text":"Name Summary intercept [jvm]@JvmStaticfun intercept(choreographer: Choreographer): Long"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-choreographer-delegate-interceptor/intercept/","title":"intercept - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors/ChoreographerDelegateInterceptor/intercept</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-choreographer-delegate-interceptor/intercept/#intercept","title":"intercept","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun intercept(choreographer: Choreographer): Long</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-edit-mode-interceptor/","title":"EditModeInterceptor - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors/EditModeInterceptor</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-edit-mode-interceptor/#editmodeinterceptor","title":"EditModeInterceptor","text":"<p>[jvm]\\ object EditModeInterceptor</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-edit-mode-interceptor/#functions","title":"Functions","text":"Name Summary intercept [jvm]@JvmStaticfun intercept(): Boolean"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-edit-mode-interceptor/intercept/","title":"intercept - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors/EditModeInterceptor/intercept</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-edit-mode-interceptor/intercept/#intercept","title":"intercept","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun intercept(): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-i-input-method-manager-interceptor/","title":"IInputMethodManagerInterceptor - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors/IInputMethodManagerInterceptor</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-i-input-method-manager-interceptor/#iinputmethodmanagerinterceptor","title":"IInputMethodManagerInterceptor","text":"<p>[jvm]\\ object IInputMethodManagerInterceptor</p> <p>With ServiceManagerInterceptor returning null for the service, we must override the logic in com.android.internal.view.IInputMethodManager.Stub.asInterface to return the default implementation of IInputMethodManager.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-i-input-method-manager-interceptor/#functions","title":"Functions","text":"Name Summary interceptAsInterface [jvm]@JvmStaticfun interceptAsInterface(obj: IBinder?): IInputMethodManager"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-i-input-method-manager-interceptor/intercept-as-interface/","title":"interceptAsInterface - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors/IInputMethodManagerInterceptor/interceptAsInterface</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-i-input-method-manager-interceptor/intercept-as-interface/#interceptasinterface","title":"interceptAsInterface","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun interceptAsInterface(obj: IBinder?): IInputMethodManager</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-matrix-matrix-multiplication-interceptor/","title":"MatrixMatrixMultiplicationInterceptor - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors/MatrixMatrixMultiplicationInterceptor</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-matrix-matrix-multiplication-interceptor/#matrixmatrixmultiplicationinterceptor","title":"MatrixMatrixMultiplicationInterceptor","text":"<p>[jvm]\\ object MatrixMatrixMultiplicationInterceptor</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-matrix-matrix-multiplication-interceptor/#functions","title":"Functions","text":"Name Summary intercept [jvm]@JvmStaticfun intercept(result: FloatArray, resultOffset: Int, lhs: FloatArray, lhsOffset: Int, rhs: FloatArray, rhsOffset: Int)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-matrix-matrix-multiplication-interceptor/intercept/","title":"intercept - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors/MatrixMatrixMultiplicationInterceptor/intercept</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-matrix-matrix-multiplication-interceptor/intercept/#intercept","title":"intercept","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun intercept(result: FloatArray, resultOffset: Int, lhs: FloatArray, lhsOffset: Int, rhs: FloatArray, rhsOffset: Int)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-matrix-vector-multiplication-interceptor/","title":"MatrixVectorMultiplicationInterceptor - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors/MatrixVectorMultiplicationInterceptor</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-matrix-vector-multiplication-interceptor/#matrixvectormultiplicationinterceptor","title":"MatrixVectorMultiplicationInterceptor","text":"<p>[jvm]\\ object MatrixVectorMultiplicationInterceptor</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-matrix-vector-multiplication-interceptor/#functions","title":"Functions","text":"Name Summary intercept [jvm]@JvmStaticfun intercept(resultVec: FloatArray, resultVecOffset: Int, lhsMat: FloatArray, lhsMatOffset: Int, rhsVec: FloatArray, rhsVecOffset: Int)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-matrix-vector-multiplication-interceptor/intercept/","title":"intercept - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors/MatrixVectorMultiplicationInterceptor/intercept</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-matrix-vector-multiplication-interceptor/intercept/#intercept","title":"intercept","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun intercept(resultVec: FloatArray, resultVecOffset: Int, lhsMat: FloatArray, lhsMatOffset: Int, rhsVec: FloatArray, rhsVecOffset: Int)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-resources-interceptor/","title":"ResourcesInterceptor - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors/ResourcesInterceptor</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-resources-interceptor/#resourcesinterceptor","title":"ResourcesInterceptor","text":"<p>[jvm]\\ object ResourcesInterceptor</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-resources-interceptor/#functions","title":"Functions","text":"Name Summary intercept [jvm]@JvmStaticfun intercept(context: Context, resId: Int): Typeface?"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-resources-interceptor/intercept/","title":"intercept - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors/ResourcesInterceptor/intercept</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-resources-interceptor/intercept/#intercept","title":"intercept","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun intercept(context: Context, resId: Int): Typeface?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-service-manager-interceptor/","title":"ServiceManagerInterceptor - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors/ServiceManagerInterceptor</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-service-manager-interceptor/#servicemanagerinterceptor","title":"ServiceManagerInterceptor","text":"<p>[jvm]\\ object ServiceManagerInterceptor</p> <p>The ImeTracing class attempts to initialize its mService field in its constructor.</p> <p>Unfortunately, layoutlib\u2019s version of ServiceManager throws an exception immediately.</p> <p>This interceptor overrides ServiceManager.getServiceOrThrow to simply return null instead.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-service-manager-interceptor/#functions","title":"Functions","text":"Name Summary interceptGetServiceOrThrow [jvm]@JvmStaticfun interceptGetServiceOrThrow(name: String): IBinder?"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-service-manager-interceptor/intercept-get-service-or-throw/","title":"interceptGetServiceOrThrow - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.interceptors/ServiceManagerInterceptor/interceptGetServiceOrThrow</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.interceptors/-service-manager-interceptor/intercept-get-service-or-throw/#interceptgetserviceorthrow","title":"interceptGetServiceOrThrow","text":"<p>[jvm]\\</p> <p>@JvmStatic</p> <p>fun interceptGetServiceOrThrow(name: String): IBinder?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/","title":"Package-level declarations - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/#types","title":"Types","text":"Name Summary AaptAttrParser [jvm]interface AaptAttrParserCopied from https://cs.android.com/android-studio/platform/tools/adt/idea/+/858f81bb7c350bc7a05daad36edefd21f74c8cef:android/src/com/android/tools/idea/rendering/parsers/AaptAttrParser.java AaptAttrSnapshot [jvm]class AaptAttrSnapshot(val namespace: String, val prefix: String, val name: String, val id: String, val bundledTag: TagSnapshot) : AttributeSnapshotDerived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/AaptAttrAttributeSnapshot.java AttributeSnapshot [jvm]open class AttributeSnapshot(val namespace: String, val prefix: String?, val name: String, val value: String)Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/AttributeSnapshot.java InMemoryParser [jvm]abstract class InMemoryParser : KXmlParserDerived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/858f81bb7c350bc7a05daad36edefd21f74c8cef:android/src/com/android/tools/idea/rendering/parsers/LayoutPullParser.java;bpv=0;bpt=0 ResourceParser [jvm]class ResourceParser(inputStream: InputStream) : KXmlParserAn XML resource parser that creates a tree of TagSnapshots TagSnapshot [jvm]data class TagSnapshot(val name: String, val namespace: String, val prefix: String?, val attributes: List&lt;AttributeSnapshot&gt;, val children: List&lt;TagSnapshot&gt;, val hasDeclaredAaptAttrs: Boolean = false)Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/TagSnapshot.java"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-parser/","title":"AaptAttrParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AaptAttrParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-parser/#aaptattrparser","title":"AaptAttrParser","text":"<p>[jvm]\\ interface AaptAttrParser</p> <p>Copied from https://cs.android.com/android-studio/platform/tools/adt/idea/+/858f81bb7c350bc7a05daad36edefd21f74c8cef:android/src/com/android/tools/idea/rendering/parsers/AaptAttrParser.java</p> <p>Interface for parsers that support declaration of inlined {@code aapt:attr} attributes</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-parser/#functions","title":"Functions","text":"Name Summary getAaptDeclaredAttrs [jvm]abstract fun getAaptDeclaredAttrs(): Map&lt;String, TagSnapshot&gt;Returns a Map that contains all the <code>aapt:attr</code> elements declared in this or any children parsers. This list can be used to resolve <code>@aapt/_aapt</code> references into this parser."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-parser/get-aapt-declared-attrs/","title":"getAaptDeclaredAttrs - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AaptAttrParser/getAaptDeclaredAttrs</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-parser/get-aapt-declared-attrs/#getaaptdeclaredattrs","title":"getAaptDeclaredAttrs","text":"<p>[jvm]\\ abstract fun getAaptDeclaredAttrs(): Map&lt;String, TagSnapshot&gt;</p> <p>Returns a Map that contains all the <code>aapt:attr</code> elements declared in this or any children parsers. This list can be used to resolve <code>@aapt/_aapt</code> references into this parser.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/","title":"AaptAttrSnapshot - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AaptAttrSnapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/#aaptattrsnapshot","title":"AaptAttrSnapshot","text":"<p>[jvm]\\ class AaptAttrSnapshot(val namespace: String, val prefix: String, val name: String, val id: String, val bundledTag: TagSnapshot) : AttributeSnapshot</p> <p>Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/AaptAttrAttributeSnapshot.java</p> <p>Aapt attributes are attributes that instead of containing a reference, contain the inlined value of the reference. This snapshot will generate a dynamic reference that will be used by the resource resolution to be able to retrieve the inlined value.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/#constructors","title":"Constructors","text":"AaptAttrSnapshot [jvm]constructor(namespace: String, prefix: String, name: String, id: String, bundledTag: TagSnapshot)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/#properties","title":"Properties","text":"Name Summary bundledTag [jvm]val bundledTag: TagSnapshot id [jvm]val id: String name [jvm]open override val name: String namespace [jvm]open override val namespace: String prefix [jvm]open override val prefix: String value [jvm]open val value: String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/#functions","title":"Functions","text":"Name Summary equals [jvm]open operator override fun equals(other: Any?): Boolean hashCode [jvm]open override fun hashCode(): Int toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/-aapt-attr-snapshot/","title":"AaptAttrSnapshot - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AaptAttrSnapshot/AaptAttrSnapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/-aapt-attr-snapshot/#aaptattrsnapshot","title":"AaptAttrSnapshot","text":"<p>[jvm]\\ constructor(namespace: String, prefix: String, name: String, id: String, bundledTag: TagSnapshot)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/bundled-tag/","title":"bundledTag - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AaptAttrSnapshot/bundledTag</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/bundled-tag/#bundledtag","title":"bundledTag","text":"<p>[jvm]\\ val bundledTag: TagSnapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/id/","title":"id - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AaptAttrSnapshot/id</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/id/#id","title":"id","text":"<p>[jvm]\\ val id: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/name/","title":"name - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AaptAttrSnapshot/name</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/name/#name","title":"name","text":"<p>[jvm]\\ open override val name: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/namespace/","title":"namespace - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AaptAttrSnapshot/namespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/namespace/#namespace","title":"namespace","text":"<p>[jvm]\\ open override val namespace: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/prefix/","title":"prefix - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AaptAttrSnapshot/prefix</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-aapt-attr-snapshot/prefix/#prefix","title":"prefix","text":"<p>[jvm]\\ open override val prefix: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/","title":"AttributeSnapshot - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AttributeSnapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/#attributesnapshot","title":"AttributeSnapshot","text":"<p>open class AttributeSnapshot(val namespace: String, val prefix: String?, val name: String, val value: String)</p> <p>Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/AttributeSnapshot.java</p> <p>A snapshot of an attribute value pulled from an XML resource. Used in conjunction with TagSnapshot.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/#inheritors","title":"Inheritors","text":"AaptAttrSnapshot"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/#constructors","title":"Constructors","text":"AttributeSnapshot [jvm]constructor(namespace: String, prefix: String?, name: String, value: String)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/#properties","title":"Properties","text":"Name Summary name [jvm]open val name: String namespace [jvm]open val namespace: String prefix [jvm]open val prefix: String? value [jvm]open val value: String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/#functions","title":"Functions","text":"Name Summary equals [jvm]open operator override fun equals(other: Any?): Boolean hashCode [jvm]open override fun hashCode(): Int toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/-attribute-snapshot/","title":"AttributeSnapshot - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AttributeSnapshot/AttributeSnapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/-attribute-snapshot/#attributesnapshot","title":"AttributeSnapshot","text":"<p>[jvm]\\ constructor(namespace: String, prefix: String?, name: String, value: String)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AttributeSnapshot/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/hash-code/","title":"hashCode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AttributeSnapshot/hashCode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/hash-code/#hashcode","title":"hashCode","text":"<p>[jvm]\\ open override fun hashCode(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/name/","title":"name - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AttributeSnapshot/name</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/name/#name","title":"name","text":"<p>[jvm]\\ open val name: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/namespace/","title":"namespace - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AttributeSnapshot/namespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/namespace/#namespace","title":"namespace","text":"<p>[jvm]\\ open val namespace: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/prefix/","title":"prefix - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AttributeSnapshot/prefix</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/prefix/#prefix","title":"prefix","text":"<p>[jvm]\\ open val prefix: String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/to-string/","title":"toString - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AttributeSnapshot/toString</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/to-string/#tostring","title":"toString","text":"<p>[jvm]\\ open override fun toString(): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/value/","title":"value - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/AttributeSnapshot/value</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-attribute-snapshot/value/#value","title":"value","text":"<p>[jvm]\\ open val value: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/","title":"InMemoryParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/InMemoryParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/#inmemoryparser","title":"InMemoryParser","text":"<p>[jvm]\\ abstract class InMemoryParser : KXmlParser</p> <p>Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/858f81bb7c350bc7a05daad36edefd21f74c8cef:android/src/com/android/tools/idea/rendering/parsers/LayoutPullParser.java;bpv=0;bpt=0</p> <p>A parser implementation that walks an in-memory XML DOM tree.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/#constructors","title":"Constructors","text":"InMemoryParser [jvm]constructor()"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/#properties","title":"Properties","text":"Name Summary isWhitespace [jvm]val isWhitespace: Boolean namespace [jvm]var namespace: String prefix [jvm]val prefix: String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/#functions","title":"Functions","text":"Name Summary defineEntityReplacementText [jvm]open override fun defineEntityReplacementText(p0: String, p1: String) getAttributeCount [jvm]open override fun getAttributeCount(): Int getAttributeName [jvm]open override fun getAttributeName(i: Int): String? getAttributeNamespace [jvm]open override fun getAttributeNamespace(i: Int): String getAttributePrefix [jvm]open override fun getAttributePrefix(i: Int): String? getAttributeType [jvm]open override fun getAttributeType(p0: Int): String getAttributeValue [jvm]open override fun getAttributeValue(i: Int): String?open override fun getAttributeValue(namespace: String?, name: String?): String? getColumnNumber [jvm]open override fun getColumnNumber(): Int getDepth [jvm]open override fun getDepth(): Int getEventType [jvm]open override fun getEventType(): Int getFeature [jvm]open override fun getFeature(p0: String): Boolean getInputEncoding [jvm]open override fun getInputEncoding(): String getLineNumber [jvm]open override fun getLineNumber(): Int getName [jvm]open override fun getName(): String? getNamespaceCount [jvm]open override fun getNamespaceCount(p0: Int): Int getNamespacePrefix [jvm]open override fun getNamespacePrefix(p0: Int): String getNamespaceUri [jvm]open override fun getNamespaceUri(p0: Int): String getPositionDescription [jvm]open override fun getPositionDescription(): String getProperty [jvm]open override fun getProperty(p0: String): Any getText [jvm]open override fun getText(): String getTextCharacters [jvm]open override fun getTextCharacters(p0: IntArray): CharArray isAttributeDefault [jvm]open override fun isAttributeDefault(p0: Int): Boolean isEmptyElementTag [jvm]open override fun isEmptyElementTag(): Boolean next [jvm]open operator override fun next(): Int nextTag [jvm]open override fun nextTag(): Int nextText [jvm]open override fun nextText(): String nextToken [jvm]open override fun nextToken(): Int require [jvm]open override fun require(p0: Int, p1: String, p2: String) rootTag [jvm]abstract fun rootTag(): TagSnapshot setFeature [jvm]open override fun setFeature(p0: String, p1: Boolean) setInput [jvm]open override fun setInput(p0: Reader)open override fun setInput(p0: InputStream, p1: String) setProperty [jvm]open override fun setProperty(p0: String, p1: Any) skipSubTree [jvm]open fun skipSubTree()"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/-in-memory-parser/","title":"InMemoryParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/InMemoryParser/InMemoryParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/-in-memory-parser/#inmemoryparser","title":"InMemoryParser","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-count/","title":"getAttributeCount - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/InMemoryParser/getAttributeCount</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-count/#getattributecount","title":"getAttributeCount","text":"<p>[jvm]\\ open override fun getAttributeCount(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-name/","title":"getAttributeName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/InMemoryParser/getAttributeName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-name/#getattributename","title":"getAttributeName","text":"<p>[jvm]\\ open override fun getAttributeName(i: Int): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-namespace/","title":"getAttributeNamespace - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/InMemoryParser/getAttributeNamespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-namespace/#getattributenamespace","title":"getAttributeNamespace","text":"<p>[jvm]\\ open override fun getAttributeNamespace(i: Int): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-prefix/","title":"getAttributePrefix - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/InMemoryParser/getAttributePrefix</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-prefix/#getattributeprefix","title":"getAttributePrefix","text":"<p>[jvm]\\ open override fun getAttributePrefix(i: Int): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-value/","title":"getAttributeValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/InMemoryParser/getAttributeValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-attribute-value/#getattributevalue","title":"getAttributeValue","text":"<p>[jvm]\\ open override fun getAttributeValue(i: Int): String?</p> <p>open override fun getAttributeValue(namespace: String?, name: String?): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-depth/","title":"getDepth - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/InMemoryParser/getDepth</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-depth/#getdepth","title":"getDepth","text":"<p>[jvm]\\ open override fun getDepth(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-name/","title":"getName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/InMemoryParser/getName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/get-name/#getname","title":"getName","text":"<p>[jvm]\\ open override fun getName(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/next/","title":"next - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/InMemoryParser/next</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/next/#next","title":"next","text":"<p>[jvm]\\ open operator override fun next(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/root-tag/","title":"rootTag - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/InMemoryParser/rootTag</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-in-memory-parser/root-tag/#roottag","title":"rootTag","text":"<p>[jvm]\\ abstract fun rootTag(): TagSnapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/","title":"ResourceParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/ResourceParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/#resourceparser","title":"ResourceParser","text":"<p>[jvm]\\ class ResourceParser(inputStream: InputStream) : KXmlParser</p> <p>An XML resource parser that creates a tree of TagSnapshots</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/#constructors","title":"Constructors","text":"ResourceParser [jvm]constructor(inputStream: InputStream)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/#properties","title":"Properties","text":"Name Summary attributeCount [jvm]val attributeCount: Int depth [jvm]val depth: Int isWhitespace [jvm]val isWhitespace: Boolean name [jvm]val name: String namespace [jvm]var namespace: String prefix [jvm]val prefix: String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/#functions","title":"Functions","text":"Name Summary createTagSnapshot [jvm]fun createTagSnapshot(): TagSnapshot defineEntityReplacementText [jvm]open override fun defineEntityReplacementText(p0: String, p1: String) getAttributeName [jvm]open override fun getAttributeName(p0: Int): String getAttributeNamespace [jvm]open override fun getAttributeNamespace(p0: Int): String getAttributePrefix [jvm]open override fun getAttributePrefix(p0: Int): String getAttributeType [jvm]open override fun getAttributeType(p0: Int): String getAttributeValue [jvm]open override fun getAttributeValue(p0: Int): Stringopen override fun getAttributeValue(p0: String, p1: String): String getColumnNumber [jvm]open override fun getColumnNumber(): Int getEventType [jvm]open override fun getEventType(): Int getFeature [jvm]open override fun getFeature(p0: String): Boolean getInputEncoding [jvm]open override fun getInputEncoding(): String getLineNumber [jvm]open override fun getLineNumber(): Int getNamespaceCount [jvm]open override fun getNamespaceCount(p0: Int): Int getNamespacePrefix [jvm]open override fun getNamespacePrefix(p0: Int): String getNamespaceUri [jvm]open override fun getNamespaceUri(p0: Int): String getPositionDescription [jvm]open override fun getPositionDescription(): String getProperty [jvm]open override fun getProperty(p0: String): Any getText [jvm]open override fun getText(): String getTextCharacters [jvm]open override fun getTextCharacters(p0: IntArray): CharArray isAttributeDefault [jvm]open override fun isAttributeDefault(p0: Int): Boolean isEmptyElementTag [jvm]open override fun isEmptyElementTag(): Boolean next [jvm]open operator override fun next(): Int nextTag [jvm]open override fun nextTag(): Int nextText [jvm]open override fun nextText(): String nextToken [jvm]open override fun nextToken(): Int require [jvm]open override fun require(p0: Int, p1: String, p2: String) setFeature [jvm]open override fun setFeature(p0: String, p1: Boolean) setInput [jvm]open override fun setInput(p0: Reader)open override fun setInput(p0: InputStream, p1: String) setProperty [jvm]open override fun setProperty(p0: String, p1: Any) skipSubTree [jvm]open fun skipSubTree()"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/-resource-parser/","title":"ResourceParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/ResourceParser/ResourceParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/-resource-parser/#resourceparser","title":"ResourceParser","text":"<p>[jvm]\\ constructor(inputStream: InputStream)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/create-tag-snapshot/","title":"createTagSnapshot - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/ResourceParser/createTagSnapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/create-tag-snapshot/#createtagsnapshot","title":"createTagSnapshot","text":"<p>[jvm]\\ fun createTagSnapshot(): TagSnapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/ResourceParser/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-resource-parser/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/","title":"TagSnapshot - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/TagSnapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/#tagsnapshot","title":"TagSnapshot","text":"<p>[jvm]\\ data class TagSnapshot(val name: String, val namespace: String, val prefix: String?, val attributes: List&lt;AttributeSnapshot&gt;, val children: List&lt;TagSnapshot&gt;, val hasDeclaredAaptAttrs: Boolean = false)</p> <p>Derived from https://cs.android.com/android-studio/platform/tools/adt/idea/+/mirror-goog-studio-master-dev:android/src/com/android/tools/idea/rendering/parsers/TagSnapshot.java</p> <p>A snapshot of the state of an xml tag.</p> <p>Used by the rendering architecture to be able to hold a consistent view of the layout files across a long rendering operation without holding read locks, as well as to for example let the property sheet evaluate and paint the values of properties as they were at the time of rendering, not as they are at the current instant.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/#constructors","title":"Constructors","text":"TagSnapshot [jvm]constructor(name: String, namespace: String, prefix: String?, attributes: List&lt;AttributeSnapshot&gt;, children: List&lt;TagSnapshot&gt;, hasDeclaredAaptAttrs: Boolean = false)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/#properties","title":"Properties","text":"Name Summary attributes [jvm]val attributes: List&lt;AttributeSnapshot&gt; children [jvm]val children: List&lt;TagSnapshot&gt; hasDeclaredAaptAttrs [jvm]val hasDeclaredAaptAttrs: Boolean = false name [jvm]val name: String namespace [jvm]val namespace: String next [jvm]var next: TagSnapshot? prefix [jvm]val prefix: String?"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/#functions","title":"Functions","text":"Name Summary printFormatted [jvm]fun printFormatted(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/-tag-snapshot/","title":"TagSnapshot - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/TagSnapshot/TagSnapshot</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/-tag-snapshot/#tagsnapshot","title":"TagSnapshot","text":"<p>[jvm]\\ constructor(name: String, namespace: String, prefix: String?, attributes: List&lt;AttributeSnapshot&gt;, children: List&lt;TagSnapshot&gt;, hasDeclaredAaptAttrs: Boolean = false)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/attributes/","title":"attributes - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/TagSnapshot/attributes</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/attributes/#attributes","title":"attributes","text":"<p>[jvm]\\ val attributes: List&lt;AttributeSnapshot&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/children/","title":"children - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/TagSnapshot/children</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/children/#children","title":"children","text":"<p>[jvm]\\ val children: List&lt;TagSnapshot&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/has-declared-aapt-attrs/","title":"hasDeclaredAaptAttrs - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/TagSnapshot/hasDeclaredAaptAttrs</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/has-declared-aapt-attrs/#hasdeclaredaaptattrs","title":"hasDeclaredAaptAttrs","text":"<p>[jvm]\\ val hasDeclaredAaptAttrs: Boolean = false</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/name/","title":"name - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/TagSnapshot/name</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/name/#name","title":"name","text":"<p>[jvm]\\ val name: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/namespace/","title":"namespace - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/TagSnapshot/namespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/namespace/#namespace","title":"namespace","text":"<p>[jvm]\\ val namespace: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/next/","title":"next - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/TagSnapshot/next</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/next/#next","title":"next","text":"<p>[jvm]\\ var next: TagSnapshot?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/prefix/","title":"prefix - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/TagSnapshot/prefix</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/prefix/#prefix","title":"prefix","text":"<p>[jvm]\\ val prefix: String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/print-formatted/","title":"printFormatted - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/TagSnapshot/printFormatted</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/print-formatted/#printformatted","title":"printFormatted","text":"<p>[jvm]\\ fun printFormatted(): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/TagSnapshot/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/-companion/#properties","title":"Properties","text":"Name Summary indent [jvm]var indent: Int"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/-companion/indent/","title":"indent - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.parsers/TagSnapshot/Companion/indent</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.parsers/-tag-snapshot/-companion/indent/#indent","title":"indent","text":"<p>[jvm]\\ var indent: Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/","title":"Package-level declarations - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/#types","title":"Types","text":"Name Summary AarSourceResourceRepository [jvm]open class AarSourceResourceRepository(loader: RepositoryLoader&lt;out AarSourceResourceRepository&gt;, val libraryName: String?) : AbstractAarResourceRepositoryA resource repository representing unpacked contents of a non-namespaced AAR. AbstractAarResourceRepository [jvm]abstract class AbstractAarResourceRepository : AbstractResourceRepository, LoadableResourceRepositoryPorted from: AbstractAarResourceRepository.java CommentTrackingXmlPullParser [jvm]open class CommentTrackingXmlPullParser : KXmlParserPorted from: CommentTrackingXmlPullParser.java FrameworkResourceRepository [jvm]class FrameworkResourceRepository : AarSourceResourceRepositoryRepository of resources of the Android framework. Most client code should use the ResourceRepositoryManager.getFrameworkResources method to obtain framework resources. LoadableResourceRepository [jvm]interface LoadableResourceRepository : SingleNamespaceResourceRepositoryRepository of resources loaded from a file or a directory on disk. LocalResourceRepository [jvm]abstract class LocalResourceRepository : AbstractResourceRepositoryRepository for Android application resources, e.g. those that show up in {@code R}, not {@code android.R} (which are referred to as framework resources.). NamespaceResolver [jvm]class NamespaceResolver : ResourceNamespace.ResolverPorted from: NamespaceResolver.java RepositoryConfiguration [jvm]class RepositoryConfiguration(repository: LoadableResourceRepository, val folderConfiguration: FolderConfiguration)A (LoadableResourceRepository, FolderConfiguration) pair. Instances of BasicResourceItem contain a reference to an RepositoryConfiguration instead of two separate references to LoadableResourceRepository and FolderConfiguration. This indirection saves memory because the number of RepositoryConfiguration instances is a tiny fraction of the number of BasicResourceItem instances. RepositoryLoader [jvm]abstract class RepositoryLoader&lt;T : LoadableResourceRepository&gt;(val resourceDirectoryOrFile: Path, val resourceFilesAndFolders: Collection&lt;PathString&gt;?, val namespace: ResourceNamespace) : FileFilterPorted from: RepositoryLoader.java ResourceFile [jvm]class ResourceFile(val file: File?, val configuration: RepositoryConfiguration) : ResourceSourceFile, Iterable&lt;BasicResourceItem&gt; Ported from: ResourceItemSources.kt ResourceFolderRepository [jvm]class ResourceFolderRepository(val resourceDir: File, namespace: ResourceNamespace) : LocalResourceRepository, LoadableResourceRepositoryThe ResourceFolderRepository is a leaf in the repository tree, and is used for user editable resources (e.g. the resources in the project, typically the res/main source set.) ResourceNamespacing [jvm]enum ResourceNamespacing : Enum&lt;ResourceNamespacing&gt; ResourceSerializationUtil [jvm]object ResourceSerializationUtilPorted from: ResourceSerializationUtil.java ResourceSourceFile [jvm]interface ResourceSourceFilePorted from: ResourceSourceFile.kt ResourceSourceFileImpl [jvm]data class ResourceSourceFileImpl(val relativePath: String?, val configuration: RepositoryConfiguration) : ResourceSourceFilePorted from: ResourceSourceFileImpl.kt ResourceUrlParser [jvm]class ResourceUrlParserPorted from: ResourceUrlParser.java"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/","title":"AarSourceResourceRepository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AarSourceResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/#aarsourceresourcerepository","title":"AarSourceResourceRepository","text":"<p>open class AarSourceResourceRepository(loader: RepositoryLoader&lt;out AarSourceResourceRepository&gt;, val libraryName: String?) : AbstractAarResourceRepository</p> <p>A resource repository representing unpacked contents of a non-namespaced AAR.</p> <p>For performance reasons ID resources defined using @+id syntax in layout XML files are obtained from R.txt instead, when it is available. This means that ResourceItem.getOriginalSource method may return null for such ID resources.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/#inheritors","title":"Inheritors","text":"FrameworkResourceRepository"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/#constructors","title":"Constructors","text":"AarSourceResourceRepository [jvm]constructor(loader: RepositoryLoader&lt;out AarSourceResourceRepository&gt;, libraryName: String?)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/#properties","title":"Properties","text":"Name Summary displayName [jvm]open override val displayName: StringReturns the name of this resource repository to display in the UI. libraryName [jvm]open override val libraryName: String?Returns the name of the library, or null if this is not an AAR resource repository. origin [jvm]open override val origin: PathReturns the file or directory this resource repository was loaded from. Resource repositories loaded from the same file or directory with different file filtering options have the same origin."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/#functions","title":"Functions","text":"Name Summary accept [jvm]open override fun accept(visitor: ResourceVisitor): ResourceVisitor.VisitResult containsUserDefinedResources [jvm]open override fun containsUserDefinedResources(): Boolean deserializeFileResourceItem [jvm]open fun deserializeFileResourceItem(stream: Base128InputStream, resourceType: ResourceType, name: String, visibility: ResourceVisibility, configurations: List&lt;RepositoryConfiguration&gt;): BasicFileResourceItemCreates a BasicFileResourceItem by reading its contents from the given stream. deserializeResourceSourceFile [jvm]open fun deserializeResourceSourceFile(stream: Base128InputStream, configurations: List&lt;RepositoryConfiguration&gt;): ResourceSourceFileCreates a ResourceSourceFile by reading its contents from the given stream. getAllResources [jvm]open fun getAllResources(): MutableList&lt;ResourceItem&gt; getLeafResourceRepositories [jvm]abstract fun getLeafResourceRepositories(): MutableCollection&lt;SingleNamespaceResourceRepository&gt; getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaces [jvm]abstract fun getNamespaces(): MutableSet&lt;ResourceNamespace&gt; getOriginalSourceFile [jvm]open fun getOriginalSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathString?Produces a PathString to be returned by the BasicResourceItem.getOriginalSource method. getPackageName [jvm]open override fun getPackageName(): String? getPublicResources [jvm]open override fun getPublicResources(namespace: ResourceNamespace, type: ResourceType): Collection&lt;ResourceItem&gt; getResourceNames [jvm]open fun getResourceNames(namespace: ResourceNamespace, resourceType: ResourceType): MutableSet&lt;String&gt; getResources [jvm]open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType): ListMultimap&lt;String, ResourceItem&gt;open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType, resourceName: String): List&lt;ResourceItem&gt;open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType, filter: Predicate&lt;ResourceItem&gt;): MutableList&lt;ResourceItem&gt;open fun getResources(reference: ResourceReference): MutableList&lt;ResourceItem&gt; getResourceTypes [jvm]open override fun getResourceTypes(namespace: ResourceNamespace): MutableSet&lt;ResourceType&gt; getResourceUrl [jvm]open override fun getResourceUrl(relativeResourcePath: String): StringProduces a string to be returned by the BasicResourceItem.getValue method. The string represents an URL in one of the following formats: getSourceFile [jvm]open override fun getSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathStringProduces a PathString to be returned by the BasicResourceItem.getSource method. hasResources [jvm]open override fun hasResources(namespace: ResourceNamespace, resourceType: ResourceType): Booleanopen override fun hasResources(namespace: ResourceNamespace, resourceType: ResourceType, resourceName: String): Boolean loadFromStream [jvm]fun loadFromStream(stream: Base128InputStream, stringCache: Map&lt;String, String&gt;, namespaceResolverCache: MutableMap&lt;NamespaceResolver, NamespaceResolver&gt;?)Loads contents of the repository from the given input stream. toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/-aar-source-resource-repository/","title":"AarSourceResourceRepository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AarSourceResourceRepository/AarSourceResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/-aar-source-resource-repository/#aarsourceresourcerepository","title":"AarSourceResourceRepository","text":"<p>[jvm]\\ constructor(loader: RepositoryLoader&lt;out AarSourceResourceRepository&gt;, libraryName: String?)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/get-package-name/","title":"getPackageName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AarSourceResourceRepository/getPackageName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/get-package-name/#getpackagename","title":"getPackageName","text":"<p>[jvm]\\ open override fun getPackageName(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/get-resource-url/","title":"getResourceUrl - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AarSourceResourceRepository/getResourceUrl</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/get-resource-url/#getresourceurl","title":"getResourceUrl","text":"<p>[jvm]\\ open override fun getResourceUrl(relativeResourcePath: String): String</p> <p>Produces a string to be returned by the BasicResourceItem.getValue method. The string represents an URL in one of the following formats:</p> <ul> <li>file URL, e.g. \"file:///foo/bar/res/layout/my_layout.xml\"</li> <li>URL of a zipped element inside the res.apk file, e.g. \"apk:///foo/bar/res.apk!/res/layout/my_layout.xml\"</li> </ul>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/get-resource-url/#return","title":"Return","text":"<p>the URL pointing to the file resource</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/get-resource-url/#parameters","title":"Parameters","text":"<p>jvm</p> relativeResourcePath the relative path of a file resource"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/get-source-file/","title":"getSourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AarSourceResourceRepository/getSourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/get-source-file/#getsourcefile","title":"getSourceFile","text":"<p>[jvm]\\ open override fun getSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathString</p> <p>Produces a PathString to be returned by the BasicResourceItem.getSource method.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/get-source-file/#return","title":"Return","text":"<p>the PathString to be returned by the BasicResourceItem.getSource method</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/get-source-file/#parameters","title":"Parameters","text":"<p>jvm</p> relativeResourcePath the relative path of the file the resource was created from forFileResource true is the resource is a file resource, false if it is a value resource"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/load-from-stream/","title":"loadFromStream - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AarSourceResourceRepository/loadFromStream</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/load-from-stream/#loadfromstream","title":"loadFromStream","text":"<p>[jvm]\\ fun loadFromStream(stream: Base128InputStream, stringCache: Map&lt;String, String&gt;, namespaceResolverCache: MutableMap&lt;NamespaceResolver, NamespaceResolver&gt;?)</p> <p>Loads contents of the repository from the given input stream.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/origin/","title":"origin - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AarSourceResourceRepository/origin</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/origin/#origin","title":"origin","text":"<p>[jvm]\\ open override val origin: Path</p> <p>Returns the file or directory this resource repository was loaded from. Resource repositories loaded from the same file or directory with different file filtering options have the same origin.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/to-string/","title":"toString - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AarSourceResourceRepository/toString</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/to-string/#tostring","title":"toString","text":"<p>[jvm]\\ open override fun toString(): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AarSourceResourceRepository/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/-companion/#functions","title":"Functions","text":"Name Summary create [jvm]fun create(resourceDirectoryOrFile: Path, libraryName: String): AarSourceResourceRepositoryfun create(resourceFolderRoot: PathString, resourceFolderResources: Collection&lt;PathString&gt;?, libraryName: String): AarSourceResourceRepositoryCreates and loads a resource repository."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/-companion/create/","title":"create - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AarSourceResourceRepository/Companion/create</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/-companion/create/#create","title":"create","text":"<p>[jvm]\\ fun create(resourceDirectoryOrFile: Path, libraryName: String): AarSourceResourceRepository</p> <p>Creates and loads a resource repository.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/-companion/create/#return","title":"Return","text":"<p>the created resource repository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/-companion/create/#parameters","title":"Parameters","text":"<p>jvm</p> resourceDirectoryOrFile the res directory or an AAR file containing resources libraryName the name of the library <p>[jvm]\\ fun create(resourceFolderRoot: PathString, resourceFolderResources: Collection&lt;PathString&gt;?, libraryName: String): AarSourceResourceRepository</p> <p>Creates and loads a resource repository.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/-companion/create/#return_1","title":"Return","text":"<p>the created resource repository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-aar-source-resource-repository/-companion/create/#parameters_1","title":"Parameters","text":"<p>jvm</p> resourceFolderRoot specifies the resource files to be loaded. The list of files to be loaded can be restricted by providing a not null <code>resourceFolderResources</code> list of files and subdirectories that should be loaded. resourceFolderResources A null value indicates that all files and subdirectories in <code>resourceFolderRoot</code> should be loaded. Otherwise files and subdirectories specified in <code>resourceFolderResources</code> are loaded. libraryName the name of the library"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/","title":"AbstractAarResourceRepository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AbstractAarResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/#abstractaarresourcerepository","title":"AbstractAarResourceRepository","text":"<p>abstract class AbstractAarResourceRepository : AbstractResourceRepository, LoadableResourceRepository</p> <p>Ported from: AbstractAarResourceRepository.java</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/#inheritors","title":"Inheritors","text":"AarSourceResourceRepository"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/#properties","title":"Properties","text":"Name Summary displayName [jvm]open override val displayName: StringReturns the name of this resource repository to display in the UI. libraryName [jvm]open override val libraryName: String?Returns the name of the library, or null if this is not an AAR resource repository. origin [jvm]abstract val origin: PathReturns the file or directory this resource repository was loaded from. Resource repositories loaded from the same file or directory with different file filtering options have the same origin."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/#functions","title":"Functions","text":"Name Summary accept [jvm]open override fun accept(visitor: ResourceVisitor): ResourceVisitor.VisitResult containsUserDefinedResources [jvm]open override fun containsUserDefinedResources(): Boolean deserializeFileResourceItem [jvm]open fun deserializeFileResourceItem(stream: Base128InputStream, resourceType: ResourceType, name: String, visibility: ResourceVisibility, configurations: List&lt;RepositoryConfiguration&gt;): BasicFileResourceItemCreates a BasicFileResourceItem by reading its contents from the given stream. deserializeResourceSourceFile [jvm]open fun deserializeResourceSourceFile(stream: Base128InputStream, configurations: List&lt;RepositoryConfiguration&gt;): ResourceSourceFileCreates a ResourceSourceFile by reading its contents from the given stream. getAllResources [jvm]open fun getAllResources(): MutableList&lt;ResourceItem&gt; getLeafResourceRepositories [jvm]abstract fun getLeafResourceRepositories(): MutableCollection&lt;SingleNamespaceResourceRepository&gt; getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaces [jvm]abstract fun getNamespaces(): MutableSet&lt;ResourceNamespace&gt; getOriginalSourceFile [jvm]open fun getOriginalSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathString?Produces a PathString to be returned by the BasicResourceItem.getOriginalSource method. getPackageName [jvm]abstract fun getPackageName(): String getPublicResources [jvm]open override fun getPublicResources(namespace: ResourceNamespace, type: ResourceType): Collection&lt;ResourceItem&gt; getResourceNames [jvm]open fun getResourceNames(namespace: ResourceNamespace, resourceType: ResourceType): MutableSet&lt;String&gt; getResources [jvm]open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType): ListMultimap&lt;String, ResourceItem&gt;open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType, resourceName: String): List&lt;ResourceItem&gt;open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType, filter: Predicate&lt;ResourceItem&gt;): MutableList&lt;ResourceItem&gt;open fun getResources(reference: ResourceReference): MutableList&lt;ResourceItem&gt; getResourceTypes [jvm]open override fun getResourceTypes(namespace: ResourceNamespace): MutableSet&lt;ResourceType&gt; getResourceUrl [jvm]abstract fun getResourceUrl(relativeResourcePath: String): StringProduces a string to be returned by the BasicResourceItem.getValue method. The string represents an URL in one of the following formats: getSourceFile [jvm]abstract fun getSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathStringProduces a PathString to be returned by the BasicResourceItem.getSource method. hasResources [jvm]open override fun hasResources(namespace: ResourceNamespace, resourceType: ResourceType): Booleanopen override fun hasResources(namespace: ResourceNamespace, resourceType: ResourceType, resourceName: String): Boolean"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/accept/","title":"accept - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AbstractAarResourceRepository/accept</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/accept/#accept","title":"accept","text":"<p>[jvm]\\ open override fun accept(visitor: ResourceVisitor): ResourceVisitor.VisitResult</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/contains-user-defined-resources/","title":"containsUserDefinedResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AbstractAarResourceRepository/containsUserDefinedResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/contains-user-defined-resources/#containsuserdefinedresources","title":"containsUserDefinedResources","text":"<p>[jvm]\\ open override fun containsUserDefinedResources(): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/display-name/","title":"displayName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AbstractAarResourceRepository/displayName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/display-name/#displayname","title":"displayName","text":"<p>[jvm]\\ open override val displayName: String</p> <p>Returns the name of this resource repository to display in the UI.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/get-namespace/","title":"getNamespace - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AbstractAarResourceRepository/getNamespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/get-namespace/#getnamespace","title":"getNamespace","text":"<p>[jvm]\\ open override fun getNamespace(): ResourceNamespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/get-public-resources/","title":"getPublicResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AbstractAarResourceRepository/getPublicResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/get-public-resources/#getpublicresources","title":"getPublicResources","text":"<p>[jvm]\\ open override fun getPublicResources(namespace: ResourceNamespace, type: ResourceType): Collection&lt;ResourceItem&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/get-resources/","title":"getResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AbstractAarResourceRepository/getResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/get-resources/#getresources","title":"getResources","text":"<p>[jvm]\\ open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType, resourceName: String): List&lt;ResourceItem&gt;</p> <p>open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType): ListMultimap&lt;String, ResourceItem&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/library-name/","title":"libraryName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/AbstractAarResourceRepository/libraryName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-abstract-aar-resource-repository/library-name/#libraryname","title":"libraryName","text":"<p>[jvm]\\ open override val libraryName: String?</p> <p>Returns the name of the library, or null if this is not an AAR resource repository.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/","title":"CommentTrackingXmlPullParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/CommentTrackingXmlPullParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/#commenttrackingxmlpullparser","title":"CommentTrackingXmlPullParser","text":"<p>[jvm]\\ open class CommentTrackingXmlPullParser : KXmlParser</p> <p>Ported from: CommentTrackingXmlPullParser.java</p> <p>An XmlPullParser that keeps track of the last comment preceding an XML tag and special comments that are used in the framework resource files for describing groups of \"attr\" resources. Here is an example of an \"attr\" group comment:</p> <pre>\n&lt;!-- =========== --&gt;\n&lt;!-- Text styles --&gt;\n&lt;!-- =========== --&gt;\n&lt;eat-comment/&gt;\n</pre> <p>*</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/#constructors","title":"Constructors","text":"CommentTrackingXmlPullParser [jvm]constructor()"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/#properties","title":"Properties","text":"Name Summary attrGroupComment [jvm]val attrGroupComment: String?Returns the name of the current \"attr\" group, e.g. \"Button Styles\" group for \"buttonStyleSmall\" \"attr\" tag. attributeCount [jvm]val attributeCount: Int depth [jvm]val depth: Int isWhitespace [jvm]val isWhitespace: Boolean lastComment [jvm]var lastComment: String?Returns the last encountered comment that is not an ASCII art. name [jvm]val name: String namespace [jvm]var namespace: String prefix [jvm]val prefix: String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/#functions","title":"Functions","text":"Name Summary defineEntityReplacementText [jvm]open override fun defineEntityReplacementText(p0: String, p1: String) getAttributeName [jvm]open override fun getAttributeName(p0: Int): String getAttributeNamespace [jvm]open override fun getAttributeNamespace(p0: Int): String getAttributePrefix [jvm]open override fun getAttributePrefix(p0: Int): String getAttributeType [jvm]open override fun getAttributeType(p0: Int): String getAttributeValue [jvm]open override fun getAttributeValue(p0: Int): Stringopen override fun getAttributeValue(p0: String, p1: String): String getColumnNumber [jvm]open override fun getColumnNumber(): Int getEventType [jvm]open override fun getEventType(): Int getFeature [jvm]open override fun getFeature(p0: String): Boolean getInputEncoding [jvm]open override fun getInputEncoding(): String getLineNumber [jvm]open override fun getLineNumber(): Int getNamespaceCount [jvm]open override fun getNamespaceCount(p0: Int): Int getNamespacePrefix [jvm]open override fun getNamespacePrefix(p0: Int): String getNamespaceUri [jvm]open override fun getNamespaceUri(p0: Int): String getPositionDescription [jvm]open override fun getPositionDescription(): String getProperty [jvm]open override fun getProperty(p0: String): Any getText [jvm]open override fun getText(): String getTextCharacters [jvm]open override fun getTextCharacters(p0: IntArray): CharArray isAttributeDefault [jvm]open override fun isAttributeDefault(p0: Int): Boolean isEmptyElementTag [jvm]open override fun isEmptyElementTag(): Boolean next [jvm]open operator override fun next(): Int nextTag [jvm]open override fun nextTag(): Int nextText [jvm]open override fun nextText(): String nextToken [jvm]open override fun nextToken(): Int require [jvm]open override fun require(p0: Int, p1: String, p2: String) setFeature [jvm]open override fun setFeature(p0: String, p1: Boolean) setInput [jvm]open override fun setInput(reader: Reader)open override fun setInput(inputStream: InputStream, encoding: String?) setProperty [jvm]open override fun setProperty(p0: String, p1: Any) skipSubTree [jvm]open fun skipSubTree()"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/-comment-tracking-xml-pull-parser/","title":"CommentTrackingXmlPullParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/CommentTrackingXmlPullParser/CommentTrackingXmlPullParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/-comment-tracking-xml-pull-parser/#commenttrackingxmlpullparser","title":"CommentTrackingXmlPullParser","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/attr-group-comment/","title":"attrGroupComment - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/CommentTrackingXmlPullParser/attrGroupComment</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/attr-group-comment/#attrgroupcomment","title":"attrGroupComment","text":"<p>[jvm]\\ val attrGroupComment: String?</p> <p>Returns the name of the current \"attr\" group, e.g. \"Button Styles\" group for \"buttonStyleSmall\" \"attr\" tag.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/last-comment/","title":"lastComment - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/CommentTrackingXmlPullParser/lastComment</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/last-comment/#lastcomment","title":"lastComment","text":"<p>[jvm]\\ var lastComment: String?</p> <p>Returns the last encountered comment that is not an ASCII art.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/next-token/","title":"nextToken - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/CommentTrackingXmlPullParser/nextToken</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/next-token/#nexttoken","title":"nextToken","text":"<p>[jvm]\\ open override fun nextToken(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/next/","title":"next - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/CommentTrackingXmlPullParser/next</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/next/#next","title":"next","text":"<p>[jvm]\\ open operator override fun next(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/set-input/","title":"setInput - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/CommentTrackingXmlPullParser/setInput</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/set-input/#setinput","title":"setInput","text":"<p>[jvm]\\ open override fun setInput(reader: Reader)</p> <p>open override fun setInput(inputStream: InputStream, encoding: String?)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/CommentTrackingXmlPullParser/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-comment-tracking-xml-pull-parser/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/","title":"FrameworkResourceRepository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/FrameworkResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/#frameworkresourcerepository","title":"FrameworkResourceRepository","text":"<p>class FrameworkResourceRepository : AarSourceResourceRepository</p> <p>Repository of resources of the Android framework. Most client code should use the ResourceRepositoryManager.getFrameworkResources method to obtain framework resources.</p> <p>The repository can be loaded either from a res directory containing XML files, or from framework_res.jar file, or from a binary cache file located under the directory returned by the PathManager.getSystemPath method. This binary cache file can be created as a side effect of loading the repository from a res directory.</p> <p>Loading from framework_res.jar or a binary cache file is 3-4 times faster than loading from res directory.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/#see-also","title":"See also","text":"FrameworkResJarCreator"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/#properties","title":"Properties","text":"Name Summary displayName [jvm]open override val displayName: StringReturns the name of this resource repository to display in the UI. languageGroups [jvm]val languageGroups: MutableSet&lt;String&gt; libraryName [jvm]open override val libraryName: String?Returns the name of the library, or null if this is not an AAR resource repository. origin [jvm]open override val origin: PathReturns the file or directory this resource repository was loaded from. Resource repositories loaded from the same file or directory with different file filtering options have the same origin."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/#functions","title":"Functions","text":"Name Summary accept [jvm]open override fun accept(visitor: ResourceVisitor): ResourceVisitor.VisitResult containsLanguages [jvm]fun containsLanguages(languages: Set&lt;String&gt;): BooleanChecks if the repository contains resources for the given set of languages. containsUserDefinedResources [jvm]open override fun containsUserDefinedResources(): Boolean deserializeFileResourceItem [jvm]open fun deserializeFileResourceItem(stream: Base128InputStream, resourceType: ResourceType, name: String, visibility: ResourceVisibility, configurations: List&lt;RepositoryConfiguration&gt;): BasicFileResourceItemCreates a BasicFileResourceItem by reading its contents from the given stream. deserializeResourceSourceFile [jvm]open fun deserializeResourceSourceFile(stream: Base128InputStream, configurations: List&lt;RepositoryConfiguration&gt;): ResourceSourceFileCreates a ResourceSourceFile by reading its contents from the given stream. getAllResources [jvm]open fun getAllResources(): MutableList&lt;ResourceItem&gt; getLeafResourceRepositories [jvm]abstract fun getLeafResourceRepositories(): MutableCollection&lt;SingleNamespaceResourceRepository&gt; getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaces [jvm]abstract fun getNamespaces(): MutableSet&lt;ResourceNamespace&gt; getOriginalSourceFile [jvm]open fun getOriginalSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathString?Produces a PathString to be returned by the BasicResourceItem.getOriginalSource method. getPackageName [jvm]open override fun getPackageName(): String? getPublicResources [jvm]open override fun getPublicResources(namespace: ResourceNamespace, type: ResourceType): Collection&lt;ResourceItem&gt; getResourceNames [jvm]open fun getResourceNames(namespace: ResourceNamespace, resourceType: ResourceType): MutableSet&lt;String&gt; getResources [jvm]open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType): ListMultimap&lt;String, ResourceItem&gt;open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType, resourceName: String): List&lt;ResourceItem&gt;open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType, filter: Predicate&lt;ResourceItem&gt;): MutableList&lt;ResourceItem&gt;open fun getResources(reference: ResourceReference): MutableList&lt;ResourceItem&gt; getResourceTypes [jvm]open override fun getResourceTypes(namespace: ResourceNamespace): Set&lt;ResourceType&gt; getResourceUrl [jvm]open override fun getResourceUrl(relativeResourcePath: String): StringProduces a string to be returned by the BasicResourceItem.getValue method. The string represents an URL in one of the following formats: getSourceFile [jvm]open override fun getSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathStringProduces a PathString to be returned by the BasicResourceItem.getSource method. hasResources [jvm]open override fun hasResources(namespace: ResourceNamespace, resourceType: ResourceType): Booleanopen override fun hasResources(namespace: ResourceNamespace, resourceType: ResourceType, resourceName: String): Boolean loadFromStream [jvm]fun loadFromStream(stream: Base128InputStream, stringCache: Map&lt;String, String&gt;, namespaceResolverCache: MutableMap&lt;NamespaceResolver, NamespaceResolver&gt;?)Loads contents of the repository from the given input stream. loadMissingLanguages [jvm]fun loadMissingLanguages(languagesToLoad: Set&lt;String&gt;?): FrameworkResourceRepositoryLoads resources for requested languages that are not present in this resource repository. toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/contains-languages/","title":"containsLanguages - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/FrameworkResourceRepository/containsLanguages</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/contains-languages/#containslanguages","title":"containsLanguages","text":"<p>[jvm]\\ fun containsLanguages(languages: Set&lt;String&gt;): Boolean</p> <p>Checks if the repository contains resources for the given set of languages.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/contains-languages/#return","title":"Return","text":"<p>true if the repository contains resources for all requested languages</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/contains-languages/#parameters","title":"Parameters","text":"<p>jvm</p> languages the set of ISO 639 language codes to check"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/get-package-name/","title":"getPackageName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/FrameworkResourceRepository/getPackageName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/get-package-name/#getpackagename","title":"getPackageName","text":"<p>[jvm]\\ open override fun getPackageName(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/get-resource-types/","title":"getResourceTypes - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/FrameworkResourceRepository/getResourceTypes</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/get-resource-types/#getresourcetypes","title":"getResourceTypes","text":"<p>[jvm]\\ open override fun getResourceTypes(namespace: ResourceNamespace): Set&lt;ResourceType&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/get-resource-url/","title":"getResourceUrl - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/FrameworkResourceRepository/getResourceUrl</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/get-resource-url/#getresourceurl","title":"getResourceUrl","text":"<p>[jvm]\\ open override fun getResourceUrl(relativeResourcePath: String): String</p> <p>Produces a string to be returned by the BasicResourceItem.getValue method. The string represents an URL in one of the following formats:</p> <ul> <li>file URL, e.g. \"file:///foo/bar/res/layout/my_layout.xml\"</li> <li>URL of a zipped element inside the res.apk file, e.g. \"apk:///foo/bar/res.apk!/res/layout/my_layout.xml\"</li> </ul>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/get-resource-url/#return","title":"Return","text":"<p>the URL pointing to the file resource</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/get-resource-url/#parameters","title":"Parameters","text":"<p>jvm</p> relativeResourcePath the relative path of a file resource"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/get-source-file/","title":"getSourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/FrameworkResourceRepository/getSourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/get-source-file/#getsourcefile","title":"getSourceFile","text":"<p>[jvm]\\ open override fun getSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathString</p> <p>Produces a PathString to be returned by the BasicResourceItem.getSource method.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/get-source-file/#return","title":"Return","text":"<p>the PathString to be returned by the BasicResourceItem.getSource method</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/get-source-file/#parameters","title":"Parameters","text":"<p>jvm</p> relativeResourcePath the relative path of the file the resource was created from forFileResource true is the resource is a file resource, false if it is a value resource"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/language-groups/","title":"languageGroups - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/FrameworkResourceRepository/languageGroups</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/language-groups/#languagegroups","title":"languageGroups","text":"<p>[jvm]\\ val languageGroups: MutableSet&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/load-missing-languages/","title":"loadMissingLanguages - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/FrameworkResourceRepository/loadMissingLanguages</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/load-missing-languages/#loadmissinglanguages","title":"loadMissingLanguages","text":"<p>[jvm]\\ fun loadMissingLanguages(languagesToLoad: Set&lt;String&gt;?): FrameworkResourceRepository</p> <p>Loads resources for requested languages that are not present in this resource repository.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/load-missing-languages/#return","title":"Return","text":"<p>the new resource repository with additional resources, or this resource repository if it already contained all requested languages</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/load-missing-languages/#parameters","title":"Parameters","text":"<p>jvm</p> languagesToLoad the set of ISO 639 language codes, or null to load all available languages"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/FrameworkResourceRepository/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/-companion/#functions","title":"Functions","text":"Name Summary create [jvm]fun create(resourceDirectoryOrFile: Path, languagesToLoad: Set&lt;String&gt;?, useCompiled9Patches: Boolean): FrameworkResourceRepositoryCreates an Android framework resource repository. getLanguageGroup [jvm]fun getLanguageGroup(config: FolderConfiguration): String getResourceTableNameForLanguage [jvm]fun getResourceTableNameForLanguage(language: String): StringReturns the name of the resource table file containing resources for the given language."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/-companion/create/","title":"create - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/FrameworkResourceRepository/Companion/create</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/-companion/create/#create","title":"create","text":"<p>[jvm]\\ fun create(resourceDirectoryOrFile: Path, languagesToLoad: Set&lt;String&gt;?, useCompiled9Patches: Boolean): FrameworkResourceRepository</p> <p>Creates an Android framework resource repository.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/-companion/create/#return","title":"Return","text":"<p>the created resource repository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/-companion/create/#parameters","title":"Parameters","text":"<p>jvm</p> resourceDirectoryOrFile the res directory or a jar file containing resources of the Android framework languagesToLoad the set of ISO 639 language codes, or null to load all available languages useCompiled9Patches whether to provide the compiled or non-compiled version of the framework 9-patches"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/-companion/get-language-group/","title":"getLanguageGroup - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/FrameworkResourceRepository/Companion/getLanguageGroup</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/-companion/get-language-group/#getlanguagegroup","title":"getLanguageGroup","text":"<p>[jvm]\\ fun getLanguageGroup(config: FolderConfiguration): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/-companion/get-resource-table-name-for-language/","title":"getResourceTableNameForLanguage - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/FrameworkResourceRepository/Companion/getResourceTableNameForLanguage</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/-companion/get-resource-table-name-for-language/#getresourcetablenameforlanguage","title":"getResourceTableNameForLanguage","text":"<p>[jvm]\\ fun getResourceTableNameForLanguage(language: String): String</p> <p>Returns the name of the resource table file containing resources for the given language.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/-companion/get-resource-table-name-for-language/#return","title":"Return","text":"<p>the file name</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-framework-resource-repository/-companion/get-resource-table-name-for-language/#parameters","title":"Parameters","text":"<p>jvm</p> language the two-letter language abbreviation, or an empty string for language-neutral resources"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/","title":"LoadableResourceRepository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/LoadableResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/#loadableresourcerepository","title":"LoadableResourceRepository","text":"<p>interface LoadableResourceRepository : SingleNamespaceResourceRepository</p> <p>Repository of resources loaded from a file or a directory on disk.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/#inheritors","title":"Inheritors","text":"AbstractAarResourceRepository ResourceFolderRepository"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/#properties","title":"Properties","text":"Name Summary displayName [jvm]abstract val displayName: StringReturns the name of this resource repository to display in the UI. libraryName [jvm]abstract val libraryName: String?Returns the name of the library, or null if this is not an AAR resource repository. origin [jvm]abstract val origin: PathReturns the file or directory this resource repository was loaded from. Resource repositories loaded from the same file or directory with different file filtering options have the same origin."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/#functions","title":"Functions","text":"Name Summary accept [jvm]abstract fun accept(visitor: ResourceVisitor): ResourceVisitor.VisitResult containsUserDefinedResources [jvm]abstract fun containsUserDefinedResources(): Boolean deserializeFileResourceItem [jvm]open fun deserializeFileResourceItem(stream: Base128InputStream, resourceType: ResourceType, name: String, visibility: ResourceVisibility, configurations: List&lt;RepositoryConfiguration&gt;): BasicFileResourceItemCreates a BasicFileResourceItem by reading its contents from the given stream. deserializeResourceSourceFile [jvm]open fun deserializeResourceSourceFile(stream: Base128InputStream, configurations: List&lt;RepositoryConfiguration&gt;): ResourceSourceFileCreates a ResourceSourceFile by reading its contents from the given stream. getAllResources [jvm]open fun getAllResources(): MutableList&lt;ResourceItem&gt; getLeafResourceRepositories [jvm]open override fun getLeafResourceRepositories(): MutableCollection&lt;SingleNamespaceResourceRepository&gt; getNamespace [jvm]abstract fun getNamespace(): ResourceNamespace getNamespaces [jvm]open override fun getNamespaces(): MutableSet&lt;ResourceNamespace&gt; getOriginalSourceFile [jvm]open fun getOriginalSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathString?Produces a PathString to be returned by the BasicResourceItem.getOriginalSource method. getPackageName [jvm]abstract fun getPackageName(): String getPublicResources [jvm]abstract fun getPublicResources(namespace: ResourceNamespace, type: ResourceType): MutableCollection&lt;ResourceItem&gt; getResourceNames [jvm]open fun getResourceNames(namespace: ResourceNamespace, resourceType: ResourceType): MutableSet&lt;String&gt; getResources [jvm]open fun getResources(reference: ResourceReference): MutableList&lt;ResourceItem&gt;abstract fun getResources(namespace: ResourceNamespace, resourceType: ResourceType): ListMultimap&lt;String, ResourceItem&gt;abstract fun getResources(namespace: ResourceNamespace, resourceType: ResourceType, filter: Predicate&lt;ResourceItem&gt;): MutableList&lt;ResourceItem&gt;abstract fun getResources(namespace: ResourceNamespace, resourceType: ResourceType, resourceName: String): MutableList&lt;ResourceItem&gt; getResourceTypes [jvm]abstract fun getResourceTypes(namespace: ResourceNamespace): MutableSet&lt;ResourceType&gt; getResourceUrl [jvm]abstract fun getResourceUrl(relativeResourcePath: String): StringProduces a string to be returned by the BasicResourceItem.getValue method. The string represents an URL in one of the following formats: getSourceFile [jvm]abstract fun getSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathStringProduces a PathString to be returned by the BasicResourceItem.getSource method. hasResources [jvm]abstract fun hasResources(namespace: ResourceNamespace, resourceType: ResourceType): Booleanabstract fun hasResources(namespace: ResourceNamespace, resourceType: ResourceType, resourceName: String): Boolean"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/contains-user-defined-resources/","title":"containsUserDefinedResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/LoadableResourceRepository/containsUserDefinedResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/contains-user-defined-resources/#containsuserdefinedresources","title":"containsUserDefinedResources","text":"<p>[jvm]\\ abstract fun containsUserDefinedResources(): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/deserialize-file-resource-item/","title":"deserializeFileResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/LoadableResourceRepository/deserializeFileResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/deserialize-file-resource-item/#deserializefileresourceitem","title":"deserializeFileResourceItem","text":"<p>[jvm]\\ open fun deserializeFileResourceItem(stream: Base128InputStream, resourceType: ResourceType, name: String, visibility: ResourceVisibility, configurations: List&lt;RepositoryConfiguration&gt;): BasicFileResourceItem</p> <p>Creates a BasicFileResourceItem by reading its contents from the given stream.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/deserialize-file-resource-item/#return","title":"Return","text":"<p>the created BasicFileResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/deserialize-file-resource-item/#parameters","title":"Parameters","text":"<p>jvm</p> stream the stream to read data from resourceType the type of the resource name the name of the resource visibility the visibility of the resource configurations the repository configurations to select from when creating the ResourceSourceFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/deserialize-resource-source-file/","title":"deserializeResourceSourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/LoadableResourceRepository/deserializeResourceSourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/deserialize-resource-source-file/#deserializeresourcesourcefile","title":"deserializeResourceSourceFile","text":"<p>[jvm]\\ open fun deserializeResourceSourceFile(stream: Base128InputStream, configurations: List&lt;RepositoryConfiguration&gt;): ResourceSourceFile</p> <p>Creates a ResourceSourceFile by reading its contents from the given stream.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/deserialize-resource-source-file/#return","title":"Return","text":"<p>the created ResourceSourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/deserialize-resource-source-file/#parameters","title":"Parameters","text":"<p>jvm</p> stream the stream to read data from configurations the repository configurations to select from when creating the ResourceSourceFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/display-name/","title":"displayName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/LoadableResourceRepository/displayName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/display-name/#displayname","title":"displayName","text":"<p>[jvm]\\ abstract val displayName: String</p> <p>Returns the name of this resource repository to display in the UI.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/get-original-source-file/","title":"getOriginalSourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/LoadableResourceRepository/getOriginalSourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/get-original-source-file/#getoriginalsourcefile","title":"getOriginalSourceFile","text":"<p>[jvm]\\ open fun getOriginalSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathString?</p> <p>Produces a PathString to be returned by the BasicResourceItem.getOriginalSource method.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/get-original-source-file/#return","title":"Return","text":"<p>the PathString to be returned by the BasicResourceItem.getOriginalSource method</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/get-original-source-file/#parameters","title":"Parameters","text":"<p>jvm</p> relativeResourcePath the relative path of the file the resource was created from forFileResource true is the resource is a file resource, false if it is a value resource"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/get-resource-url/","title":"getResourceUrl - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/LoadableResourceRepository/getResourceUrl</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/get-resource-url/#getresourceurl","title":"getResourceUrl","text":"<p>[jvm]\\ abstract fun getResourceUrl(relativeResourcePath: String): String</p> <p>Produces a string to be returned by the BasicResourceItem.getValue method. The string represents an URL in one of the following formats:</p> <ul> <li>file URL, e.g. \"file:///foo/bar/res/layout/my_layout.xml\"</li> <li>URL of a zipped element inside the res.apk file, e.g. \"apk:///foo/bar/res.apk!/res/layout/my_layout.xml\"</li> </ul>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/get-resource-url/#return","title":"Return","text":"<p>the URL pointing to the file resource</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/get-resource-url/#parameters","title":"Parameters","text":"<p>jvm</p> relativeResourcePath the relative path of a file resource"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/get-source-file/","title":"getSourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/LoadableResourceRepository/getSourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/get-source-file/#getsourcefile","title":"getSourceFile","text":"<p>[jvm]\\ abstract fun getSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathString</p> <p>Produces a PathString to be returned by the BasicResourceItem.getSource method.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/get-source-file/#return","title":"Return","text":"<p>the PathString to be returned by the BasicResourceItem.getSource method</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/get-source-file/#parameters","title":"Parameters","text":"<p>jvm</p> relativeResourcePath the relative path of the file the resource was created from forFileResource true is the resource is a file resource, false if it is a value resource"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/library-name/","title":"libraryName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/LoadableResourceRepository/libraryName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/library-name/#libraryname","title":"libraryName","text":"<p>[jvm]\\ abstract val libraryName: String?</p> <p>Returns the name of the library, or null if this is not an AAR resource repository.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/origin/","title":"origin - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/LoadableResourceRepository/origin</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-loadable-resource-repository/origin/#origin","title":"origin","text":"<p>[jvm]\\ abstract val origin: Path</p> <p>Returns the file or directory this resource repository was loaded from. Resource repositories loaded from the same file or directory with different file filtering options have the same origin.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-local-resource-repository/","title":"LocalResourceRepository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/LocalResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-local-resource-repository/#localresourcerepository","title":"LocalResourceRepository","text":"<p>abstract class LocalResourceRepository : AbstractResourceRepository</p> <p>Repository for Android application resources, e.g. those that show up in {@code R}, not {@code android.R} (which are referred to as framework resources.).</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-local-resource-repository/#inheritors","title":"Inheritors","text":"ResourceFolderRepository"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-local-resource-repository/#properties","title":"Properties","text":"Name Summary displayName [jvm]val displayName: String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-local-resource-repository/#functions","title":"Functions","text":"Name Summary accept [jvm]abstract fun accept(visitor: ResourceVisitor): ResourceVisitor.VisitResult getAllResources [jvm]open fun getAllResources(): MutableList&lt;ResourceItem&gt; getLeafResourceRepositories [jvm]abstract fun getLeafResourceRepositories(): MutableCollection&lt;SingleNamespaceResourceRepository&gt; getMapPackageAccessible [jvm]open fun getMapPackageAccessible(namespace: ResourceNamespace, type: ResourceType): ListMultimap&lt;String, ResourceItem&gt;?Package accessible version of getMap. Do not call outside of MultiResourceRepository. getNamespaces [jvm]abstract fun getNamespaces(): MutableSet&lt;ResourceNamespace&gt; getPublicResources [jvm]open override fun getPublicResources(namespace: ResourceNamespace, type: ResourceType): Collection&lt;ResourceItem&gt; getResourceNames [jvm]open fun getResourceNames(namespace: ResourceNamespace, resourceType: ResourceType): MutableSet&lt;String&gt; getResources [jvm]open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType): ListMultimap&lt;String, ResourceItem&gt;open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType, filter: Predicate&lt;ResourceItem&gt;): MutableList&lt;ResourceItem&gt;open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType, resourceName: String): MutableList&lt;ResourceItem&gt;open fun getResources(reference: ResourceReference): MutableList&lt;ResourceItem&gt; getResourceTypes [jvm]open override fun getResourceTypes(namespace: ResourceNamespace): MutableSet&lt;ResourceType&gt; hasResources [jvm]open override fun hasResources(namespace: ResourceNamespace, resourceType: ResourceType): Booleanopen override fun hasResources(namespace: ResourceNamespace, resourceType: ResourceType, resourceName: String): Boolean"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-local-resource-repository/display-name/","title":"displayName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/LocalResourceRepository/displayName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-local-resource-repository/display-name/#displayname","title":"displayName","text":"<p>[jvm]\\ val displayName: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-local-resource-repository/get-map-package-accessible/","title":"getMapPackageAccessible - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/LocalResourceRepository/getMapPackageAccessible</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-local-resource-repository/get-map-package-accessible/#getmappackageaccessible","title":"getMapPackageAccessible","text":"<p>[jvm]\\ open fun getMapPackageAccessible(namespace: ResourceNamespace, type: ResourceType): ListMultimap&lt;String, ResourceItem&gt;?</p> <p>Package accessible version of getMap. Do not call outside of MultiResourceRepository.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-local-resource-repository/get-public-resources/","title":"getPublicResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/LocalResourceRepository/getPublicResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-local-resource-repository/get-public-resources/#getpublicresources","title":"getPublicResources","text":"<p>[jvm]\\ open override fun getPublicResources(namespace: ResourceNamespace, type: ResourceType): Collection&lt;ResourceItem&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/","title":"NamespaceResolver - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/NamespaceResolver</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/#namespaceresolver","title":"NamespaceResolver","text":"<p>[jvm]\\ class NamespaceResolver : ResourceNamespace.Resolver</p> <p>Ported from: NamespaceResolver.java</p> <p>Simple implementation of the ResourceNamespace.Resolver interface intended to be used together with XmlPullParser.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/#properties","title":"Properties","text":"Name Summary namespaceCount [jvm]val namespaceCount: Int"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/#functions","title":"Functions","text":"Name Summary equals [jvm]open operator override fun equals(other: Any?): Boolean hashCode [jvm]open override fun hashCode(): Int prefixToUri [jvm]open override fun prefixToUri(namespacePrefix: String): String? uriToPrefix [jvm]open override fun uriToPrefix(namespaceUri: String): String?"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/NamespaceResolver/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/hash-code/","title":"hashCode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/NamespaceResolver/hashCode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/hash-code/#hashcode","title":"hashCode","text":"<p>[jvm]\\ open override fun hashCode(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/namespace-count/","title":"namespaceCount - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/NamespaceResolver/namespaceCount</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/namespace-count/#namespacecount","title":"namespaceCount","text":"<p>[jvm]\\ val namespaceCount: Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/prefix-to-uri/","title":"prefixToUri - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/NamespaceResolver/prefixToUri</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/prefix-to-uri/#prefixtouri","title":"prefixToUri","text":"<p>[jvm]\\ open override fun prefixToUri(namespacePrefix: String): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/uri-to-prefix/","title":"uriToPrefix - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/NamespaceResolver/uriToPrefix</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/uri-to-prefix/#uritoprefix","title":"uriToPrefix","text":"<p>[jvm]\\ open override fun uriToPrefix(namespaceUri: String): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/NamespaceResolver/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/-companion/#properties","title":"Properties","text":"Name Summary EMPTY [jvm]val EMPTY: NamespaceResolver"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/-companion/#functions","title":"Functions","text":"Name Summary deserialize [jvm]fun deserialize(stream: Base128InputStream): NamespaceResolverCreates a namespace resolver by reading its contents from the given stream."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/-companion/-e-m-p-t-y/","title":"EMPTY - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/NamespaceResolver/Companion/EMPTY</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/-companion/-e-m-p-t-y/#empty","title":"EMPTY","text":"<p>[jvm]\\ val EMPTY: NamespaceResolver</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/-companion/deserialize/","title":"deserialize - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/NamespaceResolver/Companion/deserialize</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-namespace-resolver/-companion/deserialize/#deserialize","title":"deserialize","text":"<p>[jvm]\\ fun deserialize(stream: Base128InputStream): NamespaceResolver</p> <p>Creates a namespace resolver by reading its contents from the given stream.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/","title":"RepositoryConfiguration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/#repositoryconfiguration","title":"RepositoryConfiguration","text":"<p>[jvm]\\ class RepositoryConfiguration(repository: LoadableResourceRepository, val folderConfiguration: FolderConfiguration)</p> <p>A (LoadableResourceRepository, FolderConfiguration) pair. Instances of BasicResourceItem contain a reference to an RepositoryConfiguration instead of two separate references to LoadableResourceRepository and FolderConfiguration. This indirection saves memory because the number of RepositoryConfiguration instances is a tiny fraction of the number of BasicResourceItem instances.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/#constructors","title":"Constructors","text":"RepositoryConfiguration [jvm]constructor(repository: LoadableResourceRepository, folderConfiguration: FolderConfiguration)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/#properties","title":"Properties","text":"Name Summary folderConfiguration [jvm]val folderConfiguration: FolderConfiguration repository [jvm]var repository: LoadableResourceRepository"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/#functions","title":"Functions","text":"Name Summary equals [jvm]open operator override fun equals(other: Any?): BooleanOverridden to not distinguish between repositories loaded from the same file or folder. hashCode [jvm]open override fun hashCode(): IntOverridden to not distinguish between repositories loaded from the same file or folder. transferOwnershipTo [jvm]fun transferOwnershipTo(repository: LoadableResourceRepository)Makes repository the owner of this RepositoryConfiguration. The new owner should be loaded from the same file or directory as the previous one, which means that changing the owner does not affect equals or hashCode."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/-repository-configuration/","title":"RepositoryConfiguration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryConfiguration/RepositoryConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/-repository-configuration/#repositoryconfiguration","title":"RepositoryConfiguration","text":"<p>[jvm]\\ constructor(repository: LoadableResourceRepository, folderConfiguration: FolderConfiguration)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryConfiguration/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p> <p>Overridden to not distinguish between repositories loaded from the same file or folder.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/folder-configuration/","title":"folderConfiguration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryConfiguration/folderConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/folder-configuration/#folderconfiguration","title":"folderConfiguration","text":"<p>[jvm]\\ val folderConfiguration: FolderConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/hash-code/","title":"hashCode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryConfiguration/hashCode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/hash-code/#hashcode","title":"hashCode","text":"<p>[jvm]\\ open override fun hashCode(): Int</p> <p>Overridden to not distinguish between repositories loaded from the same file or folder.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/repository/","title":"repository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryConfiguration/repository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/repository/#repository","title":"repository","text":"<p>[jvm]\\ var repository: LoadableResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/transfer-ownership-to/","title":"transferOwnershipTo - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryConfiguration/transferOwnershipTo</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-configuration/transfer-ownership-to/#transferownershipto","title":"transferOwnershipTo","text":"<p>[jvm]\\ fun transferOwnershipTo(repository: LoadableResourceRepository)</p> <p>Makes repository the owner of this RepositoryConfiguration. The new owner should be loaded from the same file or directory as the previous one, which means that changing the owner does not affect equals or hashCode.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/","title":"RepositoryLoader - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/#repositoryloader","title":"RepositoryLoader","text":"<p>[jvm]\\ abstract class RepositoryLoader&lt;T : LoadableResourceRepository&gt;(val resourceDirectoryOrFile: Path, val resourceFilesAndFolders: Collection&lt;PathString&gt;?, val namespace: ResourceNamespace) : FileFilter</p> <p>Ported from: RepositoryLoader.java</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/#constructors","title":"Constructors","text":"RepositoryLoader [jvm]constructor(resourceDirectoryOrFile: Path, resourceFilesAndFolders: Collection&lt;PathString&gt;?, namespace: ResourceNamespace)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/#properties","title":"Properties","text":"Name Summary namespace [jvm]val namespace: ResourceNamespace resourceDirectoryOrFile [jvm]val resourceDirectoryOrFile: Path resourceFilesAndFolders [jvm]val resourceFilesAndFolders: Collection&lt;PathString&gt;? resourcePathPrefix [jvm]val resourcePathPrefix: String resourceUrlPrefix [jvm]val resourceUrlPrefix: String sourceFileProtocol [jvm]val sourceFileProtocol: String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/#functions","title":"Functions","text":"Name Summary isIgnored [jvm]open override fun isIgnored(fileOrDirectory: Path, attrs: BasicFileAttributes): BooleanReturns true to skip the file or directory, or false to accept it. loadRepositoryContents [jvm]open fun loadRepositoryContents(repository: T)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/-repository-loader/","title":"RepositoryLoader - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader/RepositoryLoader</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/-repository-loader/#repositoryloader","title":"RepositoryLoader","text":"<p>[jvm]\\ constructor(resourceDirectoryOrFile: Path, resourceFilesAndFolders: Collection&lt;PathString&gt;?, namespace: ResourceNamespace)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/is-ignored/","title":"isIgnored - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader/isIgnored</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/is-ignored/#isignored","title":"isIgnored","text":"<p>[jvm]\\ open override fun isIgnored(fileOrDirectory: Path, attrs: BasicFileAttributes): Boolean</p> <p>Returns true to skip the file or directory, or false to accept it.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/load-repository-contents/","title":"loadRepositoryContents - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader/loadRepositoryContents</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/load-repository-contents/#loadrepositorycontents","title":"loadRepositoryContents","text":"<p>[jvm]\\ open fun loadRepositoryContents(repository: T)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/namespace/","title":"namespace - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader/namespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/namespace/#namespace","title":"namespace","text":"<p>[jvm]\\ val namespace: ResourceNamespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/resource-directory-or-file/","title":"resourceDirectoryOrFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader/resourceDirectoryOrFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/resource-directory-or-file/#resourcedirectoryorfile","title":"resourceDirectoryOrFile","text":"<p>[jvm]\\ val resourceDirectoryOrFile: Path</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/resource-files-and-folders/","title":"resourceFilesAndFolders - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader/resourceFilesAndFolders</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/resource-files-and-folders/#resourcefilesandfolders","title":"resourceFilesAndFolders","text":"<p>[jvm]\\ val resourceFilesAndFolders: Collection&lt;PathString&gt;?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/resource-path-prefix/","title":"resourcePathPrefix - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader/resourcePathPrefix</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/resource-path-prefix/#resourcepathprefix","title":"resourcePathPrefix","text":"<p>[jvm]\\ val resourcePathPrefix: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/resource-url-prefix/","title":"resourceUrlPrefix - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader/resourceUrlPrefix</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/resource-url-prefix/#resourceurlprefix","title":"resourceUrlPrefix","text":"<p>[jvm]\\ val resourceUrlPrefix: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/source-file-protocol/","title":"sourceFileProtocol - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader/sourceFileProtocol</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/source-file-protocol/#sourcefileprotocol","title":"sourceFileProtocol","text":"<p>[jvm]\\ val sourceFileProtocol: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/-companion/#properties","title":"Properties","text":"Name Summary JAR_PROTOCOL [jvm]const val JAR_PROTOCOL: String JAR_SEPARATOR [jvm]const val JAR_SEPARATOR: String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/-companion/#functions","title":"Functions","text":"Name Summary portableFileName [jvm]fun portableFileName(fileName: String): String resolveAttrReferences [jvm]fun resolveAttrReferences(styleable: BasicStyleableResourceItem): BasicStyleableResourceItemReturns a styleable with attr references replaced by attr definitions returned by the BasicStyleableResourceItem.getCanonicalAttr method."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/-companion/-j-a-r_-p-r-o-t-o-c-o-l/","title":"JAR_PROTOCOL - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader/Companion/JAR_PROTOCOL</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/-companion/-j-a-r_-p-r-o-t-o-c-o-l/#jar_protocol","title":"JAR_PROTOCOL","text":"<p>[jvm]\\ const val JAR_PROTOCOL: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/-companion/-j-a-r_-s-e-p-a-r-a-t-o-r/","title":"JAR_SEPARATOR - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader/Companion/JAR_SEPARATOR</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/-companion/-j-a-r_-s-e-p-a-r-a-t-o-r/#jar_separator","title":"JAR_SEPARATOR","text":"<p>[jvm]\\ const val JAR_SEPARATOR: String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/-companion/portable-file-name/","title":"portableFileName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader/Companion/portableFileName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/-companion/portable-file-name/#portablefilename","title":"portableFileName","text":"<p>[jvm]\\ fun portableFileName(fileName: String): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/-companion/resolve-attr-references/","title":"resolveAttrReferences - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/RepositoryLoader/Companion/resolveAttrReferences</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-repository-loader/-companion/resolve-attr-references/#resolveattrreferences","title":"resolveAttrReferences","text":"<p>[jvm]\\ fun resolveAttrReferences(styleable: BasicStyleableResourceItem): BasicStyleableResourceItem</p> <p>Returns a styleable with attr references replaced by attr definitions returned by the BasicStyleableResourceItem.getCanonicalAttr method.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/","title":"ResourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/#resourcefile","title":"ResourceFile","text":"<p>[jvm]\\ class ResourceFile(val file: File?, val configuration: RepositoryConfiguration) : ResourceSourceFile, Iterable&lt;BasicResourceItem&gt; </p> <p>Ported from: ResourceItemSources.kt</p> <p>Represents a resource file from which com.android.ide.common.resources.ResourceItems are created by ResourceFolderRepository. An Iterable of BasicResourceItems.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/#constructors","title":"Constructors","text":"ResourceFile [jvm]constructor(file: File?, configuration: RepositoryConfiguration)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/#properties","title":"Properties","text":"Name Summary configuration [jvm]open override val configuration: RepositoryConfigurationThe configuration the resource file is associated with. file [jvm]val file: File? folderConfiguration [jvm]val folderConfiguration: FolderConfiguration relativePath [jvm]open override val relativePath: String?The path of the file relative to the resource directory, or null if the source file of the resource is not available. repository [jvm]open override val repository: ResourceFolderRepository"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/#functions","title":"Functions","text":"Name Summary addItem [jvm]fun addItem(item: BasicResourceItem) forEach [jvm]open fun forEach(p0: Consumer&lt;in BasicResourceItem&gt;) isValid [jvm]fun isValid(): Boolean iterator [jvm]open operator override fun iterator(): Iterator&lt;BasicResourceItem&gt; spliterator [jvm]open fun spliterator(): Spliterator&lt;BasicResourceItem&gt;"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/-resource-file/","title":"ResourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFile/ResourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/-resource-file/#resourcefile","title":"ResourceFile","text":"<p>[jvm]\\ constructor(file: File?, configuration: RepositoryConfiguration)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/add-item/","title":"addItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFile/addItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/add-item/#additem","title":"addItem","text":"<p>[jvm]\\ fun addItem(item: BasicResourceItem)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/configuration/","title":"configuration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFile/configuration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/configuration/#configuration","title":"configuration","text":"<p>[jvm]\\ open override val configuration: RepositoryConfiguration</p> <p>The configuration the resource file is associated with.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/file/","title":"file - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFile/file</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/file/#file","title":"file","text":"<p>[jvm]\\ val file: File?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/folder-configuration/","title":"folderConfiguration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFile/folderConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/folder-configuration/#folderconfiguration","title":"folderConfiguration","text":"<p>[jvm]\\ val folderConfiguration: FolderConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/is-valid/","title":"isValid - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFile/isValid</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/is-valid/#isvalid","title":"isValid","text":"<p>[jvm]\\ fun isValid(): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/iterator/","title":"iterator - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFile/iterator</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/iterator/#iterator","title":"iterator","text":"<p>[jvm]\\ open operator override fun iterator(): Iterator&lt;BasicResourceItem&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/relative-path/","title":"relativePath - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFile/relativePath</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/relative-path/#relativepath","title":"relativePath","text":"<p>[jvm]\\ open override val relativePath: String?</p> <p>The path of the file relative to the resource directory, or null if the source file of the resource is not available.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/repository/","title":"repository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFile/repository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-file/repository/#repository","title":"repository","text":"<p>[jvm]\\ open override val repository: ResourceFolderRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/","title":"ResourceFolderRepository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFolderRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/#resourcefolderrepository","title":"ResourceFolderRepository","text":"<p>[jvm]\\ class ResourceFolderRepository(val resourceDir: File, namespace: ResourceNamespace) : LocalResourceRepository, LoadableResourceRepository</p> <p>The ResourceFolderRepository is a leaf in the repository tree, and is used for user editable resources (e.g. the resources in the project, typically the res/main source set.)</p> <p>Each ResourceFolderRepository contains the resources provided by a single res folder.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/#constructors","title":"Constructors","text":"ResourceFolderRepository [jvm]constructor(resourceDir: File, namespace: ResourceNamespace)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/#properties","title":"Properties","text":"Name Summary displayName [jvm]val displayName: String libraryName [jvm]open override val libraryName: String?Returns the name of the library, or null if this is not an AAR resource repository. origin [jvm]open override val origin: PathReturns the file or directory this resource repository was loaded from. Resource repositories loaded from the same file or directory with different file filtering options have the same origin. resourceDir [jvm]val resourceDir: File"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/#functions","title":"Functions","text":"Name Summary accept [jvm]open override fun accept(visitor: ResourceVisitor): ResourceVisitor.VisitResult containsUserDefinedResources [jvm]open override fun containsUserDefinedResources(): Boolean deserializeFileResourceItem [jvm]open fun deserializeFileResourceItem(stream: Base128InputStream, resourceType: ResourceType, name: String, visibility: ResourceVisibility, configurations: List&lt;RepositoryConfiguration&gt;): BasicFileResourceItemCreates a BasicFileResourceItem by reading its contents from the given stream. deserializeResourceSourceFile [jvm]open fun deserializeResourceSourceFile(stream: Base128InputStream, configurations: List&lt;RepositoryConfiguration&gt;): ResourceSourceFileCreates a ResourceSourceFile by reading its contents from the given stream. getAllResources [jvm]open fun getAllResources(): MutableList&lt;ResourceItem&gt; getLeafResourceRepositories [jvm]abstract fun getLeafResourceRepositories(): MutableCollection&lt;SingleNamespaceResourceRepository&gt; getMapPackageAccessible [jvm]open fun getMapPackageAccessible(namespace: ResourceNamespace, type: ResourceType): ListMultimap&lt;String, ResourceItem&gt;?Package accessible version of getMap. Do not call outside of MultiResourceRepository. getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaces [jvm]abstract fun getNamespaces(): MutableSet&lt;ResourceNamespace&gt; getOriginalSourceFile [jvm]open fun getOriginalSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathString?Produces a PathString to be returned by the BasicResourceItem.getOriginalSource method. getPackageName [jvm]open override fun getPackageName(): String? getPublicResources [jvm]open override fun getPublicResources(namespace: ResourceNamespace, type: ResourceType): Collection&lt;ResourceItem&gt; getResourceNames [jvm]open fun getResourceNames(namespace: ResourceNamespace, resourceType: ResourceType): MutableSet&lt;String&gt; getResources [jvm]open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType): ListMultimap&lt;String, ResourceItem&gt;open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType, filter: Predicate&lt;ResourceItem&gt;): MutableList&lt;ResourceItem&gt;open override fun getResources(namespace: ResourceNamespace, resourceType: ResourceType, resourceName: String): MutableList&lt;ResourceItem&gt;open fun getResources(reference: ResourceReference): MutableList&lt;ResourceItem&gt; getResourceTypes [jvm]open override fun getResourceTypes(namespace: ResourceNamespace): MutableSet&lt;ResourceType&gt; getResourceUrl [jvm]open override fun getResourceUrl(relativeResourcePath: String): StringProduces a string to be returned by the BasicResourceItem.getValue method. The string represents an URL in one of the following formats: getSourceFile [jvm]open override fun getSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathStringProduces a PathString to be returned by the BasicResourceItem.getSource method. hasResources [jvm]open override fun hasResources(namespace: ResourceNamespace, resourceType: ResourceType): Booleanopen override fun hasResources(namespace: ResourceNamespace, resourceType: ResourceType, resourceName: String): Boolean"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/-resource-folder-repository/","title":"ResourceFolderRepository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFolderRepository/ResourceFolderRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/-resource-folder-repository/#resourcefolderrepository","title":"ResourceFolderRepository","text":"<p>[jvm]\\ constructor(resourceDir: File, namespace: ResourceNamespace)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/accept/","title":"accept - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFolderRepository/accept</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/accept/#accept","title":"accept","text":"<p>[jvm]\\ open override fun accept(visitor: ResourceVisitor): ResourceVisitor.VisitResult</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/contains-user-defined-resources/","title":"containsUserDefinedResources - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFolderRepository/containsUserDefinedResources</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/contains-user-defined-resources/#containsuserdefinedresources","title":"containsUserDefinedResources","text":"<p>[jvm]\\ open override fun containsUserDefinedResources(): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/get-namespace/","title":"getNamespace - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFolderRepository/getNamespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/get-namespace/#getnamespace","title":"getNamespace","text":"<p>[jvm]\\ open override fun getNamespace(): ResourceNamespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/get-package-name/","title":"getPackageName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFolderRepository/getPackageName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/get-package-name/#getpackagename","title":"getPackageName","text":"<p>[jvm]\\ open override fun getPackageName(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/get-resource-url/","title":"getResourceUrl - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFolderRepository/getResourceUrl</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/get-resource-url/#getresourceurl","title":"getResourceUrl","text":"<p>[jvm]\\ open override fun getResourceUrl(relativeResourcePath: String): String</p> <p>Produces a string to be returned by the BasicResourceItem.getValue method. The string represents an URL in one of the following formats:</p> <ul> <li>file URL, e.g. \"file:///foo/bar/res/layout/my_layout.xml\"</li> <li>URL of a zipped element inside the res.apk file, e.g. \"apk:///foo/bar/res.apk!/res/layout/my_layout.xml\"</li> </ul>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/get-resource-url/#return","title":"Return","text":"<p>the URL pointing to the file resource</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/get-resource-url/#parameters","title":"Parameters","text":"<p>jvm</p> relativeResourcePath the relative path of a file resource"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/get-source-file/","title":"getSourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFolderRepository/getSourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/get-source-file/#getsourcefile","title":"getSourceFile","text":"<p>[jvm]\\ open override fun getSourceFile(relativeResourcePath: String, forFileResource: Boolean): PathString</p> <p>Produces a PathString to be returned by the BasicResourceItem.getSource method.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/get-source-file/#return","title":"Return","text":"<p>the PathString to be returned by the BasicResourceItem.getSource method</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/get-source-file/#parameters","title":"Parameters","text":"<p>jvm</p> relativeResourcePath the relative path of the file the resource was created from forFileResource true is the resource is a file resource, false if it is a value resource"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/library-name/","title":"libraryName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFolderRepository/libraryName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/library-name/#libraryname","title":"libraryName","text":"<p>[jvm]\\ open override val libraryName: String?</p> <p>Returns the name of the library, or null if this is not an AAR resource repository.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/origin/","title":"origin - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFolderRepository/origin</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/origin/#origin","title":"origin","text":"<p>[jvm]\\ open override val origin: Path</p> <p>Returns the file or directory this resource repository was loaded from. Resource repositories loaded from the same file or directory with different file filtering options have the same origin.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/resource-dir/","title":"resourceDir - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFolderRepository/resourceDir</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/resource-dir/#resourcedir","title":"resourceDir","text":"<p>[jvm]\\ val resourceDir: File</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceFolderRepository/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-folder-repository/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/","title":"ResourceNamespacing - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceNamespacing</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/#resourcenamespacing","title":"ResourceNamespacing","text":"<p>[jvm]\\ enum ResourceNamespacing : Enum&lt;ResourceNamespacing&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/#entries","title":"Entries","text":"DISABLED [jvm]DISABLEDResources are not namespaced. REQUIRED [jvm]REQUIREDResources must be namespaced."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/#functions","title":"Functions","text":"Name Summary valueOf [jvm]fun valueOf(value: String): ResourceNamespacingReturns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.) values [jvm]fun values(): Array&lt;ResourceNamespacing&gt;Returns an array containing the constants of this enum type, in the order they\u2019re declared."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/value-of/","title":"valueOf - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceNamespacing/valueOf</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/value-of/#valueof","title":"valueOf","text":"<p>[jvm]\\ fun valueOf(value: String): ResourceNamespacing</p> <p>Returns the enum constant of this type with the specified name. The string must match exactly an identifier used to declare an enum constant in this type. (Extraneous whitespace characters are not permitted.)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/value-of/#throws","title":"Throws","text":"IllegalArgumentException if this enum type has no constant with the specified name"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/values/","title":"values - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceNamespacing/values</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/values/#values","title":"values","text":"<p>[jvm]\\ fun values(): Array&lt;ResourceNamespacing&gt;</p> <p>Returns an array containing the constants of this enum type, in the order they\u2019re declared.</p> <p>This method may be used to iterate over the constants.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/-d-i-s-a-b-l-e-d/","title":"DISABLED - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceNamespacing/DISABLED</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/-d-i-s-a-b-l-e-d/#disabled","title":"DISABLED","text":"<p>[jvm]\\ DISABLED</p> <p>Resources are not namespaced.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/-d-i-s-a-b-l-e-d/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/-r-e-q-u-i-r-e-d/","title":"REQUIRED - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceNamespacing/REQUIRED</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/-r-e-q-u-i-r-e-d/#required","title":"REQUIRED","text":"<p>[jvm]\\ REQUIRED</p> <p>Resources must be namespaced.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-namespacing/-r-e-q-u-i-r-e-d/#properties","title":"Properties","text":"Name Summary name [jvm]val name: String ordinal [jvm]val ordinal: Int"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-serialization-util/","title":"ResourceSerializationUtil - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceSerializationUtil</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-serialization-util/#resourceserializationutil","title":"ResourceSerializationUtil","text":"<p>[jvm]\\ object ResourceSerializationUtil</p> <p>Ported from: ResourceSerializationUtil.java</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-serialization-util/#functions","title":"Functions","text":"Name Summary readResourcesFromStream [jvm]fun readResourcesFromStream(stream: Base128InputStream, stringCache: Map&lt;String, String&gt;, namespaceResolverCache: MutableMap&lt;NamespaceResolver, NamespaceResolver&gt;?, repository: LoadableResourceRepository, resourceConsumer: Consumer&lt;BasicResourceItem&gt;)Loads resources from the given input stream and passes them to the given consumer."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-serialization-util/read-resources-from-stream/","title":"readResourcesFromStream - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceSerializationUtil/readResourcesFromStream</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-serialization-util/read-resources-from-stream/#readresourcesfromstream","title":"readResourcesFromStream","text":"<p>[jvm]\\ fun readResourcesFromStream(stream: Base128InputStream, stringCache: Map&lt;String, String&gt;, namespaceResolverCache: MutableMap&lt;NamespaceResolver, NamespaceResolver&gt;?, repository: LoadableResourceRepository, resourceConsumer: Consumer&lt;BasicResourceItem&gt;)</p> <p>Loads resources from the given input stream and passes them to the given consumer.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file/","title":"ResourceSourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceSourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file/#resourcesourcefile","title":"ResourceSourceFile","text":"<p>interface ResourceSourceFile</p> <p>Ported from: ResourceSourceFile.kt</p> <p>Represents an XML file from which an Android resource was created.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file/#inheritors","title":"Inheritors","text":"ResourceFile ResourceSourceFileImpl"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file/#properties","title":"Properties","text":"Name Summary configuration [jvm]abstract val configuration: RepositoryConfigurationThe configuration the resource file is associated with. relativePath [jvm]abstract val relativePath: String?The path of the file relative to the resource directory, or null if the source file of the resource is not available. repository [jvm]open val repository: LoadableResourceRepository"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file/configuration/","title":"configuration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceSourceFile/configuration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file/configuration/#configuration","title":"configuration","text":"<p>[jvm]\\ abstract val configuration: RepositoryConfiguration</p> <p>The configuration the resource file is associated with.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file/relative-path/","title":"relativePath - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceSourceFile/relativePath</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file/relative-path/#relativepath","title":"relativePath","text":"<p>[jvm]\\ abstract val relativePath: String?</p> <p>The path of the file relative to the resource directory, or null if the source file of the resource is not available.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file/repository/","title":"repository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceSourceFile/repository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file/repository/#repository","title":"repository","text":"<p>[jvm]\\ open val repository: LoadableResourceRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/","title":"ResourceSourceFileImpl - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceSourceFileImpl</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/#resourcesourcefileimpl","title":"ResourceSourceFileImpl","text":"<p>[jvm]\\ data class ResourceSourceFileImpl(val relativePath: String?, val configuration: RepositoryConfiguration) : ResourceSourceFile</p> <p>Ported from: ResourceSourceFileImpl.kt</p> <p>A simple implementation of the ResourceSourceFile interface.</p> <p>relativePath path of the file relative to the resource directory, or null if the source file of the resource is not available configuration configuration the resource file is associated with</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/#constructors","title":"Constructors","text":"ResourceSourceFileImpl [jvm]constructor(relativePath: String?, configuration: RepositoryConfiguration)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/#properties","title":"Properties","text":"Name Summary configuration [jvm]open override val configuration: RepositoryConfigurationThe configuration the resource file is associated with. relativePath [jvm]open override val relativePath: String?The path of the file relative to the resource directory, or null if the source file of the resource is not available. repository [jvm]open val repository: LoadableResourceRepository"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/-resource-source-file-impl/","title":"ResourceSourceFileImpl - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceSourceFileImpl/ResourceSourceFileImpl</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/-resource-source-file-impl/#resourcesourcefileimpl","title":"ResourceSourceFileImpl","text":"<p>[jvm]\\ constructor(relativePath: String?, configuration: RepositoryConfiguration)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/configuration/","title":"configuration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceSourceFileImpl/configuration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/configuration/#configuration","title":"configuration","text":"<p>[jvm]\\ open override val configuration: RepositoryConfiguration</p> <p>The configuration the resource file is associated with.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/relative-path/","title":"relativePath - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceSourceFileImpl/relativePath</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/relative-path/#relativepath","title":"relativePath","text":"<p>[jvm]\\ open override val relativePath: String?</p> <p>The path of the file relative to the resource directory, or null if the source file of the resource is not available.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceSourceFileImpl/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/-companion/#functions","title":"Functions","text":"Name Summary deserialize [jvm]fun deserialize(stream: Base128InputStream, configurations: List&lt;RepositoryConfiguration&gt;): ResourceSourceFileImplCreates a ResourceSourceFileImpl by reading its contents from the given stream."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/-companion/deserialize/","title":"deserialize - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceSourceFileImpl/Companion/deserialize</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-source-file-impl/-companion/deserialize/#deserialize","title":"deserialize","text":"<p>[jvm]\\ fun deserialize(stream: Base128InputStream, configurations: List&lt;RepositoryConfiguration&gt;): ResourceSourceFileImpl</p> <p>Creates a ResourceSourceFileImpl by reading its contents from the given stream.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/","title":"ResourceUrlParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceUrlParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/#resourceurlparser","title":"ResourceUrlParser","text":"<p>[jvm]\\ class ResourceUrlParser</p> <p>Ported from: ResourceUrlParser.java</p> <p>Parser of resource URLs. Unlike com.android.resources.ResourceUrl, this class is resilient to URL syntax errors that doesn\u2019t create any GC overhead.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/#constructors","title":"Constructors","text":"ResourceUrlParser [jvm]constructor()"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/#properties","title":"Properties","text":"Name Summary name [jvm]val name: StringReturns the name part of the resource URL. namespacePrefix [jvm]val namespacePrefix: String?Returns the namespace prefix of the resource URL, or null if the URL doesn\u2019t contain a prefix. qualifiedName [jvm]val qualifiedName: StringReturns the qualified name of the resource without any prefix or type. type [jvm]val type: String?Returns the type of the resource URL, or null if the URL don\u2019t contain a type."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/#functions","title":"Functions","text":"Name Summary hasNamespacePrefix [jvm]fun hasNamespacePrefix(namespacePrefix: String): BooleanChecks if the resource URL has the given namespace prefix. hasType [jvm]fun hasType(type: String): BooleanChecks if the resource URL has the given type. parseResourceUrl [jvm]fun parseResourceUrl(resourceUrl: String)Parses resource URL and sets the fields of this object to point to different parts of the URL."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/-resource-url-parser/","title":"ResourceUrlParser - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceUrlParser/ResourceUrlParser</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/-resource-url-parser/#resourceurlparser","title":"ResourceUrlParser","text":"<p>[jvm]\\ constructor()</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/has-namespace-prefix/","title":"hasNamespacePrefix - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceUrlParser/hasNamespacePrefix</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/has-namespace-prefix/#hasnamespaceprefix","title":"hasNamespacePrefix","text":"<p>[jvm]\\ fun hasNamespacePrefix(namespacePrefix: String): Boolean</p> <p>Checks if the resource URL has the given namespace prefix.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/has-type/","title":"hasType - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceUrlParser/hasType</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/has-type/#hastype","title":"hasType","text":"<p>[jvm]\\ fun hasType(type: String): Boolean</p> <p>Checks if the resource URL has the given type.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/name/","title":"name - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceUrlParser/name</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/name/#name","title":"name","text":"<p>[jvm]\\ val name: String</p> <p>Returns the name part of the resource URL.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/namespace-prefix/","title":"namespacePrefix - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceUrlParser/namespacePrefix</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/namespace-prefix/#namespaceprefix","title":"namespacePrefix","text":"<p>[jvm]\\ val namespacePrefix: String?</p> <p>Returns the namespace prefix of the resource URL, or null if the URL doesn\u2019t contain a prefix.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/parse-resource-url/","title":"parseResourceUrl - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceUrlParser/parseResourceUrl</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/parse-resource-url/#parseresourceurl","title":"parseResourceUrl","text":"<p>[jvm]\\ fun parseResourceUrl(resourceUrl: String)</p> <p>Parses resource URL and sets the fields of this object to point to different parts of the URL.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/parse-resource-url/#parameters","title":"Parameters","text":"<p>jvm</p> resourceUrl the resource URL to parse"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/qualified-name/","title":"qualifiedName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceUrlParser/qualifiedName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/qualified-name/#qualifiedname","title":"qualifiedName","text":"<p>[jvm]\\ val qualifiedName: String</p> <p>Returns the qualified name of the resource without any prefix or type.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/type/","title":"type - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources/ResourceUrlParser/type</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources/-resource-url-parser/type/#type","title":"type","text":"<p>[jvm]\\ val type: String?</p> <p>Returns the type of the resource URL, or null if the URL don\u2019t contain a type.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/","title":"Package-level declarations - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/#package-level-declarations","title":"Package-level declarations","text":""},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/#types","title":"Types","text":"Name Summary BasicArrayResourceItem [jvm]class BasicArrayResourceItem(name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility, elements: List&lt;String&gt;, defaultIndex: Int) : BasicValueResourceItemBase, ArrayResourceValuePorted from: BasicArrayResourceItem.java BasicAttrReference [jvm]class BasicAttrReference(namespace: ResourceNamespace, name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility, description: String?, groupName: String?) : BasicValueResourceItemBase, AttrResourceValuePorted from: BasicAttrReference.java BasicAttrResourceItem [jvm]open class BasicAttrResourceItem(name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility, description: String?, groupName: String?, formats: Set&lt;AttributeFormat&gt;, valueMap: Map&lt;String, Int&gt;, valueDescriptionMap: Map&lt;String, String&gt;) : BasicValueResourceItemBase, AttrResourceValuePorted from: BasicAttrResourceItem.java BasicDensityBasedFileResourceItem [jvm]class BasicDensityBasedFileResourceItem(type: ResourceType, name: String, configuration: RepositoryConfiguration, visibility: ResourceVisibility, relativePath: String, density: Density) : BasicFileResourceItem, DensityBasedResourceValuePorted from: BasicDensityBasedFileResourceItem.java BasicFileResourceItem [jvm]open class BasicFileResourceItem(type: ResourceType, name: String, val repositoryConfiguration: RepositoryConfiguration, visibility: ResourceVisibility, relativePath: String) : BasicResourceItemPorted from: BasicFileResourceItem.java BasicForeignAttrResourceItem [jvm]class BasicForeignAttrResourceItem(namespace: ResourceNamespace, name: String, val sourceFile: ResourceSourceFile, description: String?, groupName: String?, formats: Set&lt;AttributeFormat&gt;, valueMap: Map&lt;String, Int&gt;, valueDescriptionMap: Map&lt;String, String&gt;) : BasicAttrResourceItemPorted from: BasicForeignAttrResourceItem.java BasicPluralsResourceItem [jvm]class BasicPluralsResourceItem : BasicValueResourceItemBase, PluralsResourceValuePorted from: BasicPluralsResourceItem.java BasicResourceItem [jvm]abstract class BasicResourceItem(type: ResourceType, name: String, visibility: ResourceVisibility) : ResourceItemWithVisibility, ResourceValuePorted from: BasicResourceItemBase.java BasicStyleableResourceItem [jvm]class BasicStyleableResourceItem(name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility, attrs: List&lt;AttrResourceValue&gt;) : BasicValueResourceItemBase, StyleableResourceValuePorted from: BasicStyleableResourceItem.java BasicStyleResourceItem [jvm]class BasicStyleResourceItem(name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility, parentStyle: String?, styleItems: Collection&lt;StyleItemResourceValue&gt;) : BasicValueResourceItemBase, StyleResourceValuePorted from: BasicStyleResourceItem.java BasicTextValueResourceItem [jvm]class BasicTextValueResourceItem(type: ResourceType, name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility, textValue: String?, rawXmlValue: String?) : BasicValueResourceItem, TextResourceValuePorted from: BasicTextValueResourceItem.java BasicValueResourceItem [jvm]open class BasicValueResourceItem(type: ResourceType, name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility, value: String?) : BasicValueResourceItemBasePorted from: BasicValueResourceItem.java BasicValueResourceItemBase [jvm]abstract class BasicValueResourceItemBase(type: ResourceType, name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility) : BasicResourceItemPorted from: BasicValueResourceItemBase.java"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/","title":"BasicArrayResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicArrayResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/#basicarrayresourceitem","title":"BasicArrayResourceItem","text":"<p>[jvm]\\ class BasicArrayResourceItem(name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility, elements: List&lt;String&gt;, defaultIndex: Int) : BasicValueResourceItemBase, ArrayResourceValue</p> <p>Ported from: BasicArrayResourceItem.java</p> <p>Resource item representing an array resource.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/#constructors","title":"Constructors","text":"BasicArrayResourceItem [jvm]constructor(name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, elements: List&lt;String&gt;, defaultIndex: Int)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/#properties","title":"Properties","text":"Name Summary repositoryConfiguration [jvm]open override val repositoryConfiguration: RepositoryConfiguration sourceFile [jvm]val sourceFile: ResourceSourceFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/#functions","title":"Functions","text":"Name Summary asReference [jvm]open override fun asReference(): ResourceReference equals [jvm]open operator override fun equals(other: Any?): Boolean forEach [jvm]open fun forEach(p0: Consumer&lt;in String&gt;) getConfiguration [jvm]open override fun getConfiguration(): FolderConfiguration getElement [jvm]open override fun getElement(index: Int): String getElementCount [jvm]open override fun getElementCount(): Int getKey [jvm]open override fun getKey(): String getLibraryName [jvm]open override fun getLibraryName(): String? getName [jvm]open override fun getName(): String getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaceResolver [jvm]open override fun getNamespaceResolver(): ResourceNamespace.Resolver getOriginalSource [jvm]open override fun getOriginalSource(): PathString? getQualifiedNameWithType [jvm]open fun getQualifiedNameWithType(): String getRawXmlValue [jvm]open fun getRawXmlValue(): String getReference [jvm]open fun getReference(): ResourceReference getReferenceToSelf [jvm]open override fun getReferenceToSelf(): ResourceReference getRepository [jvm]open override fun getRepository(): LoadableResourceRepositoryReturns the repository this resource belongs to. getResourceType [jvm]open override fun getResourceType(): ResourceType getResourceUrl [jvm]open fun getResourceUrl(): ResourceUrl getResourceValue [jvm]open override fun getResourceValue(): ResourceValue getSource [jvm]open override fun getSource(): PathString? getType [jvm]open override fun getType(): ResourceType getValue [jvm]open override fun getValue(): String? getVisibility [jvm]open override fun getVisibility(): ResourceVisibility hashCode [jvm]open override fun hashCode(): Int isFileBased [jvm]open override fun isFileBased(): Boolean isFramework [jvm]open override fun isFramework(): Boolean isUserDefined [jvm]open override fun isUserDefined(): Boolean iterator [jvm]open operator override fun iterator(): MutableIterator&lt;String&gt; setNamespaceResolver [jvm]fun setNamespaceResolver(resolver: ResourceNamespace.Resolver) setValue [jvm]open override fun setValue(value: String?) spliterator [jvm]open fun spliterator(): Spliterator&lt;String&gt; toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/-basic-array-resource-item/","title":"BasicArrayResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicArrayResourceItem/BasicArrayResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/-basic-array-resource-item/#basicarrayresourceitem","title":"BasicArrayResourceItem","text":"<p>[jvm]\\ constructor(name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, elements: List&lt;String&gt;, defaultIndex: Int)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicArrayResourceItem/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/get-element-count/","title":"getElementCount - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicArrayResourceItem/getElementCount</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/get-element-count/#getelementcount","title":"getElementCount","text":"<p>[jvm]\\ open override fun getElementCount(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/get-element/","title":"getElement - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicArrayResourceItem/getElement</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/get-element/#getelement","title":"getElement","text":"<p>[jvm]\\ open override fun getElement(index: Int): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/get-value/","title":"getValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicArrayResourceItem/getValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/get-value/#getvalue","title":"getValue","text":"<p>[jvm]\\ open override fun getValue(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/iterator/","title":"iterator - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicArrayResourceItem/iterator</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/iterator/#iterator","title":"iterator","text":"<p>[jvm]\\ open operator override fun iterator(): MutableIterator&lt;String&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicArrayResourceItem/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/-companion/#functions","title":"Functions","text":"Name Summary deserialize [jvm]fun deserialize(stream: Base128InputStream, name: String, visibility: ResourceVisibility, sourceFile: ResourceSourceFile, resolver: ResourceNamespace.Resolver): BasicArrayResourceItemCreates a BasicArrayResourceItem by reading its contents from the given stream."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/-companion/deserialize/","title":"deserialize - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicArrayResourceItem/Companion/deserialize</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-array-resource-item/-companion/deserialize/#deserialize","title":"deserialize","text":"<p>[jvm]\\ fun deserialize(stream: Base128InputStream, name: String, visibility: ResourceVisibility, sourceFile: ResourceSourceFile, resolver: ResourceNamespace.Resolver): BasicArrayResourceItem</p> <p>Creates a BasicArrayResourceItem by reading its contents from the given stream.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/","title":"BasicAttrReference - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrReference</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/#basicattrreference","title":"BasicAttrReference","text":"<p>[jvm]\\ class BasicAttrReference(namespace: ResourceNamespace, name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility, description: String?, groupName: String?) : BasicValueResourceItemBase, AttrResourceValue</p> <p>Ported from: BasicAttrReference.java</p> <p>Resource value representing a reference to an attr resource, but potentially with its own description and group name. Unlike BasicAttrResourceItem, does not contain formats and enum or flag information.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/#constructors","title":"Constructors","text":"BasicAttrReference [jvm]constructor(namespace: ResourceNamespace, name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, description: String?, groupName: String?)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/#properties","title":"Properties","text":"Name Summary repositoryConfiguration [jvm]open override val repositoryConfiguration: RepositoryConfiguration sourceFile [jvm]val sourceFile: ResourceSourceFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/#functions","title":"Functions","text":"Name Summary asReference [jvm]open override fun asReference(): ResourceReference equals [jvm]open operator override fun equals(other: Any?): Boolean getAttributeValues [jvm]open override fun getAttributeValues(): Map&lt;String, Int&gt; getConfiguration [jvm]open override fun getConfiguration(): FolderConfiguration getDescription [jvm]open override fun getDescription(): String? getFormats [jvm]open override fun getFormats(): Set&lt;AttributeFormat&gt; getGroupName [jvm]open override fun getGroupName(): String? getKey [jvm]open override fun getKey(): String getLibraryName [jvm]open override fun getLibraryName(): String? getName [jvm]open override fun getName(): String getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaceResolver [jvm]open override fun getNamespaceResolver(): ResourceNamespace.Resolver getOriginalSource [jvm]open override fun getOriginalSource(): PathString? getQualifiedNameWithType [jvm]open fun getQualifiedNameWithType(): String getRawXmlValue [jvm]open fun getRawXmlValue(): String getReference [jvm]open fun getReference(): ResourceReference getReferenceToSelf [jvm]open override fun getReferenceToSelf(): ResourceReference getRepository [jvm]open override fun getRepository(): LoadableResourceRepositoryReturns the repository this resource belongs to. getResourceType [jvm]open override fun getResourceType(): ResourceType getResourceUrl [jvm]open fun getResourceUrl(): ResourceUrl getResourceValue [jvm]open override fun getResourceValue(): ResourceValue getSource [jvm]open override fun getSource(): PathString? getType [jvm]open override fun getType(): ResourceType getValue [jvm]open override fun getValue(): String? getValueDescription [jvm]open override fun getValueDescription(valueName: String): String? getVisibility [jvm]open override fun getVisibility(): ResourceVisibility hashCode [jvm]open override fun hashCode(): Int isFileBased [jvm]open override fun isFileBased(): Boolean isFramework [jvm]open override fun isFramework(): Boolean isUserDefined [jvm]open override fun isUserDefined(): Boolean setNamespaceResolver [jvm]fun setNamespaceResolver(resolver: ResourceNamespace.Resolver) setValue [jvm]open override fun setValue(value: String?) toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/-basic-attr-reference/","title":"BasicAttrReference - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrReference/BasicAttrReference</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/-basic-attr-reference/#basicattrreference","title":"BasicAttrReference","text":"<p>[jvm]\\ constructor(namespace: ResourceNamespace, name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, description: String?, groupName: String?)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrReference/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/get-attribute-values/","title":"getAttributeValues - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrReference/getAttributeValues</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/get-attribute-values/#getattributevalues","title":"getAttributeValues","text":"<p>[jvm]\\ open override fun getAttributeValues(): Map&lt;String, Int&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/get-description/","title":"getDescription - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrReference/getDescription</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/get-description/#getdescription","title":"getDescription","text":"<p>[jvm]\\ open override fun getDescription(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/get-formats/","title":"getFormats - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrReference/getFormats</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/get-formats/#getformats","title":"getFormats","text":"<p>[jvm]\\ open override fun getFormats(): Set&lt;AttributeFormat&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/get-group-name/","title":"getGroupName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrReference/getGroupName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/get-group-name/#getgroupname","title":"getGroupName","text":"<p>[jvm]\\ open override fun getGroupName(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/get-namespace/","title":"getNamespace - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrReference/getNamespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/get-namespace/#getnamespace","title":"getNamespace","text":"<p>[jvm]\\ open override fun getNamespace(): ResourceNamespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/get-value-description/","title":"getValueDescription - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrReference/getValueDescription</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/get-value-description/#getvaluedescription","title":"getValueDescription","text":"<p>[jvm]\\ open override fun getValueDescription(valueName: String): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/hash-code/","title":"hashCode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrReference/hashCode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-reference/hash-code/#hashcode","title":"hashCode","text":"<p>[jvm]\\ open override fun hashCode(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/","title":"BasicAttrResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/#basicattrresourceitem","title":"BasicAttrResourceItem","text":"<p>open class BasicAttrResourceItem(name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility, description: String?, groupName: String?, formats: Set&lt;AttributeFormat&gt;, valueMap: Map&lt;String, Int&gt;, valueDescriptionMap: Map&lt;String, String&gt;) : BasicValueResourceItemBase, AttrResourceValue</p> <p>Ported from: BasicAttrResourceItem.java</p> <p>Resource item representing an attr resource.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/#inheritors","title":"Inheritors","text":"BasicForeignAttrResourceItem"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/#constructors","title":"Constructors","text":"BasicAttrResourceItem [jvm]constructor(name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, description: String?, groupName: String?, formats: Set&lt;AttributeFormat&gt;, valueMap: Map&lt;String, Int&gt;, valueDescriptionMap: Map&lt;String, String&gt;)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/#properties","title":"Properties","text":"Name Summary repositoryConfiguration [jvm]open override val repositoryConfiguration: RepositoryConfiguration sourceFile [jvm]val sourceFile: ResourceSourceFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/#functions","title":"Functions","text":"Name Summary asReference [jvm]open override fun asReference(): ResourceReference createReference [jvm]fun createReference(): BasicAttrReferenceCreates and returns an BasicAttrReference pointing to this attribute. equals [jvm]open operator override fun equals(other: Any?): Boolean getAttributeValues [jvm]open override fun getAttributeValues(): Map&lt;String, Int&gt; getConfiguration [jvm]open override fun getConfiguration(): FolderConfiguration getDescription [jvm]open override fun getDescription(): String? getFormats [jvm]open override fun getFormats(): Set&lt;AttributeFormat&gt; getGroupName [jvm]open override fun getGroupName(): String? getKey [jvm]open override fun getKey(): String getLibraryName [jvm]open override fun getLibraryName(): String? getName [jvm]open override fun getName(): String getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaceResolver [jvm]open override fun getNamespaceResolver(): ResourceNamespace.Resolver getOriginalSource [jvm]open override fun getOriginalSource(): PathString? getQualifiedNameWithType [jvm]open fun getQualifiedNameWithType(): String getRawXmlValue [jvm]open fun getRawXmlValue(): String getReference [jvm]open fun getReference(): ResourceReference getReferenceToSelf [jvm]open override fun getReferenceToSelf(): ResourceReference getRepository [jvm]open override fun getRepository(): LoadableResourceRepositoryReturns the repository this resource belongs to. getResourceType [jvm]open override fun getResourceType(): ResourceType getResourceUrl [jvm]open fun getResourceUrl(): ResourceUrl getResourceValue [jvm]open override fun getResourceValue(): ResourceValue getSource [jvm]open override fun getSource(): PathString? getType [jvm]open override fun getType(): ResourceType getValue [jvm]open override fun getValue(): String? getValueDescription [jvm]open override fun getValueDescription(valueName: String): String? getVisibility [jvm]open override fun getVisibility(): ResourceVisibility hashCode [jvm]open override fun hashCode(): Int isFileBased [jvm]open override fun isFileBased(): Boolean isFramework [jvm]open override fun isFramework(): Boolean isUserDefined [jvm]open override fun isUserDefined(): Boolean setFormats [jvm]fun setFormats(formats: Set&lt;AttributeFormat&gt;)Replaces the set of the allowed attribute formats. Intended to be called only by the resource repository code. setNamespaceResolver [jvm]fun setNamespaceResolver(resolver: ResourceNamespace.Resolver) setValue [jvm]open override fun setValue(value: String?) toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/-basic-attr-resource-item/","title":"BasicAttrResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrResourceItem/BasicAttrResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/-basic-attr-resource-item/#basicattrresourceitem","title":"BasicAttrResourceItem","text":"<p>[jvm]\\ constructor(name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, description: String?, groupName: String?, formats: Set&lt;AttributeFormat&gt;, valueMap: Map&lt;String, Int&gt;, valueDescriptionMap: Map&lt;String, String&gt;)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/create-reference/","title":"createReference - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrResourceItem/createReference</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/create-reference/#createreference","title":"createReference","text":"<p>[jvm]\\ fun createReference(): BasicAttrReference</p> <p>Creates and returns an BasicAttrReference pointing to this attribute.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrResourceItem/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/get-attribute-values/","title":"getAttributeValues - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrResourceItem/getAttributeValues</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/get-attribute-values/#getattributevalues","title":"getAttributeValues","text":"<p>[jvm]\\ open override fun getAttributeValues(): Map&lt;String, Int&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/get-description/","title":"getDescription - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrResourceItem/getDescription</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/get-description/#getdescription","title":"getDescription","text":"<p>[jvm]\\ open override fun getDescription(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/get-formats/","title":"getFormats - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrResourceItem/getFormats</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/get-formats/#getformats","title":"getFormats","text":"<p>[jvm]\\ open override fun getFormats(): Set&lt;AttributeFormat&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/get-group-name/","title":"getGroupName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrResourceItem/getGroupName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/get-group-name/#getgroupname","title":"getGroupName","text":"<p>[jvm]\\ open override fun getGroupName(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/get-value-description/","title":"getValueDescription - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrResourceItem/getValueDescription</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/get-value-description/#getvaluedescription","title":"getValueDescription","text":"<p>[jvm]\\ open override fun getValueDescription(valueName: String): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/set-formats/","title":"setFormats - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrResourceItem/setFormats</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/set-formats/#setformats","title":"setFormats","text":"<p>[jvm]\\ fun setFormats(formats: Set&lt;AttributeFormat&gt;)</p> <p>Replaces the set of the allowed attribute formats. Intended to be called only by the resource repository code.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/set-formats/#parameters","title":"Parameters","text":"<p>jvm</p> formats the new set of the allowed attribute formats"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrResourceItem/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/-companion/#functions","title":"Functions","text":"Name Summary deserialize [jvm]fun deserialize(stream: Base128InputStream, name: String, visibility: ResourceVisibility, sourceFile: ResourceSourceFile, resolver: ResourceNamespace.Resolver): BasicValueResourceItemBaseCreates a BasicAttrResourceItem by reading its contents from the given stream."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/-companion/deserialize/","title":"deserialize - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicAttrResourceItem/Companion/deserialize</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-attr-resource-item/-companion/deserialize/#deserialize","title":"deserialize","text":"<p>[jvm]\\ fun deserialize(stream: Base128InputStream, name: String, visibility: ResourceVisibility, sourceFile: ResourceSourceFile, resolver: ResourceNamespace.Resolver): BasicValueResourceItemBase</p> <p>Creates a BasicAttrResourceItem by reading its contents from the given stream.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/","title":"BasicDensityBasedFileResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicDensityBasedFileResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/#basicdensitybasedfileresourceitem","title":"BasicDensityBasedFileResourceItem","text":"<p>[jvm]\\ class BasicDensityBasedFileResourceItem(type: ResourceType, name: String, configuration: RepositoryConfiguration, visibility: ResourceVisibility, relativePath: String, density: Density) : BasicFileResourceItem, DensityBasedResourceValue</p> <p>Ported from: BasicDensityBasedFileResourceItem.java</p> <p>Resource item representing a density-specific file resource inside an AAR, e.g. a drawable or a layout.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/#constructors","title":"Constructors","text":"BasicDensityBasedFileResourceItem [jvm]constructor(type: ResourceType, name: String, configuration: RepositoryConfiguration, visibility: ResourceVisibility, relativePath: String, density: Density)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/#properties","title":"Properties","text":"Name Summary repositoryConfiguration [jvm]open override val repositoryConfiguration: RepositoryConfiguration"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/#functions","title":"Functions","text":"Name Summary asReference [jvm]open override fun asReference(): ResourceReference equals [jvm]open operator override fun equals(other: Any?): Boolean getConfiguration [jvm]open override fun getConfiguration(): FolderConfiguration getKey [jvm]open override fun getKey(): String getLibraryName [jvm]open override fun getLibraryName(): String? getName [jvm]open override fun getName(): String getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaceResolver [jvm]open override fun getNamespaceResolver(): ResourceNamespace.Resolver getOriginalSource [jvm]open override fun getOriginalSource(): PathString? getQualifiedNameWithType [jvm]open fun getQualifiedNameWithType(): String getRawXmlValue [jvm]open fun getRawXmlValue(): String getReference [jvm]open override fun getReference(): ResourceReference? getReferenceToSelf [jvm]open override fun getReferenceToSelf(): ResourceReference getRepository [jvm]open override fun getRepository(): LoadableResourceRepositoryReturns the repository this resource belongs to. getResourceDensity [jvm]open override fun getResourceDensity(): Density getResourceType [jvm]open override fun getResourceType(): ResourceType getResourceUrl [jvm]open fun getResourceUrl(): ResourceUrl getResourceValue [jvm]open override fun getResourceValue(): ResourceValue getSource [jvm]open override fun getSource(): PathStringThe returned PathString points either to a file on disk, or to a ZIP entry inside a res.apk file. In the latter case the filesystem URI part points to res.apk itself, e.g. <code>\"zip:///foo/bar/res.apk\"</code>. The path part is the path of the ZIP entry containing the resource. getType [jvm]open override fun getType(): ResourceType getValue [jvm]open override fun getValue(): String getVisibility [jvm]open override fun getVisibility(): ResourceVisibility hashCode [jvm]open override fun hashCode(): Int isFileBased [jvm]open override fun isFileBased(): Boolean isFramework [jvm]open override fun isFramework(): Boolean isUserDefined [jvm]open override fun isUserDefined(): Boolean setValue [jvm]open override fun setValue(value: String?) toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/-basic-density-based-file-resource-item/","title":"BasicDensityBasedFileResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicDensityBasedFileResourceItem/BasicDensityBasedFileResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/-basic-density-based-file-resource-item/#basicdensitybasedfileresourceitem","title":"BasicDensityBasedFileResourceItem","text":"<p>[jvm]\\ constructor(type: ResourceType, name: String, configuration: RepositoryConfiguration, visibility: ResourceVisibility, relativePath: String, density: Density)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicDensityBasedFileResourceItem/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/get-resource-density/","title":"getResourceDensity - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicDensityBasedFileResourceItem/getResourceDensity</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/get-resource-density/#getresourcedensity","title":"getResourceDensity","text":"<p>[jvm]\\ open override fun getResourceDensity(): Density</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/hash-code/","title":"hashCode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicDensityBasedFileResourceItem/hashCode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/hash-code/#hashcode","title":"hashCode","text":"<p>[jvm]\\ open override fun hashCode(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/to-string/","title":"toString - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicDensityBasedFileResourceItem/toString</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-density-based-file-resource-item/to-string/#tostring","title":"toString","text":"<p>[jvm]\\ open override fun toString(): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/","title":"BasicFileResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicFileResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/#basicfileresourceitem","title":"BasicFileResourceItem","text":"<p>open class BasicFileResourceItem(type: ResourceType, name: String, val repositoryConfiguration: RepositoryConfiguration, visibility: ResourceVisibility, relativePath: String) : BasicResourceItem</p> <p>Ported from: BasicFileResourceItem.java</p> <p>Resource item representing a file resource, e.g. a drawable or a layout.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/#inheritors","title":"Inheritors","text":"BasicDensityBasedFileResourceItem"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/#constructors","title":"Constructors","text":"BasicFileResourceItem [jvm]constructor(type: ResourceType, name: String, repositoryConfiguration: RepositoryConfiguration, visibility: ResourceVisibility, relativePath: String)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/#properties","title":"Properties","text":"Name Summary repositoryConfiguration [jvm]open override val repositoryConfiguration: RepositoryConfiguration"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/#functions","title":"Functions","text":"Name Summary asReference [jvm]open override fun asReference(): ResourceReference equals [jvm]open operator override fun equals(other: Any?): Boolean getConfiguration [jvm]open override fun getConfiguration(): FolderConfiguration getKey [jvm]open override fun getKey(): String getLibraryName [jvm]open override fun getLibraryName(): String? getName [jvm]open override fun getName(): String getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaceResolver [jvm]open override fun getNamespaceResolver(): ResourceNamespace.Resolver getOriginalSource [jvm]open override fun getOriginalSource(): PathString? getQualifiedNameWithType [jvm]open fun getQualifiedNameWithType(): String getRawXmlValue [jvm]open fun getRawXmlValue(): String getReference [jvm]open override fun getReference(): ResourceReference? getReferenceToSelf [jvm]open override fun getReferenceToSelf(): ResourceReference getRepository [jvm]open override fun getRepository(): LoadableResourceRepositoryReturns the repository this resource belongs to. getResourceType [jvm]open override fun getResourceType(): ResourceType getResourceUrl [jvm]open fun getResourceUrl(): ResourceUrl getResourceValue [jvm]open override fun getResourceValue(): ResourceValue getSource [jvm]open override fun getSource(): PathStringThe returned PathString points either to a file on disk, or to a ZIP entry inside a res.apk file. In the latter case the filesystem URI part points to res.apk itself, e.g. <code>\"zip:///foo/bar/res.apk\"</code>. The path part is the path of the ZIP entry containing the resource. getType [jvm]open override fun getType(): ResourceType getValue [jvm]open override fun getValue(): String getVisibility [jvm]open override fun getVisibility(): ResourceVisibility hashCode [jvm]open override fun hashCode(): Int isFileBased [jvm]open override fun isFileBased(): Boolean isFramework [jvm]open override fun isFramework(): Boolean isUserDefined [jvm]open override fun isUserDefined(): Boolean setValue [jvm]open override fun setValue(value: String?) toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/-basic-file-resource-item/","title":"BasicFileResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicFileResourceItem/BasicFileResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/-basic-file-resource-item/#basicfileresourceitem","title":"BasicFileResourceItem","text":"<p>[jvm]\\ constructor(type: ResourceType, name: String, repositoryConfiguration: RepositoryConfiguration, visibility: ResourceVisibility, relativePath: String)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicFileResourceItem/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/get-namespace-resolver/","title":"getNamespaceResolver - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicFileResourceItem/getNamespaceResolver</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/get-namespace-resolver/#getnamespaceresolver","title":"getNamespaceResolver","text":"<p>[jvm]\\ open override fun getNamespaceResolver(): ResourceNamespace.Resolver</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/get-original-source/","title":"getOriginalSource - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicFileResourceItem/getOriginalSource</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/get-original-source/#getoriginalsource","title":"getOriginalSource","text":"<p>[jvm]\\ open override fun getOriginalSource(): PathString?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/get-reference/","title":"getReference - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicFileResourceItem/getReference</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/get-reference/#getreference","title":"getReference","text":"<p>[jvm]\\ open override fun getReference(): ResourceReference?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/get-source/","title":"getSource - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicFileResourceItem/getSource</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/get-source/#getsource","title":"getSource","text":"<p>[jvm]\\ open override fun getSource(): PathString</p> <p>The returned PathString points either to a file on disk, or to a ZIP entry inside a res.apk file. In the latter case the filesystem URI part points to res.apk itself, e.g. <code>\"zip:///foo/bar/res.apk\"</code>. The path part is the path of the ZIP entry containing the resource.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/get-value/","title":"getValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicFileResourceItem/getValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/get-value/#getvalue","title":"getValue","text":"<p>[jvm]\\ open override fun getValue(): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/hash-code/","title":"hashCode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicFileResourceItem/hashCode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/hash-code/#hashcode","title":"hashCode","text":"<p>[jvm]\\ open override fun hashCode(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/is-file-based/","title":"isFileBased - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicFileResourceItem/isFileBased</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/is-file-based/#isfilebased","title":"isFileBased","text":"<p>[jvm]\\ open override fun isFileBased(): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/repository-configuration/","title":"repositoryConfiguration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicFileResourceItem/repositoryConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/repository-configuration/#repositoryconfiguration","title":"repositoryConfiguration","text":"<p>[jvm]\\ open override val repositoryConfiguration: RepositoryConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicFileResourceItem/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/-companion/#functions","title":"Functions","text":"Name Summary deserialize [jvm]fun deserialize(stream: Base128InputStream, resourceType: ResourceType, name: String, visibility: ResourceVisibility, configurations: List&lt;RepositoryConfiguration&gt;): BasicFileResourceItemCreates a BasicFileResourceItem by reading its contents from the given stream."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/-companion/deserialize/","title":"deserialize - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicFileResourceItem/Companion/deserialize</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-file-resource-item/-companion/deserialize/#deserialize","title":"deserialize","text":"<p>[jvm]\\ fun deserialize(stream: Base128InputStream, resourceType: ResourceType, name: String, visibility: ResourceVisibility, configurations: List&lt;RepositoryConfiguration&gt;): BasicFileResourceItem</p> <p>Creates a BasicFileResourceItem by reading its contents from the given stream.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-foreign-attr-resource-item/","title":"BasicForeignAttrResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicForeignAttrResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-foreign-attr-resource-item/#basicforeignattrresourceitem","title":"BasicForeignAttrResourceItem","text":"<p>[jvm]\\ class BasicForeignAttrResourceItem(namespace: ResourceNamespace, name: String, val sourceFile: ResourceSourceFile, description: String?, groupName: String?, formats: Set&lt;AttributeFormat&gt;, valueMap: Map&lt;String, Int&gt;, valueDescriptionMap: Map&lt;String, String&gt;) : BasicAttrResourceItem</p> <p>Ported from: BasicForeignAttrResourceItem.java</p> <p>Resource item representing an attr resource that is defined in a namespace different from the namespace of the owning AAR.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-foreign-attr-resource-item/#constructors","title":"Constructors","text":"BasicForeignAttrResourceItem [jvm]constructor(namespace: ResourceNamespace, name: String, sourceFile: ResourceSourceFile, description: String?, groupName: String?, formats: Set&lt;AttributeFormat&gt;, valueMap: Map&lt;String, Int&gt;, valueDescriptionMap: Map&lt;String, String&gt;)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-foreign-attr-resource-item/#properties","title":"Properties","text":"Name Summary repositoryConfiguration [jvm]open override val repositoryConfiguration: RepositoryConfiguration sourceFile [jvm]val sourceFile: ResourceSourceFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-foreign-attr-resource-item/#functions","title":"Functions","text":"Name Summary asReference [jvm]open override fun asReference(): ResourceReference createReference [jvm]fun createReference(): BasicAttrReferenceCreates and returns an BasicAttrReference pointing to this attribute. equals [jvm]open operator override fun equals(other: Any?): Boolean getAttributeValues [jvm]open override fun getAttributeValues(): Map&lt;String, Int&gt; getConfiguration [jvm]open override fun getConfiguration(): FolderConfiguration getDescription [jvm]open override fun getDescription(): String? getFormats [jvm]open override fun getFormats(): Set&lt;AttributeFormat&gt; getGroupName [jvm]open override fun getGroupName(): String? getKey [jvm]open override fun getKey(): String getLibraryName [jvm]open override fun getLibraryName(): String? getName [jvm]open override fun getName(): String getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaceResolver [jvm]open override fun getNamespaceResolver(): ResourceNamespace.Resolver getOriginalSource [jvm]open override fun getOriginalSource(): PathString? getQualifiedNameWithType [jvm]open fun getQualifiedNameWithType(): String getRawXmlValue [jvm]open fun getRawXmlValue(): String getReference [jvm]open fun getReference(): ResourceReference getReferenceToSelf [jvm]open override fun getReferenceToSelf(): ResourceReference getRepository [jvm]open override fun getRepository(): LoadableResourceRepositoryReturns the repository this resource belongs to. getResourceType [jvm]open override fun getResourceType(): ResourceType getResourceUrl [jvm]open fun getResourceUrl(): ResourceUrl getResourceValue [jvm]open override fun getResourceValue(): ResourceValue getSource [jvm]open override fun getSource(): PathString? getType [jvm]open override fun getType(): ResourceType getValue [jvm]open override fun getValue(): String? getValueDescription [jvm]open override fun getValueDescription(valueName: String): String? getVisibility [jvm]open override fun getVisibility(): ResourceVisibility hashCode [jvm]open override fun hashCode(): Int isFileBased [jvm]open override fun isFileBased(): Boolean isFramework [jvm]open override fun isFramework(): Boolean isUserDefined [jvm]open override fun isUserDefined(): Boolean setFormats [jvm]fun setFormats(formats: Set&lt;AttributeFormat&gt;)Replaces the set of the allowed attribute formats. Intended to be called only by the resource repository code. setNamespaceResolver [jvm]fun setNamespaceResolver(resolver: ResourceNamespace.Resolver) setValue [jvm]open override fun setValue(value: String?) toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-foreign-attr-resource-item/-basic-foreign-attr-resource-item/","title":"BasicForeignAttrResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicForeignAttrResourceItem/BasicForeignAttrResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-foreign-attr-resource-item/-basic-foreign-attr-resource-item/#basicforeignattrresourceitem","title":"BasicForeignAttrResourceItem","text":"<p>[jvm]\\ constructor(namespace: ResourceNamespace, name: String, sourceFile: ResourceSourceFile, description: String?, groupName: String?, formats: Set&lt;AttributeFormat&gt;, valueMap: Map&lt;String, Int&gt;, valueDescriptionMap: Map&lt;String, String&gt;)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-foreign-attr-resource-item/get-namespace/","title":"getNamespace - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicForeignAttrResourceItem/getNamespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-foreign-attr-resource-item/get-namespace/#getnamespace","title":"getNamespace","text":"<p>[jvm]\\ open override fun getNamespace(): ResourceNamespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/","title":"BasicPluralsResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicPluralsResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/#basicpluralsresourceitem","title":"BasicPluralsResourceItem","text":"<p>[jvm]\\ class BasicPluralsResourceItem : BasicValueResourceItemBase, PluralsResourceValue</p> <p>Ported from: BasicPluralsResourceItem.java</p> <p>Resource item representing a plurals resource.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/#constructors","title":"Constructors","text":"BasicPluralsResourceItem [jvm]constructor(name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, quantityValues: Map&lt;Arity, String&gt;, defaultArity: Arity?)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/#properties","title":"Properties","text":"Name Summary repositoryConfiguration [jvm]open override val repositoryConfiguration: RepositoryConfiguration sourceFile [jvm]val sourceFile: ResourceSourceFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/#functions","title":"Functions","text":"Name Summary asReference [jvm]open override fun asReference(): ResourceReference equals [jvm]open operator override fun equals(other: Any?): Boolean getConfiguration [jvm]open override fun getConfiguration(): FolderConfiguration getKey [jvm]open override fun getKey(): String getLibraryName [jvm]open override fun getLibraryName(): String? getName [jvm]open override fun getName(): String getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaceResolver [jvm]open override fun getNamespaceResolver(): ResourceNamespace.Resolver getOriginalSource [jvm]open override fun getOriginalSource(): PathString? getPluralsCount [jvm]open override fun getPluralsCount(): Int getQualifiedNameWithType [jvm]open fun getQualifiedNameWithType(): String getQuantity [jvm]open override fun getQuantity(index: Int): String getRawXmlValue [jvm]open fun getRawXmlValue(): String getReference [jvm]open fun getReference(): ResourceReference getReferenceToSelf [jvm]open override fun getReferenceToSelf(): ResourceReference getRepository [jvm]open override fun getRepository(): LoadableResourceRepositoryReturns the repository this resource belongs to. getResourceType [jvm]open override fun getResourceType(): ResourceType getResourceUrl [jvm]open fun getResourceUrl(): ResourceUrl getResourceValue [jvm]open override fun getResourceValue(): ResourceValue getSource [jvm]open override fun getSource(): PathString? getType [jvm]open override fun getType(): ResourceType getValue [jvm]open override fun getValue(): String?open override fun getValue(index: Int): Stringopen override fun getValue(quantity: String): String? getVisibility [jvm]open override fun getVisibility(): ResourceVisibility hashCode [jvm]open override fun hashCode(): Int isFileBased [jvm]open override fun isFileBased(): Boolean isFramework [jvm]open override fun isFramework(): Boolean isUserDefined [jvm]open override fun isUserDefined(): Boolean setNamespaceResolver [jvm]fun setNamespaceResolver(resolver: ResourceNamespace.Resolver) setValue [jvm]open override fun setValue(value: String?) toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/-basic-plurals-resource-item/","title":"BasicPluralsResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicPluralsResourceItem/BasicPluralsResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/-basic-plurals-resource-item/#basicpluralsresourceitem","title":"BasicPluralsResourceItem","text":"<p>[jvm]\\ constructor(name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, quantityValues: Map&lt;Arity, String&gt;, defaultArity: Arity?)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicPluralsResourceItem/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/get-plurals-count/","title":"getPluralsCount - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicPluralsResourceItem/getPluralsCount</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/get-plurals-count/#getpluralscount","title":"getPluralsCount","text":"<p>[jvm]\\ open override fun getPluralsCount(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/get-quantity/","title":"getQuantity - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicPluralsResourceItem/getQuantity</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/get-quantity/#getquantity","title":"getQuantity","text":"<p>[jvm]\\ open override fun getQuantity(index: Int): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/get-value/","title":"getValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicPluralsResourceItem/getValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/get-value/#getvalue","title":"getValue","text":"<p>[jvm]\\ open override fun getValue(index: Int): String</p> <p>open override fun getValue(quantity: String): String?</p> <p>open override fun getValue(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicPluralsResourceItem/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/-companion/#functions","title":"Functions","text":"Name Summary deserialize [jvm]fun deserialize(stream: Base128InputStream, name: String, visibility: ResourceVisibility, sourceFile: ResourceSourceFile, resolver: ResourceNamespace.Resolver): BasicPluralsResourceItemCreates a BasicPluralsResourceItem by reading its contents from the given stream."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/-companion/deserialize/","title":"deserialize - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicPluralsResourceItem/Companion/deserialize</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-plurals-resource-item/-companion/deserialize/#deserialize","title":"deserialize","text":"<p>[jvm]\\ fun deserialize(stream: Base128InputStream, name: String, visibility: ResourceVisibility, sourceFile: ResourceSourceFile, resolver: ResourceNamespace.Resolver): BasicPluralsResourceItem</p> <p>Creates a BasicPluralsResourceItem by reading its contents from the given stream.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/","title":"BasicResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/#basicresourceitem","title":"BasicResourceItem","text":"<p>abstract class BasicResourceItem(type: ResourceType, name: String, visibility: ResourceVisibility) : ResourceItemWithVisibility, ResourceValue</p> <p>Ported from: BasicResourceItemBase.java</p> <p>Base class for com.android.ide.common.resources.ResourceItems.</p> <p>A merger of BasicResourceItemBase and BasicResourceItem from AOSP, to simplify.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/#inheritors","title":"Inheritors","text":"BasicFileResourceItem BasicValueResourceItemBase"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/#constructors","title":"Constructors","text":"BasicResourceItem [jvm]constructor(type: ResourceType, name: String, visibility: ResourceVisibility)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/#properties","title":"Properties","text":"Name Summary repositoryConfiguration [jvm]abstract val repositoryConfiguration: RepositoryConfiguration"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/#functions","title":"Functions","text":"Name Summary asReference [jvm]open override fun asReference(): ResourceReference equals [jvm]open operator override fun equals(other: Any?): Boolean getConfiguration [jvm]open override fun getConfiguration(): FolderConfiguration getKey [jvm]open override fun getKey(): String getLibraryName [jvm]open override fun getLibraryName(): String? getName [jvm]open override fun getName(): String getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaceResolver [jvm]abstract fun getNamespaceResolver(): ResourceNamespace.Resolver getOriginalSource [jvm]open fun getOriginalSource(): PathString getQualifiedNameWithType [jvm]open fun getQualifiedNameWithType(): String getRawXmlValue [jvm]open fun getRawXmlValue(): String getReference [jvm]open fun getReference(): ResourceReference getReferenceToSelf [jvm]open override fun getReferenceToSelf(): ResourceReference getRepository [jvm]open override fun getRepository(): LoadableResourceRepositoryReturns the repository this resource belongs to. getResourceType [jvm]open override fun getResourceType(): ResourceType getResourceUrl [jvm]open fun getResourceUrl(): ResourceUrl getResourceValue [jvm]open override fun getResourceValue(): ResourceValue getSource [jvm]abstract fun getSource(): PathString getType [jvm]open override fun getType(): ResourceType getValue [jvm]abstract fun getValue(): String getVisibility [jvm]open override fun getVisibility(): ResourceVisibility hashCode [jvm]open override fun hashCode(): Int isFileBased [jvm]abstract fun isFileBased(): Boolean isFramework [jvm]open override fun isFramework(): Boolean isUserDefined [jvm]open override fun isUserDefined(): Boolean setValue [jvm]open override fun setValue(value: String?) toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/-basic-resource-item/","title":"BasicResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/BasicResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/-basic-resource-item/#basicresourceitem","title":"BasicResourceItem","text":"<p>[jvm]\\ constructor(type: ResourceType, name: String, visibility: ResourceVisibility)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/as-reference/","title":"asReference - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/asReference</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/as-reference/#asreference","title":"asReference","text":"<p>[jvm]\\ open override fun asReference(): ResourceReference</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-configuration/","title":"getConfiguration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/getConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-configuration/#getconfiguration","title":"getConfiguration","text":"<p>[jvm]\\ open override fun getConfiguration(): FolderConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-key/","title":"getKey - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/getKey</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-key/#getkey","title":"getKey","text":"<p>[jvm]\\ open override fun getKey(): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-library-name/","title":"getLibraryName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/getLibraryName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-library-name/#getlibraryname","title":"getLibraryName","text":"<p>[jvm]\\ open override fun getLibraryName(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-name/","title":"getName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/getName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-name/#getname","title":"getName","text":"<p>[jvm]\\ open override fun getName(): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-namespace/","title":"getNamespace - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/getNamespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-namespace/#getnamespace","title":"getNamespace","text":"<p>[jvm]\\ open override fun getNamespace(): ResourceNamespace</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-reference-to-self/","title":"getReferenceToSelf - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/getReferenceToSelf</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-reference-to-self/#getreferencetoself","title":"getReferenceToSelf","text":"<p>[jvm]\\ open override fun getReferenceToSelf(): ResourceReference</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-repository/","title":"getRepository - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/getRepository</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-repository/#getrepository","title":"getRepository","text":"<p>[jvm]\\ open override fun getRepository(): LoadableResourceRepository</p> <p>Returns the repository this resource belongs to.</p> <p>Framework resource items may move between repositories with the same origin.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-repository/#see-also","title":"See also","text":"RepositoryConfiguration.transferOwnershipTo"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-resource-type/","title":"getResourceType - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/getResourceType</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-resource-type/#getresourcetype","title":"getResourceType","text":"<p>[jvm]\\ open override fun getResourceType(): ResourceType</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-resource-value/","title":"getResourceValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/getResourceValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-resource-value/#getresourcevalue","title":"getResourceValue","text":"<p>[jvm]\\ open override fun getResourceValue(): ResourceValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-type/","title":"getType - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/getType</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-type/#gettype","title":"getType","text":"<p>[jvm]\\ open override fun getType(): ResourceType</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-visibility/","title":"getVisibility - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/getVisibility</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/get-visibility/#getvisibility","title":"getVisibility","text":"<p>[jvm]\\ open override fun getVisibility(): ResourceVisibility</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/hash-code/","title":"hashCode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/hashCode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/hash-code/#hashcode","title":"hashCode","text":"<p>[jvm]\\ open override fun hashCode(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/is-framework/","title":"isFramework - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/isFramework</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/is-framework/#isframework","title":"isFramework","text":"<p>[jvm]\\ open override fun isFramework(): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/is-user-defined/","title":"isUserDefined - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/isUserDefined</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/is-user-defined/#isuserdefined","title":"isUserDefined","text":"<p>[jvm]\\ open override fun isUserDefined(): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/repository-configuration/","title":"repositoryConfiguration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/repositoryConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/repository-configuration/#repositoryconfiguration","title":"repositoryConfiguration","text":"<p>[jvm]\\ abstract val repositoryConfiguration: RepositoryConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/set-value/","title":"setValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/setValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/set-value/#setvalue","title":"setValue","text":"<p>[jvm]\\ open override fun setValue(value: String?)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/to-string/","title":"toString - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/toString</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/to-string/#tostring","title":"toString","text":"<p>[jvm]\\ open override fun toString(): String</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/-companion/#functions","title":"Functions","text":"Name Summary deserialize [jvm]fun deserialize(stream: Base128InputStream, configurations: List&lt;RepositoryConfiguration&gt;, sourceFiles: List&lt;ResourceSourceFile&gt;, namespaceResolvers: List&lt;ResourceNamespace.Resolver&gt;): BasicResourceItemCreates a resource item by reading its contents from the given stream."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/-companion/deserialize/","title":"deserialize - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicResourceItem/Companion/deserialize</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-resource-item/-companion/deserialize/#deserialize","title":"deserialize","text":"<p>[jvm]\\ fun deserialize(stream: Base128InputStream, configurations: List&lt;RepositoryConfiguration&gt;, sourceFiles: List&lt;ResourceSourceFile&gt;, namespaceResolvers: List&lt;ResourceNamespace.Resolver&gt;): BasicResourceItem</p> <p>Creates a resource item by reading its contents from the given stream.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/","title":"BasicStyleResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/#basicstyleresourceitem","title":"BasicStyleResourceItem","text":"<p>[jvm]\\ class BasicStyleResourceItem(name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility, parentStyle: String?, styleItems: Collection&lt;StyleItemResourceValue&gt;) : BasicValueResourceItemBase, StyleResourceValue</p> <p>Ported from: BasicStyleResourceItem.java</p> <p>Resource item representing a style resource.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/#constructors","title":"Constructors","text":"BasicStyleResourceItem [jvm]constructor(name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, parentStyle: String?, styleItems: Collection&lt;StyleItemResourceValue&gt;)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/#properties","title":"Properties","text":"Name Summary repositoryConfiguration [jvm]open override val repositoryConfiguration: RepositoryConfiguration sourceFile [jvm]val sourceFile: ResourceSourceFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/#functions","title":"Functions","text":"Name Summary asReference [jvm]open override fun asReference(): ResourceReference equals [jvm]open operator override fun equals(other: Any?): Boolean getConfiguration [jvm]open override fun getConfiguration(): FolderConfiguration getDefinedItems [jvm]open override fun getDefinedItems(): Collection&lt;StyleItemResourceValue&gt; getItem [jvm]open override fun getItem(attr: ResourceReference): StyleItemResourceValue?open override fun getItem(namespace: ResourceNamespace, name: String): StyleItemResourceValue? getKey [jvm]open override fun getKey(): String getLibraryName [jvm]open override fun getLibraryName(): String? getName [jvm]open override fun getName(): String getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaceResolver [jvm]open override fun getNamespaceResolver(): ResourceNamespace.Resolver getOriginalSource [jvm]open override fun getOriginalSource(): PathString? getParentStyle [jvm]open fun getParentStyle(): ResourceReference getParentStyleName [jvm]open override fun getParentStyleName(): String? getQualifiedNameWithType [jvm]open fun getQualifiedNameWithType(): String getRawXmlValue [jvm]open fun getRawXmlValue(): String getReference [jvm]open fun getReference(): ResourceReference getReferenceToSelf [jvm]open override fun getReferenceToSelf(): ResourceReference getRepository [jvm]open override fun getRepository(): LoadableResourceRepositoryReturns the repository this resource belongs to. getResourceType [jvm]open override fun getResourceType(): ResourceType getResourceUrl [jvm]open fun getResourceUrl(): ResourceUrl getResourceValue [jvm]open override fun getResourceValue(): ResourceValue getSource [jvm]open override fun getSource(): PathString? getType [jvm]open override fun getType(): ResourceType getValue [jvm]open override fun getValue(): String? getVisibility [jvm]open override fun getVisibility(): ResourceVisibility hashCode [jvm]open override fun hashCode(): Int isFileBased [jvm]open override fun isFileBased(): Boolean isFramework [jvm]open override fun isFramework(): Boolean isUserDefined [jvm]open override fun isUserDefined(): Boolean setNamespaceResolver [jvm]fun setNamespaceResolver(resolver: ResourceNamespace.Resolver) setValue [jvm]open override fun setValue(value: String?) toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/-basic-style-resource-item/","title":"BasicStyleResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleResourceItem/BasicStyleResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/-basic-style-resource-item/#basicstyleresourceitem","title":"BasicStyleResourceItem","text":"<p>[jvm]\\ constructor(name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, parentStyle: String?, styleItems: Collection&lt;StyleItemResourceValue&gt;)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleResourceItem/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/get-defined-items/","title":"getDefinedItems - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleResourceItem/getDefinedItems</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/get-defined-items/#getdefineditems","title":"getDefinedItems","text":"<p>[jvm]\\ open override fun getDefinedItems(): Collection&lt;StyleItemResourceValue&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/get-item/","title":"getItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleResourceItem/getItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/get-item/#getitem","title":"getItem","text":"<p>[jvm]\\ open override fun getItem(namespace: ResourceNamespace, name: String): StyleItemResourceValue?</p> <p>open override fun getItem(attr: ResourceReference): StyleItemResourceValue?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/get-parent-style-name/","title":"getParentStyleName - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleResourceItem/getParentStyleName</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/get-parent-style-name/#getparentstylename","title":"getParentStyleName","text":"<p>[jvm]\\ open override fun getParentStyleName(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleResourceItem/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/-companion/#functions","title":"Functions","text":"Name Summary deserialize [jvm]fun deserialize(stream: Base128InputStream, name: String, visibility: ResourceVisibility, sourceFile: ResourceSourceFile, resolver: ResourceNamespace.Resolver, namespaceResolvers: List&lt;ResourceNamespace.Resolver&gt;): BasicStyleResourceItemCreates a BasicStyleResourceItem by reading its contents from the given stream."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/-companion/deserialize/","title":"deserialize - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleResourceItem/Companion/deserialize</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-style-resource-item/-companion/deserialize/#deserialize","title":"deserialize","text":"<p>[jvm]\\ fun deserialize(stream: Base128InputStream, name: String, visibility: ResourceVisibility, sourceFile: ResourceSourceFile, resolver: ResourceNamespace.Resolver, namespaceResolvers: List&lt;ResourceNamespace.Resolver&gt;): BasicStyleResourceItem</p> <p>Creates a BasicStyleResourceItem by reading its contents from the given stream.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/","title":"BasicStyleableResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleableResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/#basicstyleableresourceitem","title":"BasicStyleableResourceItem","text":"<p>[jvm]\\ class BasicStyleableResourceItem(name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility, attrs: List&lt;AttrResourceValue&gt;) : BasicValueResourceItemBase, StyleableResourceValue</p> <p>Ported from: BasicStyleableResourceItem.java</p> <p>Resource item representing a styleable resource.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/#constructors","title":"Constructors","text":"BasicStyleableResourceItem [jvm]constructor(name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, attrs: List&lt;AttrResourceValue&gt;)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/#properties","title":"Properties","text":"Name Summary repositoryConfiguration [jvm]open override val repositoryConfiguration: RepositoryConfiguration sourceFile [jvm]val sourceFile: ResourceSourceFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/#functions","title":"Functions","text":"Name Summary asReference [jvm]open override fun asReference(): ResourceReference equals [jvm]open operator override fun equals(other: Any?): Boolean getAllAttributes [jvm]open override fun getAllAttributes(): List&lt;AttrResourceValue&gt; getConfiguration [jvm]open override fun getConfiguration(): FolderConfiguration getKey [jvm]open override fun getKey(): String getLibraryName [jvm]open override fun getLibraryName(): String? getName [jvm]open override fun getName(): String getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaceResolver [jvm]open override fun getNamespaceResolver(): ResourceNamespace.Resolver getOriginalSource [jvm]open override fun getOriginalSource(): PathString? getQualifiedNameWithType [jvm]open fun getQualifiedNameWithType(): String getRawXmlValue [jvm]open fun getRawXmlValue(): String getReference [jvm]open fun getReference(): ResourceReference getReferenceToSelf [jvm]open override fun getReferenceToSelf(): ResourceReference getRepository [jvm]open override fun getRepository(): LoadableResourceRepositoryReturns the repository this resource belongs to. getResourceType [jvm]open override fun getResourceType(): ResourceType getResourceUrl [jvm]open fun getResourceUrl(): ResourceUrl getResourceValue [jvm]open override fun getResourceValue(): ResourceValue getSource [jvm]open override fun getSource(): PathString? getType [jvm]open override fun getType(): ResourceType getValue [jvm]open override fun getValue(): String? getVisibility [jvm]open override fun getVisibility(): ResourceVisibility hashCode [jvm]open override fun hashCode(): Int isFileBased [jvm]open override fun isFileBased(): Boolean isFramework [jvm]open override fun isFramework(): Boolean isUserDefined [jvm]open override fun isUserDefined(): Boolean setNamespaceResolver [jvm]fun setNamespaceResolver(resolver: ResourceNamespace.Resolver) setValue [jvm]open override fun setValue(value: String?) toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/-basic-styleable-resource-item/","title":"BasicStyleableResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleableResourceItem/BasicStyleableResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/-basic-styleable-resource-item/#basicstyleableresourceitem","title":"BasicStyleableResourceItem","text":"<p>[jvm]\\ constructor(name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, attrs: List&lt;AttrResourceValue&gt;)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleableResourceItem/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/get-all-attributes/","title":"getAllAttributes - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleableResourceItem/getAllAttributes</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/get-all-attributes/#getallattributes","title":"getAllAttributes","text":"<p>[jvm]\\ open override fun getAllAttributes(): List&lt;AttrResourceValue&gt;</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleableResourceItem/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/-companion/#functions","title":"Functions","text":"Name Summary deserialize [jvm]fun deserialize(stream: Base128InputStream, name: String, visibility: ResourceVisibility, sourceFile: ResourceSourceFile, resolver: ResourceNamespace.Resolver, configurations: List&lt;RepositoryConfiguration&gt;, sourceFiles: List&lt;ResourceSourceFile&gt;, namespaceResolvers: List&lt;ResourceNamespace.Resolver&gt;): BasicStyleableResourceItemCreates a BasicStyleableResourceItem by reading its contents from the given stream. getCanonicalAttr [jvm]fun getCanonicalAttr(attr: AttrResourceValue, repository: ResourceRepository): AttrResourceValueFor an attr reference that doesn\u2019t contain formats tries to find an attr definition the reference is pointing to. If such attr definition belongs to this resource repository and has the same description and group name as the attr reference, returns the attr definition. Otherwise returns the attr reference passed as the parameter."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/-companion/deserialize/","title":"deserialize - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleableResourceItem/Companion/deserialize</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/-companion/deserialize/#deserialize","title":"deserialize","text":"<p>[jvm]\\ fun deserialize(stream: Base128InputStream, name: String, visibility: ResourceVisibility, sourceFile: ResourceSourceFile, resolver: ResourceNamespace.Resolver, configurations: List&lt;RepositoryConfiguration&gt;, sourceFiles: List&lt;ResourceSourceFile&gt;, namespaceResolvers: List&lt;ResourceNamespace.Resolver&gt;): BasicStyleableResourceItem</p> <p>Creates a BasicStyleableResourceItem by reading its contents from the given stream.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/-companion/get-canonical-attr/","title":"getCanonicalAttr - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicStyleableResourceItem/Companion/getCanonicalAttr</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-styleable-resource-item/-companion/get-canonical-attr/#getcanonicalattr","title":"getCanonicalAttr","text":"<p>[jvm]\\ fun getCanonicalAttr(attr: AttrResourceValue, repository: ResourceRepository): AttrResourceValue</p> <p>For an attr reference that doesn\u2019t contain formats tries to find an attr definition the reference is pointing to. If such attr definition belongs to this resource repository and has the same description and group name as the attr reference, returns the attr definition. Otherwise returns the attr reference passed as the parameter.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-text-value-resource-item/","title":"BasicTextValueResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicTextValueResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-text-value-resource-item/#basictextvalueresourceitem","title":"BasicTextValueResourceItem","text":"<p>[jvm]\\ class BasicTextValueResourceItem(type: ResourceType, name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility, textValue: String?, rawXmlValue: String?) : BasicValueResourceItem, TextResourceValue</p> <p>Ported from: BasicTextValueResourceItem.java</p> <p>Resource item representing a value resource, e.g. a string or a color.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-text-value-resource-item/#constructors","title":"Constructors","text":"BasicTextValueResourceItem [jvm]constructor(type: ResourceType, name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, textValue: String?, rawXmlValue: String?)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-text-value-resource-item/#properties","title":"Properties","text":"Name Summary repositoryConfiguration [jvm]open override val repositoryConfiguration: RepositoryConfiguration sourceFile [jvm]val sourceFile: ResourceSourceFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-text-value-resource-item/#functions","title":"Functions","text":"Name Summary asReference [jvm]open override fun asReference(): ResourceReference equals [jvm]open operator override fun equals(other: Any?): Boolean getConfiguration [jvm]open override fun getConfiguration(): FolderConfiguration getKey [jvm]open override fun getKey(): String getLibraryName [jvm]open override fun getLibraryName(): String? getName [jvm]open override fun getName(): String getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaceResolver [jvm]open override fun getNamespaceResolver(): ResourceNamespace.Resolver getOriginalSource [jvm]open override fun getOriginalSource(): PathString? getQualifiedNameWithType [jvm]open fun getQualifiedNameWithType(): String getRawXmlValue [jvm]open override fun getRawXmlValue(): String? getReference [jvm]open fun getReference(): ResourceReference getReferenceToSelf [jvm]open override fun getReferenceToSelf(): ResourceReference getRepository [jvm]open override fun getRepository(): LoadableResourceRepositoryReturns the repository this resource belongs to. getResourceType [jvm]open override fun getResourceType(): ResourceType getResourceUrl [jvm]open fun getResourceUrl(): ResourceUrl getResourceValue [jvm]open override fun getResourceValue(): ResourceValue getSource [jvm]open override fun getSource(): PathString? getType [jvm]open override fun getType(): ResourceType getValue [jvm]open override fun getValue(): String? getVisibility [jvm]open override fun getVisibility(): ResourceVisibility hashCode [jvm]open override fun hashCode(): Int isFileBased [jvm]open override fun isFileBased(): Boolean isFramework [jvm]open override fun isFramework(): Boolean isUserDefined [jvm]open override fun isUserDefined(): Boolean setNamespaceResolver [jvm]fun setNamespaceResolver(resolver: ResourceNamespace.Resolver) setValue [jvm]open override fun setValue(value: String?) toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-text-value-resource-item/-basic-text-value-resource-item/","title":"BasicTextValueResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicTextValueResourceItem/BasicTextValueResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-text-value-resource-item/-basic-text-value-resource-item/#basictextvalueresourceitem","title":"BasicTextValueResourceItem","text":"<p>[jvm]\\ constructor(type: ResourceType, name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, textValue: String?, rawXmlValue: String?)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-text-value-resource-item/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicTextValueResourceItem/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-text-value-resource-item/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-text-value-resource-item/get-raw-xml-value/","title":"getRawXmlValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicTextValueResourceItem/getRawXmlValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-text-value-resource-item/get-raw-xml-value/#getrawxmlvalue","title":"getRawXmlValue","text":"<p>[jvm]\\ open override fun getRawXmlValue(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-text-value-resource-item/hash-code/","title":"hashCode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicTextValueResourceItem/hashCode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-text-value-resource-item/hash-code/#hashcode","title":"hashCode","text":"<p>[jvm]\\ open override fun hashCode(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/","title":"BasicValueResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/#basicvalueresourceitem","title":"BasicValueResourceItem","text":"<p>open class BasicValueResourceItem(type: ResourceType, name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility, value: String?) : BasicValueResourceItemBase</p> <p>Ported from: BasicValueResourceItem.java</p> <p>Resource item representing a value resource, e.g. a string or a color.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/#inheritors","title":"Inheritors","text":"BasicTextValueResourceItem"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/#constructors","title":"Constructors","text":"BasicValueResourceItem [jvm]constructor(type: ResourceType, name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, value: String?)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/#properties","title":"Properties","text":"Name Summary repositoryConfiguration [jvm]open override val repositoryConfiguration: RepositoryConfiguration sourceFile [jvm]val sourceFile: ResourceSourceFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/#functions","title":"Functions","text":"Name Summary asReference [jvm]open override fun asReference(): ResourceReference equals [jvm]open operator override fun equals(other: Any?): Boolean getConfiguration [jvm]open override fun getConfiguration(): FolderConfiguration getKey [jvm]open override fun getKey(): String getLibraryName [jvm]open override fun getLibraryName(): String? getName [jvm]open override fun getName(): String getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaceResolver [jvm]open override fun getNamespaceResolver(): ResourceNamespace.Resolver getOriginalSource [jvm]open override fun getOriginalSource(): PathString? getQualifiedNameWithType [jvm]open fun getQualifiedNameWithType(): String getRawXmlValue [jvm]open fun getRawXmlValue(): String getReference [jvm]open fun getReference(): ResourceReference getReferenceToSelf [jvm]open override fun getReferenceToSelf(): ResourceReference getRepository [jvm]open override fun getRepository(): LoadableResourceRepositoryReturns the repository this resource belongs to. getResourceType [jvm]open override fun getResourceType(): ResourceType getResourceUrl [jvm]open fun getResourceUrl(): ResourceUrl getResourceValue [jvm]open override fun getResourceValue(): ResourceValue getSource [jvm]open override fun getSource(): PathString? getType [jvm]open override fun getType(): ResourceType getValue [jvm]open override fun getValue(): String? getVisibility [jvm]open override fun getVisibility(): ResourceVisibility hashCode [jvm]open override fun hashCode(): Int isFileBased [jvm]open override fun isFileBased(): Boolean isFramework [jvm]open override fun isFramework(): Boolean isUserDefined [jvm]open override fun isUserDefined(): Boolean setNamespaceResolver [jvm]fun setNamespaceResolver(resolver: ResourceNamespace.Resolver) setValue [jvm]open override fun setValue(value: String?) toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/-basic-value-resource-item/","title":"BasicValueResourceItem - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItem/BasicValueResourceItem</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/-basic-value-resource-item/#basicvalueresourceitem","title":"BasicValueResourceItem","text":"<p>[jvm]\\ constructor(type: ResourceType, name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility, value: String?)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItem/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/get-value/","title":"getValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItem/getValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/get-value/#getvalue","title":"getValue","text":"<p>[jvm]\\ open override fun getValue(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/hash-code/","title":"hashCode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItem/hashCode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/hash-code/#hashcode","title":"hashCode","text":"<p>[jvm]\\ open override fun hashCode(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItem/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/-companion/#functions","title":"Functions","text":"Name Summary deserialize [jvm]fun deserialize(stream: Base128InputStream, resourceType: ResourceType, name: String, visibility: ResourceVisibility, sourceFile: ResourceSourceFile, resolver: ResourceNamespace.Resolver): BasicValueResourceItemCreates a BasicValueResourceItem by reading its contents from the given stream."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/-companion/deserialize/","title":"deserialize - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItem/Companion/deserialize</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item/-companion/deserialize/#deserialize","title":"deserialize","text":"<p>[jvm]\\ fun deserialize(stream: Base128InputStream, resourceType: ResourceType, name: String, visibility: ResourceVisibility, sourceFile: ResourceSourceFile, resolver: ResourceNamespace.Resolver): BasicValueResourceItem</p> <p>Creates a BasicValueResourceItem by reading its contents from the given stream.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/","title":"BasicValueResourceItemBase - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItemBase</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/#basicvalueresourceitembase","title":"BasicValueResourceItemBase","text":"<p>abstract class BasicValueResourceItemBase(type: ResourceType, name: String, val sourceFile: ResourceSourceFile, visibility: ResourceVisibility) : BasicResourceItem</p> <p>Ported from: BasicValueResourceItemBase.java</p> <p>Base class for value resource items.</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/#inheritors","title":"Inheritors","text":"BasicArrayResourceItem BasicAttrReference BasicAttrResourceItem BasicPluralsResourceItem BasicStyleResourceItem BasicStyleableResourceItem BasicValueResourceItem"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/#constructors","title":"Constructors","text":"BasicValueResourceItemBase [jvm]constructor(type: ResourceType, name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility)"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/#types","title":"Types","text":"Name Summary Companion [jvm]object Companion"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/#properties","title":"Properties","text":"Name Summary repositoryConfiguration [jvm]open override val repositoryConfiguration: RepositoryConfiguration sourceFile [jvm]val sourceFile: ResourceSourceFile"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/#functions","title":"Functions","text":"Name Summary asReference [jvm]open override fun asReference(): ResourceReference equals [jvm]open operator override fun equals(other: Any?): Boolean getConfiguration [jvm]open override fun getConfiguration(): FolderConfiguration getKey [jvm]open override fun getKey(): String getLibraryName [jvm]open override fun getLibraryName(): String? getName [jvm]open override fun getName(): String getNamespace [jvm]open override fun getNamespace(): ResourceNamespace getNamespaceResolver [jvm]open override fun getNamespaceResolver(): ResourceNamespace.Resolver getOriginalSource [jvm]open override fun getOriginalSource(): PathString? getQualifiedNameWithType [jvm]open fun getQualifiedNameWithType(): String getRawXmlValue [jvm]open fun getRawXmlValue(): String getReference [jvm]open fun getReference(): ResourceReference getReferenceToSelf [jvm]open override fun getReferenceToSelf(): ResourceReference getRepository [jvm]open override fun getRepository(): LoadableResourceRepositoryReturns the repository this resource belongs to. getResourceType [jvm]open override fun getResourceType(): ResourceType getResourceUrl [jvm]open fun getResourceUrl(): ResourceUrl getResourceValue [jvm]open override fun getResourceValue(): ResourceValue getSource [jvm]open override fun getSource(): PathString? getType [jvm]open override fun getType(): ResourceType getValue [jvm]open override fun getValue(): String? getVisibility [jvm]open override fun getVisibility(): ResourceVisibility hashCode [jvm]open override fun hashCode(): Int isFileBased [jvm]open override fun isFileBased(): Boolean isFramework [jvm]open override fun isFramework(): Boolean isUserDefined [jvm]open override fun isUserDefined(): Boolean setNamespaceResolver [jvm]fun setNamespaceResolver(resolver: ResourceNamespace.Resolver) setValue [jvm]open override fun setValue(value: String?) toString [jvm]open override fun toString(): String"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/-basic-value-resource-item-base/","title":"BasicValueResourceItemBase - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItemBase/BasicValueResourceItemBase</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/-basic-value-resource-item-base/#basicvalueresourceitembase","title":"BasicValueResourceItemBase","text":"<p>[jvm]\\ constructor(type: ResourceType, name: String, sourceFile: ResourceSourceFile, visibility: ResourceVisibility)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/equals/","title":"equals - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItemBase/equals</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/equals/#equals","title":"equals","text":"<p>[jvm]\\ open operator override fun equals(other: Any?): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/get-namespace-resolver/","title":"getNamespaceResolver - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItemBase/getNamespaceResolver</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/get-namespace-resolver/#getnamespaceresolver","title":"getNamespaceResolver","text":"<p>[jvm]\\ open override fun getNamespaceResolver(): ResourceNamespace.Resolver</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/get-original-source/","title":"getOriginalSource - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItemBase/getOriginalSource</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/get-original-source/#getoriginalsource","title":"getOriginalSource","text":"<p>[jvm]\\ open override fun getOriginalSource(): PathString?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/get-source/","title":"getSource - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItemBase/getSource</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/get-source/#getsource","title":"getSource","text":"<p>[jvm]\\ open override fun getSource(): PathString?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/get-value/","title":"getValue - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItemBase/getValue</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/get-value/#getvalue","title":"getValue","text":"<p>[jvm]\\ open override fun getValue(): String?</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/hash-code/","title":"hashCode - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItemBase/hashCode</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/hash-code/#hashcode","title":"hashCode","text":"<p>[jvm]\\ open override fun hashCode(): Int</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/is-file-based/","title":"isFileBased - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItemBase/isFileBased</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/is-file-based/#isfilebased","title":"isFileBased","text":"<p>[jvm]\\ open override fun isFileBased(): Boolean</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/repository-configuration/","title":"repositoryConfiguration - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItemBase/repositoryConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/repository-configuration/#repositoryconfiguration","title":"repositoryConfiguration","text":"<p>[jvm]\\ open override val repositoryConfiguration: RepositoryConfiguration</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/set-namespace-resolver/","title":"setNamespaceResolver - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItemBase/setNamespaceResolver</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/set-namespace-resolver/#setnamespaceresolver","title":"setNamespaceResolver","text":"<p>[jvm]\\ fun setNamespaceResolver(resolver: ResourceNamespace.Resolver)</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/source-file/","title":"sourceFile - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItemBase/sourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/source-file/#sourcefile","title":"sourceFile","text":"<p>[jvm]\\ val sourceFile: ResourceSourceFile</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/-companion/","title":"Companion - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItemBase/Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/-companion/#companion","title":"Companion","text":"<p>[jvm]\\ object Companion</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/-companion/#functions","title":"Functions","text":"Name Summary deserialize [jvm]fun deserialize(stream: Base128InputStream, resourceType: ResourceType, name: String, visibility: ResourceVisibility, configurations: List&lt;RepositoryConfiguration&gt;, sourceFiles: List&lt;ResourceSourceFile&gt;, namespaceResolvers: List&lt;ResourceNamespace.Resolver&gt;): BasicValueResourceItemBaseCreates a resource item by reading its contents from the given stream."},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/-companion/deserialize/","title":"deserialize - Paparazzi","text":"<p>//paparazzi/app.cash.paparazzi.internal.resources.base/BasicValueResourceItemBase/Companion/deserialize</p>"},{"location":"1.x/paparazzi/app.cash.paparazzi.internal.resources.base/-basic-value-resource-item-base/-companion/deserialize/#deserialize","title":"deserialize","text":"<p>[jvm]\\ fun deserialize(stream: Base128InputStream, resourceType: ResourceType, name: String, visibility: ResourceVisibility, configurations: List&lt;RepositoryConfiguration&gt;, sourceFiles: List&lt;ResourceSourceFile&gt;, namespaceResolvers: List&lt;ResourceNamespace.Resolver&gt;): BasicValueResourceItemBase</p> <p>Creates a resource item by reading its contents from the given stream.</p>"}]}